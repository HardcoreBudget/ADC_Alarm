
ADC_Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00005360  000053f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001ca  008001ca  0000555e  2**0
                  ALLOC
  3 .stab         00004404  00000000  00000000  00005560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ab  00000000  00000000  00009964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b00f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b1af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000eb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000101be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_1>
       8:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_2>
       c:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3d       	cpi	r26, 0xDF	; 223
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <main>
      8a:	0c 94 ae 29 	jmp	0x535c	; 0x535c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 87 29 	jmp	0x530e	; 0x530e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_voidEnable>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/GIE_Interface.h"

void GIE_voidEnable(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_voidDisable>:

void GIE_voidDisable(){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <EXTI0_voidInit>:
void (*Global_EXTI0_CallBack)(void)= NULL;
void (*Global_EXTI1_CallBack)(void)= NULL;
void (*Global_EXTI2_CallBack)(void)= NULL;

//init the INT with sensing mood in preprocessing stage
void EXTI0_voidInit(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#elif 	INT0_SENSE == EXTI_FALLING

	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
     e6e:	a5 e5       	ldi	r26, 0x55	; 85
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e5       	ldi	r30, 0x55	; 85
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
     e7c:	a5 e5       	ldi	r26, 0x55	; 85
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e5       	ldi	r30, 0x55	; 85
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <EXTI1_voidInit>:
void EXTI1_voidInit(void){
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#elif 	INT1_SENSE == EXTI_FALLING

	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
     ea6:	a5 e5       	ldi	r26, 0x55	; 85
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e5       	ldi	r30, 0x55	; 85
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <EXTI2_voidInit>:
void EXTI2_voidInit(void){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control of Pin INT2*/
#if 	INT2_SENSE == EXTI_FALLING
	CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
     ec2:	a4 e5       	ldi	r26, 0x54	; 84
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e4 e5       	ldi	r30, 0x54	; 84
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7b       	andi	r24, 0xBF	; 191
     ece:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <EXTI0_voidEnable>:

//enable EXTI
void EXTI0_voidEnable(void){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
     ede:	ab e5       	ldi	r26, 0x5B	; 91
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	eb e5       	ldi	r30, 0x5B	; 91
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <EXTI1_voidEnable>:
void EXTI1_voidEnable(void){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	8c 93       	st	X, r24
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <EXTI2_voidEnable>:
void EXTI2_voidEnable(void){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
     f16:	ab e5       	ldi	r26, 0x5B	; 91
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e5       	ldi	r30, 0x5B	; 91
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 62       	ori	r24, 0x20	; 32
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <EXTI0_voidDisable>:

//disable EXTI
void EXTI0_voidDisable(void){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e5       	ldi	r30, 0x5B	; 91
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7b       	andi	r24, 0xBF	; 191
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
     f6a:	ab e5       	ldi	r26, 0x5B	; 91
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e5       	ldi	r30, 0x5B	; 91
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7d       	andi	r24, 0xDF	; 223
     f76:	8c 93       	st	X, r24
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <EXTI0_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXTI0_voidSetSignalch(u8 SenseCpy){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <EXTI0_voidSetSignalch+0x6>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3b 83       	std	Y+3, r19	; 0x03
     f94:	2a 83       	std	Y+2, r18	; 0x02
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	99 f1       	breq	.+102    	; 0x1006 <EXTI0_voidSetSignalch+0x88>
     fa0:	2a 81       	ldd	r18, Y+2	; 0x02
     fa2:	3b 81       	ldd	r19, Y+3	; 0x03
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <EXTI0_voidSetSignalch+0x36>
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	c9 f1       	breq	.+114    	; 0x1024 <EXTI0_voidSetSignalch+0xa6>
     fb2:	46 c0       	rjmp	.+140    	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
     fb4:	2a 81       	ldd	r18, Y+2	; 0x02
     fb6:	3b 81       	ldd	r19, Y+3	; 0x03
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	31 f0       	breq	.+12     	; 0xfca <EXTI0_voidSetSignalch+0x4c>
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	81 f0       	breq	.+32     	; 0xfe8 <EXTI0_voidSetSignalch+0x6a>
     fc8:	3b c0       	rjmp	.+118    	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
     fca:	a5 e5       	ldi	r26, 0x55	; 85
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e5       	ldi	r30, 0x55	; 85
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8e 7f       	andi	r24, 0xFE	; 254
     fd6:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
     fd8:	a5 e5       	ldi	r26, 0x55	; 85
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e5       	ldi	r30, 0x55	; 85
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
     fe6:	2c c0       	rjmp	.+88     	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
     fe8:	a5 e5       	ldi	r26, 0x55	; 85
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e5       	ldi	r30, 0x55	; 85
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
     ff6:	a5 e5       	ldi	r26, 0x55	; 85
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e5       	ldi	r30, 0x55	; 85
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	8c 93       	st	X, r24
    1004:	1d c0       	rjmp	.+58     	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1006:	a5 e5       	ldi	r26, 0x55	; 85
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e5       	ldi	r30, 0x55	; 85
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1014:	a5 e5       	ldi	r26, 0x55	; 85
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e5       	ldi	r30, 0x55	; 85
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8d 7f       	andi	r24, 0xFD	; 253
    1020:	8c 93       	st	X, r24
    1022:	0e c0       	rjmp	.+28     	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1024:	a5 e5       	ldi	r26, 0x55	; 85
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e5 e5       	ldi	r30, 0x55	; 85
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1032:	a5 e5       	ldi	r26, 0x55	; 85
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e5       	ldi	r30, 0x55	; 85
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8d 7f       	andi	r24, 0xFD	; 253
    103e:	8c 93       	st	X, r24
		break;
	}
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <EXTI1_voidSetSignalch>:
void EXTI1_voidSetSignalch(u8 SenseCpy){
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <EXTI1_voidSetSignalch+0x6>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3b 83       	std	Y+3, r19	; 0x03
    1062:	2a 83       	std	Y+2, r18	; 0x02
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	99 f1       	breq	.+102    	; 0x10d4 <EXTI1_voidSetSignalch+0x88>
    106e:	2a 81       	ldd	r18, Y+2	; 0x02
    1070:	3b 81       	ldd	r19, Y+3	; 0x03
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <EXTI1_voidSetSignalch+0x36>
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	c9 f1       	breq	.+114    	; 0x10f2 <EXTI1_voidSetSignalch+0xa6>
    1080:	46 c0       	rjmp	.+140    	; 0x110e <EXTI1_voidSetSignalch+0xc2>
    1082:	2a 81       	ldd	r18, Y+2	; 0x02
    1084:	3b 81       	ldd	r19, Y+3	; 0x03
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	31 f0       	breq	.+12     	; 0x1098 <EXTI1_voidSetSignalch+0x4c>
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <EXTI1_voidSetSignalch+0x6a>
    1096:	3b c0       	rjmp	.+118    	; 0x110e <EXTI1_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1098:	a5 e5       	ldi	r26, 0x55	; 85
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e5       	ldi	r30, 0x55	; 85
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 7f       	andi	r24, 0xFB	; 251
    10a4:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    10a6:	a5 e5       	ldi	r26, 0x55	; 85
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e5       	ldi	r30, 0x55	; 85
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 60       	ori	r24, 0x08	; 8
    10b2:	8c 93       	st	X, r24
    10b4:	2c c0       	rjmp	.+88     	; 0x110e <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    10b6:	a5 e5       	ldi	r26, 0x55	; 85
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e5 e5       	ldi	r30, 0x55	; 85
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	84 60       	ori	r24, 0x04	; 4
    10c2:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    10c4:	a5 e5       	ldi	r26, 0x55	; 85
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e5       	ldi	r30, 0x55	; 85
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	8c 93       	st	X, r24
    10d2:	1d c0       	rjmp	.+58     	; 0x110e <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    10d4:	a5 e5       	ldi	r26, 0x55	; 85
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e5       	ldi	r30, 0x55	; 85
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    10e2:	a5 e5       	ldi	r26, 0x55	; 85
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e5       	ldi	r30, 0x55	; 85
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	87 7f       	andi	r24, 0xF7	; 247
    10ee:	8c 93       	st	X, r24
    10f0:	0e c0       	rjmp	.+28     	; 0x110e <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    10f2:	a5 e5       	ldi	r26, 0x55	; 85
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e5       	ldi	r30, 0x55	; 85
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8b 7f       	andi	r24, 0xFB	; 251
    10fe:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1100:	a5 e5       	ldi	r26, 0x55	; 85
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e5       	ldi	r30, 0x55	; 85
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	87 7f       	andi	r24, 0xF7	; 247
    110c:	8c 93       	st	X, r24
		break;
	}
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <EXTI2_voidSetSignalch>:
void EXTI2_voidSetSignalch(u8 SenseCpy){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <EXTI2_voidSetSignalch+0x6>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3b 83       	std	Y+3, r19	; 0x03
    1130:	2a 83       	std	Y+2, r18	; 0x02
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	91 05       	cpc	r25, r1
    113a:	31 f0       	breq	.+12     	; 0x1148 <EXTI2_voidSetSignalch+0x2e>
    113c:	2a 81       	ldd	r18, Y+2	; 0x02
    113e:	3b 81       	ldd	r19, Y+3	; 0x03
    1140:	23 30       	cpi	r18, 0x03	; 3
    1142:	31 05       	cpc	r19, r1
    1144:	49 f0       	breq	.+18     	; 0x1158 <EXTI2_voidSetSignalch+0x3e>
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <EXTI2_voidSetSignalch+0x4c>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1148:	a4 e5       	ldi	r26, 0x54	; 84
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e4 e5       	ldi	r30, 0x54	; 84
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7b       	andi	r24, 0xBF	; 191
    1154:	8c 93       	st	X, r24
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <EXTI2_voidSetSignalch+0x4c>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1158:	a4 e5       	ldi	r26, 0x54	; 84
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e5       	ldi	r30, 0x54	; 84
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8c 93       	st	X, r24
		break;
	}
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <EXTI0_VID_SET_CALL_BACK>:

//callback function
void EXTI0_VID_SET_CALL_BACK(void (*PTR)(void)){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <EXTI0_VID_SET_CALL_BACK+0x6>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI0_CallBack = PTR;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	90 93 cb 01 	sts	0x01CB, r25
    1188:	80 93 ca 01 	sts	0x01CA, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <EXTI1_VID_SET_CALL_BACK>:
void EXTI1_VID_SET_CALL_BACK(void (*PTR)(void)){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <EXTI1_VID_SET_CALL_BACK+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI1_CallBack = PTR;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	90 93 cd 01 	sts	0x01CD, r25
    11ac:	80 93 cc 01 	sts	0x01CC, r24
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <EXTI2_VID_SET_CALL_BACK>:
void EXTI2_VID_SET_CALL_BACK(void (*PTR)(void)){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <EXTI2_VID_SET_CALL_BACK+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI2_CallBack = PTR;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	90 93 cf 01 	sts	0x01CF, r25
    11d0:	80 93 ce 01 	sts	0x01CE, r24
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <__vector_1>:

void __vector_1 (void){
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI0_CallBack != NULL){
    1208:	80 91 ca 01 	lds	r24, 0x01CA
    120c:	90 91 cb 01 	lds	r25, 0x01CB
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	29 f0       	breq	.+10     	; 0x121e <__vector_1+0x40>
		Global_EXTI0_CallBack();
    1214:	e0 91 ca 01 	lds	r30, 0x01CA
    1218:	f0 91 cb 01 	lds	r31, 0x01CB
    121c:	09 95       	icall
	}
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_2>:
void __vector_2 (void){
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI1_CallBack != NULL){
    126e:	80 91 cc 01 	lds	r24, 0x01CC
    1272:	90 91 cd 01 	lds	r25, 0x01CD
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_2+0x40>
		Global_EXTI1_CallBack();
    127a:	e0 91 cc 01 	lds	r30, 0x01CC
    127e:	f0 91 cd 01 	lds	r31, 0x01CD
    1282:	09 95       	icall
	}
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_3>:
void __vector_3 (void){
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI2_CallBack != NULL){
    12d4:	80 91 ce 01 	lds	r24, 0x01CE
    12d8:	90 91 cf 01 	lds	r25, 0x01CF
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	29 f0       	breq	.+10     	; 0x12ea <__vector_3+0x40>
		Global_EXTI2_CallBack();
    12e0:	e0 91 ce 01 	lds	r30, 0x01CE
    12e4:	f0 91 cf 01 	lds	r31, 0x01CF
    12e8:	09 95       	icall
	}
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	68 ef       	ldi	r22, 0xF8	; 248
    131c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	6b ef       	ldi	r22, 0xFB	; 251
    1324:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	6f e2       	ldi	r22, 0x2F	; 47
    132c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	63 ef       	ldi	r22, 0xF3	; 243
    1334:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	27 97       	sbiw	r28, 0x07	; 7
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
    1356:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	85 30       	cpi	r24, 0x05	; 5
    135c:	08 f0       	brcs	.+2      	; 0x1360 <DIO_voidSetPinDir+0x22>
    135e:	f4 c0       	rjmp	.+488    	; 0x1548 <DIO_voidSetPinDir+0x20a>
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 23       	and	r24, r24
    1364:	09 f4       	brne	.+2      	; 0x1368 <DIO_voidSetPinDir+0x2a>
    1366:	f0 c0       	rjmp	.+480    	; 0x1548 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	08 f0       	brcs	.+2      	; 0x1370 <DIO_voidSetPinDir+0x32>
    136e:	ec c0       	rjmp	.+472    	; 0x1548 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	09 f0       	breq	.+2      	; 0x1378 <DIO_voidSetPinDir+0x3a>
    1376:	70 c0       	rjmp	.+224    	; 0x1458 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3f 83       	std	Y+7, r19	; 0x07
    1380:	2e 83       	std	Y+6, r18	; 0x06
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	51 f1       	breq	.+84     	; 0x13e0 <DIO_voidSetPinDir+0xa2>
    138c:	2e 81       	ldd	r18, Y+6	; 0x06
    138e:	3f 81       	ldd	r19, Y+7	; 0x07
    1390:	23 30       	cpi	r18, 0x03	; 3
    1392:	31 05       	cpc	r19, r1
    1394:	34 f4       	brge	.+12     	; 0x13a2 <DIO_voidSetPinDir+0x64>
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	61 f0       	breq	.+24     	; 0x13b8 <DIO_voidSetPinDir+0x7a>
    13a0:	d3 c0       	rjmp	.+422    	; 0x1548 <DIO_voidSetPinDir+0x20a>
    13a2:	2e 81       	ldd	r18, Y+6	; 0x06
    13a4:	3f 81       	ldd	r19, Y+7	; 0x07
    13a6:	23 30       	cpi	r18, 0x03	; 3
    13a8:	31 05       	cpc	r19, r1
    13aa:	71 f1       	breq	.+92     	; 0x1408 <DIO_voidSetPinDir+0xca>
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	91 05       	cpc	r25, r1
    13b4:	e9 f1       	breq	.+122    	; 0x1430 <DIO_voidSetPinDir+0xf2>
    13b6:	c8 c0       	rjmp	.+400    	; 0x1548 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    13b8:	aa e3       	ldi	r26, 0x3A	; 58
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_voidSetPinDir+0x98>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_voidSetPinDir+0x94>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	b4 c0       	rjmp	.+360    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    13e0:	a7 e3       	ldi	r26, 0x37	; 55
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_voidSetPinDir+0xc0>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_voidSetPinDir+0xbc>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	a0 c0       	rjmp	.+320    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    1408:	a4 e3       	ldi	r26, 0x34	; 52
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_voidSetPinDir+0xe8>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_voidSetPinDir+0xe4>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	8c c0       	rjmp	.+280    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    1430:	a1 e3       	ldi	r26, 0x31	; 49
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e1 e3       	ldi	r30, 0x31	; 49
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_voidSetPinDir+0x110>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_voidSetPinDir+0x10c>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	78 c0       	rjmp	.+240    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 23       	and	r24, r24
    145c:	09 f0       	breq	.+2      	; 0x1460 <DIO_voidSetPinDir+0x122>
    145e:	74 c0       	rjmp	.+232    	; 0x1548 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	91 05       	cpc	r25, r1
    1472:	61 f1       	breq	.+88     	; 0x14cc <DIO_voidSetPinDir+0x18e>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	23 30       	cpi	r18, 0x03	; 3
    147a:	31 05       	cpc	r19, r1
    147c:	34 f4       	brge	.+12     	; 0x148a <DIO_voidSetPinDir+0x14c>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	69 f0       	breq	.+26     	; 0x14a2 <DIO_voidSetPinDir+0x164>
    1488:	5f c0       	rjmp	.+190    	; 0x1548 <DIO_voidSetPinDir+0x20a>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	23 30       	cpi	r18, 0x03	; 3
    1490:	31 05       	cpc	r19, r1
    1492:	89 f1       	breq	.+98     	; 0x14f6 <DIO_voidSetPinDir+0x1b8>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <DIO_voidSetPinDir+0x162>
    149e:	40 c0       	rjmp	.+128    	; 0x1520 <DIO_voidSetPinDir+0x1e2>
    14a0:	53 c0       	rjmp	.+166    	; 0x1548 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_voidSetPinDir+0x182>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_voidSetPinDir+0x17e>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	3e c0       	rjmp	.+124    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_voidSetPinDir+0x1ac>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_voidSetPinDir+0x1a8>
    14ee:	80 95       	com	r24
    14f0:	84 23       	and	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	29 c0       	rjmp	.+82     	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    14f6:	a4 e3       	ldi	r26, 0x34	; 52
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_voidSetPinDir+0x1d6>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_voidSetPinDir+0x1d2>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    1520:	a1 e3       	ldi	r26, 0x31	; 49
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e1 e3       	ldi	r30, 0x31	; 49
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_voidSetPinDir+0x200>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_voidSetPinDir+0x1fc>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1548:	27 96       	adiw	r28, 0x07	; 7
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	27 97       	sbiw	r28, 0x07	; 7
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02
    1572:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	85 30       	cpi	r24, 0x05	; 5
    1578:	08 f0       	brcs	.+2      	; 0x157c <DIO_voidSetPinValue+0x22>
    157a:	f4 c0       	rjmp	.+488    	; 0x1764 <DIO_voidSetPinValue+0x20a>
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	88 23       	and	r24, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <DIO_voidSetPinValue+0x2a>
    1582:	f0 c0       	rjmp	.+480    	; 0x1764 <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	08 f0       	brcs	.+2      	; 0x158c <DIO_voidSetPinValue+0x32>
    158a:	ec c0       	rjmp	.+472    	; 0x1764 <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	09 f0       	breq	.+2      	; 0x1594 <DIO_voidSetPinValue+0x3a>
    1592:	70 c0       	rjmp	.+224    	; 0x1674 <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3f 83       	std	Y+7, r19	; 0x07
    159c:	2e 83       	std	Y+6, r18	; 0x06
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	51 f1       	breq	.+84     	; 0x15fc <DIO_voidSetPinValue+0xa2>
    15a8:	2e 81       	ldd	r18, Y+6	; 0x06
    15aa:	3f 81       	ldd	r19, Y+7	; 0x07
    15ac:	23 30       	cpi	r18, 0x03	; 3
    15ae:	31 05       	cpc	r19, r1
    15b0:	34 f4       	brge	.+12     	; 0x15be <DIO_voidSetPinValue+0x64>
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	9f 81       	ldd	r25, Y+7	; 0x07
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	91 05       	cpc	r25, r1
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <DIO_voidSetPinValue+0x7a>
    15bc:	d3 c0       	rjmp	.+422    	; 0x1764 <DIO_voidSetPinValue+0x20a>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	23 30       	cpi	r18, 0x03	; 3
    15c4:	31 05       	cpc	r19, r1
    15c6:	71 f1       	breq	.+92     	; 0x1624 <DIO_voidSetPinValue+0xca>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	91 05       	cpc	r25, r1
    15d0:	e9 f1       	breq	.+122    	; 0x164c <DIO_voidSetPinValue+0xf2>
    15d2:	c8 c0       	rjmp	.+400    	; 0x1764 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    15d4:	ab e3       	ldi	r26, 0x3B	; 59
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_voidSetPinValue+0x98>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_voidSetPinValue+0x94>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	b4 c0       	rjmp	.+360    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    15fc:	a8 e3       	ldi	r26, 0x38	; 56
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e8 e3       	ldi	r30, 0x38	; 56
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_voidSetPinValue+0xc0>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_voidSetPinValue+0xbc>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	a0 c0       	rjmp	.+320    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_voidSetPinValue+0xe8>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_voidSetPinValue+0xe4>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	8c c0       	rjmp	.+280    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    164c:	a2 e3       	ldi	r26, 0x32	; 50
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_voidSetPinValue+0x110>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_voidSetPinValue+0x10c>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	78 c0       	rjmp	.+240    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 23       	and	r24, r24
    1678:	09 f0       	breq	.+2      	; 0x167c <DIO_voidSetPinValue+0x122>
    167a:	74 c0       	rjmp	.+232    	; 0x1764 <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3d 83       	std	Y+5, r19	; 0x05
    1684:	2c 83       	std	Y+4, r18	; 0x04
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	91 05       	cpc	r25, r1
    168e:	61 f1       	breq	.+88     	; 0x16e8 <DIO_voidSetPinValue+0x18e>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	23 30       	cpi	r18, 0x03	; 3
    1696:	31 05       	cpc	r19, r1
    1698:	34 f4       	brge	.+12     	; 0x16a6 <DIO_voidSetPinValue+0x14c>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	69 f0       	breq	.+26     	; 0x16be <DIO_voidSetPinValue+0x164>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <DIO_voidSetPinValue+0x20a>
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	23 30       	cpi	r18, 0x03	; 3
    16ac:	31 05       	cpc	r19, r1
    16ae:	89 f1       	breq	.+98     	; 0x1712 <DIO_voidSetPinValue+0x1b8>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <DIO_voidSetPinValue+0x162>
    16ba:	40 c0       	rjmp	.+128    	; 0x173c <DIO_voidSetPinValue+0x1e2>
    16bc:	53 c0       	rjmp	.+166    	; 0x1764 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_voidSetPinValue+0x182>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_voidSetPinValue+0x17e>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	3e c0       	rjmp	.+124    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    16e8:	a8 e3       	ldi	r26, 0x38	; 56
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e8 e3       	ldi	r30, 0x38	; 56
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_voidSetPinValue+0x1ac>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_voidSetPinValue+0x1a8>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	29 c0       	rjmp	.+82     	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    1712:	a5 e3       	ldi	r26, 0x35	; 53
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_voidSetPinValue+0x1d6>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_voidSetPinValue+0x1d2>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    173c:	a2 e3       	ldi	r26, 0x32	; 50
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e2 e3       	ldi	r30, 0x32	; 50
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_voidSetPinValue+0x200>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_voidSetPinValue+0x1fc>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1764:	27 96       	adiw	r28, 0x07	; 7
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_u8GetPinValue+0x6>
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8GetPinValue+0x8>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	85 30       	cpi	r24, 0x05	; 5
    178c:	08 f0       	brcs	.+2      	; 0x1790 <DIO_u8GetPinValue+0x1a>
    178e:	74 c0       	rjmp	.+232    	; 0x1878 <DIO_u8GetPinValue+0x102>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	88 23       	and	r24, r24
    1794:	09 f4       	brne	.+2      	; 0x1798 <DIO_u8GetPinValue+0x22>
    1796:	70 c0       	rjmp	.+224    	; 0x1878 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <DIO_u8GetPinValue+0x2a>
    179e:	6c c0       	rjmp	.+216    	; 0x1878 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	4c 81       	ldd	r20, Y+4	; 0x04
    17ac:	5d 81       	ldd	r21, Y+5	; 0x05
    17ae:	42 30       	cpi	r20, 0x02	; 2
    17b0:	51 05       	cpc	r21, r1
    17b2:	49 f1       	breq	.+82     	; 0x1806 <DIO_u8GetPinValue+0x90>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	34 f4       	brge	.+12     	; 0x17ca <DIO_u8GetPinValue+0x54>
    17be:	2c 81       	ldd	r18, Y+4	; 0x04
    17c0:	3d 81       	ldd	r19, Y+5	; 0x05
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	31 05       	cpc	r19, r1
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <DIO_u8GetPinValue+0x6a>
    17c8:	57 c0       	rjmp	.+174    	; 0x1878 <DIO_u8GetPinValue+0x102>
    17ca:	4c 81       	ldd	r20, Y+4	; 0x04
    17cc:	5d 81       	ldd	r21, Y+5	; 0x05
    17ce:	43 30       	cpi	r20, 0x03	; 3
    17d0:	51 05       	cpc	r21, r1
    17d2:	61 f1       	breq	.+88     	; 0x182c <DIO_u8GetPinValue+0xb6>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	91 05       	cpc	r25, r1
    17dc:	d1 f1       	breq	.+116    	; 0x1852 <DIO_u8GetPinValue+0xdc>
    17de:	4c c0       	rjmp	.+152    	; 0x1878 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    17e0:	e9 e3       	ldi	r30, 0x39	; 57
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a9 01       	movw	r20, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_u8GetPinValue+0x82>
    17f4:	55 95       	asr	r21
    17f6:	47 95       	ror	r20
    17f8:	8a 95       	dec	r24
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_u8GetPinValue+0x7e>
    17fc:	ca 01       	movw	r24, r20
    17fe:	58 2f       	mov	r21, r24
    1800:	51 70       	andi	r21, 0x01	; 1
    1802:	5b 83       	std	Y+3, r21	; 0x03
    1804:	3b c0       	rjmp	.+118    	; 0x187c <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    1806:	e6 e3       	ldi	r30, 0x36	; 54
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_u8GetPinValue+0xa8>
    181a:	55 95       	asr	r21
    181c:	47 95       	ror	r20
    181e:	8a 95       	dec	r24
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_u8GetPinValue+0xa4>
    1822:	ca 01       	movw	r24, r20
    1824:	58 2f       	mov	r21, r24
    1826:	51 70       	andi	r21, 0x01	; 1
    1828:	5b 83       	std	Y+3, r21	; 0x03
    182a:	28 c0       	rjmp	.+80     	; 0x187c <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    182c:	e3 e3       	ldi	r30, 0x33	; 51
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_u8GetPinValue+0xce>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_u8GetPinValue+0xca>
    1848:	ca 01       	movw	r24, r20
    184a:	58 2f       	mov	r21, r24
    184c:	51 70       	andi	r21, 0x01	; 1
    184e:	5b 83       	std	Y+3, r21	; 0x03
    1850:	15 c0       	rjmp	.+42     	; 0x187c <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    1852:	e0 e3       	ldi	r30, 0x30	; 48
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_u8GetPinValue+0xf4>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_u8GetPinValue+0xf0>
    186e:	ca 01       	movw	r24, r20
    1870:	58 2f       	mov	r21, r24
    1872:	51 70       	andi	r21, 0x01	; 1
    1874:	5b 83       	std	Y+3, r21	; 0x03
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DIO_voidTogglePin+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_voidTogglePin+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	85 30       	cpi	r24, 0x05	; 5
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <DIO_voidTogglePin+0x18>
    18a4:	77 c0       	rjmp	.+238    	; 0x1994 <DIO_voidTogglePin+0x106>
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	88 23       	and	r24, r24
    18aa:	09 f4       	brne	.+2      	; 0x18ae <DIO_voidTogglePin+0x20>
    18ac:	73 c0       	rjmp	.+230    	; 0x1994 <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	88 30       	cpi	r24, 0x08	; 8
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <DIO_voidTogglePin+0x28>
    18b4:	6f c0       	rjmp	.+222    	; 0x1994 <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3c 83       	std	Y+4, r19	; 0x04
    18be:	2b 83       	std	Y+3, r18	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	51 f1       	breq	.+84     	; 0x191e <DIO_voidTogglePin+0x90>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	23 30       	cpi	r18, 0x03	; 3
    18d0:	31 05       	cpc	r19, r1
    18d2:	34 f4       	brge	.+12     	; 0x18e0 <DIO_voidTogglePin+0x52>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	91 05       	cpc	r25, r1
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <DIO_voidTogglePin+0x68>
    18de:	5a c0       	rjmp	.+180    	; 0x1994 <DIO_voidTogglePin+0x106>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	23 30       	cpi	r18, 0x03	; 3
    18e6:	31 05       	cpc	r19, r1
    18e8:	71 f1       	breq	.+92     	; 0x1946 <DIO_voidTogglePin+0xb8>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	91 05       	cpc	r25, r1
    18f2:	e9 f1       	breq	.+122    	; 0x196e <DIO_voidTogglePin+0xe0>
    18f4:	4f c0       	rjmp	.+158    	; 0x1994 <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    18f6:	ab e3       	ldi	r26, 0x3B	; 59
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_voidTogglePin+0x86>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_voidTogglePin+0x82>
    1918:	84 27       	eor	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	3b c0       	rjmp	.+118    	; 0x1994 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    191e:	a8 e3       	ldi	r26, 0x38	; 56
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e8 e3       	ldi	r30, 0x38	; 56
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_voidTogglePin+0xae>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_voidTogglePin+0xaa>
    1940:	84 27       	eor	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	27 c0       	rjmp	.+78     	; 0x1994 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    1946:	a5 e3       	ldi	r26, 0x35	; 53
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_voidTogglePin+0xd6>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <DIO_voidTogglePin+0xd2>
    1968:	84 27       	eor	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	13 c0       	rjmp	.+38     	; 0x1994 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    196e:	a2 e3       	ldi	r26, 0x32	; 50
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_voidTogglePin+0xfe>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_voidTogglePin+0xfa>
    1990:	84 27       	eor	r24, r20
    1992:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_voidSetPortDir+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_voidSetPortDir+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	85 30       	cpi	r24, 0x05	; 5
    19b6:	b0 f5       	brcc	.+108    	; 0x1a24 <DIO_voidSetPortDir+0x82>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 23       	and	r24, r24
    19bc:	99 f1       	breq	.+102    	; 0x1a24 <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3c 83       	std	Y+4, r19	; 0x04
    19c6:	2b 83       	std	Y+3, r18	; 0x03
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	91 05       	cpc	r25, r1
    19d0:	d9 f0       	breq	.+54     	; 0x1a08 <DIO_voidSetPortDir+0x66>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	23 30       	cpi	r18, 0x03	; 3
    19d8:	31 05       	cpc	r19, r1
    19da:	34 f4       	brge	.+12     	; 0x19e8 <DIO_voidSetPortDir+0x46>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	61 f0       	breq	.+24     	; 0x19fe <DIO_voidSetPortDir+0x5c>
    19e6:	1e c0       	rjmp	.+60     	; 0x1a24 <DIO_voidSetPortDir+0x82>
    19e8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ea:	3c 81       	ldd	r19, Y+4	; 0x04
    19ec:	23 30       	cpi	r18, 0x03	; 3
    19ee:	31 05       	cpc	r19, r1
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <DIO_voidSetPortDir+0x70>
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	84 30       	cpi	r24, 0x04	; 4
    19f8:	91 05       	cpc	r25, r1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <DIO_voidSetPortDir+0x7a>
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    19fe:	ea e3       	ldi	r30, 0x3A	; 58
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 83       	st	Z, r24
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    1a08:	e7 e3       	ldi	r30, 0x37	; 55
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    1a12:	e4 e3       	ldi	r30, 0x34	; 52
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	80 83       	st	Z, r24
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    1a1c:	e1 e3       	ldi	r30, 0x31	; 49
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <DIO_voidSetPortValue+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <DIO_voidSetPortValue+0x8>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	85 30       	cpi	r24, 0x05	; 5
    1a46:	b0 f5       	brcc	.+108    	; 0x1ab4 <DIO_voidSetPortValue+0x82>
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	88 23       	and	r24, r24
    1a4c:	99 f1       	breq	.+102    	; 0x1ab4 <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3c 83       	std	Y+4, r19	; 0x04
    1a56:	2b 83       	std	Y+3, r18	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	91 05       	cpc	r25, r1
    1a60:	d9 f0       	breq	.+54     	; 0x1a98 <DIO_voidSetPortValue+0x66>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	23 30       	cpi	r18, 0x03	; 3
    1a68:	31 05       	cpc	r19, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <DIO_voidSetPortValue+0x46>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 05       	cpc	r25, r1
    1a74:	61 f0       	breq	.+24     	; 0x1a8e <DIO_voidSetPortValue+0x5c>
    1a76:	1e c0       	rjmp	.+60     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7c:	23 30       	cpi	r18, 0x03	; 3
    1a7e:	31 05       	cpc	r19, r1
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <DIO_voidSetPortValue+0x70>
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	91 05       	cpc	r25, r1
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <DIO_voidSetPortValue+0x7a>
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    1a8e:	eb e3       	ldi	r30, 0x3B	; 59
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	80 83       	st	Z, r24
    1a96:	0e c0       	rjmp	.+28     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 83       	st	Z, r24
    1aa0:	09 c0       	rjmp	.+18     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    1aa2:	e5 e3       	ldi	r30, 0x35	; 53
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 83       	st	Z, r24
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DIO_u8GetPortValue+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_u8GetPortValue+0x8>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	85 30       	cpi	r24, 0x05	; 5
    1ad4:	b8 f5       	brcc	.+110    	; 0x1b44 <DIO_u8GetPortValue+0x82>
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	88 23       	and	r24, r24
    1ada:	a1 f1       	breq	.+104    	; 0x1b44 <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	91 05       	cpc	r25, r1
    1aee:	d9 f0       	breq	.+54     	; 0x1b26 <DIO_u8GetPortValue+0x64>
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	23 30       	cpi	r18, 0x03	; 3
    1af6:	31 05       	cpc	r19, r1
    1af8:	34 f4       	brge	.+12     	; 0x1b06 <DIO_u8GetPortValue+0x44>
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	91 05       	cpc	r25, r1
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <DIO_u8GetPortValue+0x5a>
    1b04:	1f c0       	rjmp	.+62     	; 0x1b44 <DIO_u8GetPortValue+0x82>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	23 30       	cpi	r18, 0x03	; 3
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <DIO_u8GetPortValue+0x6e>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <DIO_u8GetPortValue+0x78>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	90 81       	ld	r25, Z
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	20 81       	ld	r18, Z
    1b2c:	2a 83       	std	Y+2, r18	; 0x02
    1b2e:	0c c0       	rjmp	.+24     	; 0x1b48 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    1b30:	e5 e3       	ldi	r30, 0x35	; 53
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	30 81       	ld	r19, Z
    1b36:	3a 83       	std	Y+2, r19	; 0x02
    1b38:	07 c0       	rjmp	.+14     	; 0x1b48 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1b3a:	e2 e3       	ldi	r30, 0x32	; 50
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <DIO_voidTogglePort+0x6>
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <DIO_voidTogglePort+0x16>
    1b6c:	43 c0       	rjmp	.+134    	; 0x1bf4 <DIO_voidTogglePort+0x9c>
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <DIO_voidTogglePort+0x1e>
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3b 83       	std	Y+3, r19	; 0x03
    1b7e:	2a 83       	std	Y+2, r18	; 0x02
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	91 05       	cpc	r25, r1
    1b88:	f1 f0       	breq	.+60     	; 0x1bc6 <DIO_voidTogglePort+0x6e>
    1b8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b8e:	23 30       	cpi	r18, 0x03	; 3
    1b90:	31 05       	cpc	r19, r1
    1b92:	34 f4       	brge	.+12     	; 0x1ba0 <DIO_voidTogglePort+0x48>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <DIO_voidTogglePort+0x5e>
    1b9e:	2a c0       	rjmp	.+84     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
    1ba0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba4:	23 30       	cpi	r18, 0x03	; 3
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	b1 f0       	breq	.+44     	; 0x1bd6 <DIO_voidTogglePort+0x7e>
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	c9 f0       	breq	.+50     	; 0x1be6 <DIO_voidTogglePort+0x8e>
    1bb4:	1f c0       	rjmp	.+62     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    1bb6:	ab e3       	ldi	r26, 0x3B	; 59
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	eb e3       	ldi	r30, 0x3B	; 59
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 95       	com	r24
    1bc2:	8c 93       	st	X, r24
    1bc4:	17 c0       	rjmp	.+46     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    1bc6:	a8 e3       	ldi	r26, 0x38	; 56
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 95       	com	r24
    1bd2:	8c 93       	st	X, r24
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    1bd6:	a5 e3       	ldi	r26, 0x35	; 53
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e3       	ldi	r30, 0x35	; 53
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 95       	com	r24
    1be2:	8c 93       	st	X, r24
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    1be6:	a2 e3       	ldi	r26, 0x32	; 50
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 95       	com	r24
    1bf2:	8c 93       	st	X, r24
				break;
			}
		}
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(f32 ref){
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <ADC_voidInit+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <ADC_voidInit+0x8>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	69 83       	std	Y+1, r22	; 0x01
    1c0e:	7a 83       	std	Y+2, r23	; 0x02
    1c10:	8b 83       	std	Y+3, r24	; 0x03
    1c12:	9c 83       	std	Y+4, r25	; 0x04
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    1c14:	a7 e2       	ldi	r26, 0x27	; 39
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e7 e2       	ldi	r30, 0x27	; 39
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 64       	ori	r24, 0x40	; 64
    1c20:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1c22:	a7 e2       	ldi	r26, 0x27	; 39
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e7 e2       	ldi	r30, 0x27	; 39
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 77       	andi	r24, 0x7F	; 127
    1c2e:	8c 93       	st	X, r24
	Vref = 5;
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 ea       	ldi	r26, 0xA0	; 160
    1c36:	b0 e4       	ldi	r27, 0x40	; 64
    1c38:	80 93 79 01 	sts	0x0179, r24
    1c3c:	90 93 7a 01 	sts	0x017A, r25
    1c40:	a0 93 7b 01 	sts	0x017B, r26
    1c44:	b0 93 7c 01 	sts	0x017C, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    1c48:	a7 e2       	ldi	r26, 0x27	; 39
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e7 e2       	ldi	r30, 0x27	; 39
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 7d       	andi	r24, 0xDF	; 223
    1c54:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1c56:	a6 e2       	ldi	r26, 0x26	; 38
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e6 e2       	ldi	r30, 0x26	; 38
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	81 60       	ori	r24, 0x01	; 1
    1c62:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    1c64:	a6 e2       	ldi	r26, 0x26	; 38
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e2       	ldi	r30, 0x26	; 38
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 60       	ori	r24, 0x02	; 2
    1c70:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    1c72:	a6 e2       	ldi	r26, 0x26	; 38
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e6 e2       	ldi	r30, 0x26	; 38
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	84 60       	ori	r24, 0x04	; 4
    1c7e:	8c 93       	st	X, r24
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
#endif
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <ADC_voidEnable>:

void ADC_voidEnable(){
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1c96:	a6 e2       	ldi	r26, 0x26	; 38
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e6 e2       	ldi	r30, 0x26	; 38
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 68       	ori	r24, 0x80	; 128
    1ca2:	8c 93       	st	X, r24
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    1cb2:	a6 e2       	ldi	r26, 0x26	; 38
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e6 e2       	ldi	r30, 0x26	; 38
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 60       	ori	r24, 0x08	; 8
    1cbe:	8c 93       	st	X, r24
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1cce:	a6 e2       	ldi	r26, 0x26	; 38
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e6 e2       	ldi	r30, 0x26	; 38
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	87 7f       	andi	r24, 0xF7	; 247
    1cda:	8c 93       	st	X, r24
}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <ADC_voidDisable>:

void ADC_voidDisable(){
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    1cea:	a6 e2       	ldi	r26, 0x26	; 38
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e6 e2       	ldi	r30, 0x26	; 38
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 77       	andi	r24, 0x7F	; 127
    1cf6:	8c 93       	st	X, r24
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <ADC_u16ReadADC+0x6>
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1d08:	1a 82       	std	Y+2, r1	; 0x02
    1d0a:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    1d0c:	e4 e2       	ldi	r30, 0x24	; 36
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	cc 01       	movw	r24, r24
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	20 91 79 01 	lds	r18, 0x0179
    1d2a:	30 91 7a 01 	lds	r19, 0x017A
    1d2e:	40 91 7b 01 	lds	r20, 0x017B
    1d32:	50 91 7c 01 	lds	r21, 0x017C
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	54 e4       	ldi	r21, 0x44	; 68
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	0f 92       	push	r0
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1d80:	a7 e2       	ldi	r26, 0x27	; 39
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e7 e2       	ldi	r30, 0x27	; 39
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 7e       	andi	r24, 0xE0	; 224
    1d8c:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    1d8e:	a7 e2       	ldi	r26, 0x27	; 39
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e2       	ldi	r30, 0x27	; 39
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	90 81       	ld	r25, Z
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	89 2b       	or	r24, r25
    1d9c:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1d9e:	a6 e2       	ldi	r26, 0x26	; 38
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e6 e2       	ldi	r30, 0x26	; 38
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 64       	ori	r24, 0x40	; 64
    1daa:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    1dac:	e6 e2       	ldi	r30, 0x26	; 38
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 95       	swap	r24
    1db4:	8f 70       	andi	r24, 0x0F	; 15
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	a9 f3       	breq	.-22     	; 0x1dac <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1dc2:	a6 e2       	ldi	r26, 0x26	; 38
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e6 e2       	ldi	r30, 0x26	; 38
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 61       	ori	r24, 0x10	; 16
    1dce:	8c 93       	st	X, r24
}
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1de4:	a7 e2       	ldi	r26, 0x27	; 39
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e7 e2       	ldi	r30, 0x27	; 39
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 7e       	andi	r24, 0xE0	; 224
    1df0:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    1df2:	a7 e2       	ldi	r26, 0x27	; 39
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e7 e2       	ldi	r30, 0x27	; 39
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	90 81       	ld	r25, Z
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	89 2b       	or	r24, r25
    1e00:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1e02:	a6 e2       	ldi	r26, 0x26	; 38
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e6 e2       	ldi	r30, 0x26	; 38
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 64       	ori	r24, 0x40	; 64
    1e0e:	8c 93       	st	X, r24
}
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	0f 92       	push	r0
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1e24:	a7 e2       	ldi	r26, 0x27	; 39
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e7 e2       	ldi	r30, 0x27	; 39
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 7e       	andi	r24, 0xE0	; 224
    1e30:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    1e32:	a7 e2       	ldi	r26, 0x27	; 39
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	90 81       	ld	r25, Z
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	89 2b       	or	r24, r25
    1e40:	8c 93       	st	X, r24
}
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <ADC_u16ReadADCInMV+0x6>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1e54:	1a 82       	std	Y+2, r1	; 0x02
    1e56:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    1e58:	e4 e2       	ldi	r30, 0x24	; 36
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	cc 01       	movw	r24, r24
    1e62:	a0 e0       	ldi	r26, 0x00	; 0
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	28 ee       	ldi	r18, 0xE8	; 232
    1e68:	33 e0       	ldi	r19, 0x03	; 3
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 02 29 	call	0x5204	; 0x5204 <__mulsi3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	20 91 79 01 	lds	r18, 0x0179
    1e8a:	30 91 7a 01 	lds	r19, 0x017A
    1e8e:	40 91 7b 01 	lds	r20, 0x017B
    1e92:	50 91 7c 01 	lds	r21, 0x017C
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <ADC_voidSetCallback+0x6>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	90 93 d1 01 	sts	0x01D1, r25
    1eea:	80 93 d0 01 	sts	0x01D0, r24
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <__vector_16>:

void __vector_16 (void){
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	2f 93       	push	r18
    1f04:	3f 93       	push	r19
    1f06:	4f 93       	push	r20
    1f08:	5f 93       	push	r21
    1f0a:	6f 93       	push	r22
    1f0c:	7f 93       	push	r23
    1f0e:	8f 93       	push	r24
    1f10:	9f 93       	push	r25
    1f12:	af 93       	push	r26
    1f14:	bf 93       	push	r27
    1f16:	ef 93       	push	r30
    1f18:	ff 93       	push	r31
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    1f22:	80 91 d0 01 	lds	r24, 0x01D0
    1f26:	90 91 d1 01 	lds	r25, 0x01D1
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	29 f0       	breq	.+10     	; 0x1f38 <__vector_16+0x40>
		Global_ADC_CallBack();
    1f2e:	e0 91 d0 01 	lds	r30, 0x01D0
    1f32:	f0 91 d1 01 	lds	r31, 0x01D1
    1f36:	09 95       	icall
	}
}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	ff 91       	pop	r31
    1f3e:	ef 91       	pop	r30
    1f40:	bf 91       	pop	r27
    1f42:	af 91       	pop	r26
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	7f 91       	pop	r23
    1f4a:	6f 91       	pop	r22
    1f4c:	5f 91       	pop	r21
    1f4e:	4f 91       	pop	r20
    1f50:	3f 91       	pop	r19
    1f52:	2f 91       	pop	r18
    1f54:	0f 90       	pop	r0
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	0f 90       	pop	r0
    1f5a:	1f 90       	pop	r1
    1f5c:	18 95       	reti

00001f5e <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	6f e7       	ldi	r22, 0x7F	; 127
    1f6a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
}
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	6f e7       	ldi	r22, 0x7F	; 127
    1f80:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    1f84:	84 e0       	ldi	r24, 0x04	; 4
    1f86:	6f e7       	ldi	r22, 0x7F	; 127
    1f88:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	60 97       	sbiw	r28, 0x10	; 16
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1fa8:	ce 01       	movw	r24, r28
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	9d 87       	std	Y+13, r25	; 0x0d
    1fae:	8c 87       	std	Y+12, r24	; 0x0c
    1fb0:	e7 e8       	ldi	r30, 0x87	; 135
    1fb2:	f1 e0       	ldi	r31, 0x01	; 1
    1fb4:	ff 87       	std	Y+15, r31	; 0x0f
    1fb6:	ee 87       	std	Y+14, r30	; 0x0e
    1fb8:	fa e0       	ldi	r31, 0x0A	; 10
    1fba:	f8 8b       	std	Y+16, r31	; 0x10
    1fbc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fbe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fc0:	00 80       	ld	r0, Z
    1fc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	9f 87       	std	Y+15, r25	; 0x0f
    1fca:	8e 87       	std	Y+14, r24	; 0x0e
    1fcc:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fce:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fd0:	00 82       	st	Z, r0
    1fd2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fd4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	9d 87       	std	Y+13, r25	; 0x0d
    1fda:	8c 87       	std	Y+12, r24	; 0x0c
    1fdc:	98 89       	ldd	r25, Y+16	; 0x10
    1fde:	91 50       	subi	r25, 0x01	; 1
    1fe0:	98 8b       	std	Y+16, r25	; 0x10
    1fe2:	e8 89       	ldd	r30, Y+16	; 0x10
    1fe4:	ee 23       	and	r30, r30
    1fe6:	51 f7       	brne	.-44     	; 0x1fbc <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    1fe8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fea:	8a 30       	cpi	r24, 0x0A	; 10
    1fec:	70 f4       	brcc	.+28     	; 0x200a <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    1fee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	80 81       	ld	r24, Z
    2000:	98 2f       	mov	r25, r24
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	69 2f       	mov	r22, r25
    2006:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
	}
}
    200a:	60 96       	adiw	r28, 0x10	; 16
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	a1 97       	sbiw	r28, 0x21	; 33
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    2030:	ce 01       	movw	r24, r28
    2032:	43 96       	adiw	r24, 0x13	; 19
    2034:	9e 8f       	std	Y+30, r25	; 0x1e
    2036:	8d 8f       	std	Y+29, r24	; 0x1d
    2038:	e1 e9       	ldi	r30, 0x91	; 145
    203a:	f1 e0       	ldi	r31, 0x01	; 1
    203c:	f8 a3       	std	Y+32, r31	; 0x20
    203e:	ef 8f       	std	Y+31, r30	; 0x1f
    2040:	fa e0       	ldi	r31, 0x0A	; 10
    2042:	f9 a3       	std	Y+33, r31	; 0x21
    2044:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2046:	f8 a1       	ldd	r31, Y+32	; 0x20
    2048:	00 80       	ld	r0, Z
    204a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204c:	98 a1       	ldd	r25, Y+32	; 0x20
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	98 a3       	std	Y+32, r25	; 0x20
    2052:	8f 8f       	std	Y+31, r24	; 0x1f
    2054:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2056:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2058:	00 82       	st	Z, r0
    205a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    205c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	9e 8f       	std	Y+30, r25	; 0x1e
    2062:	8d 8f       	std	Y+29, r24	; 0x1d
    2064:	99 a1       	ldd	r25, Y+33	; 0x21
    2066:	91 50       	subi	r25, 0x01	; 1
    2068:	99 a3       	std	Y+33, r25	; 0x21
    206a:	e9 a1       	ldd	r30, Y+33	; 0x21
    206c:	ee 23       	and	r30, r30
    206e:	51 f7       	brne	.-44     	; 0x2044 <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2070:	1f 86       	std	Y+15, r1	; 0x0f
    2072:	18 8a       	std	Y+16, r1	; 0x10
    2074:	19 8a       	std	Y+17, r1	; 0x11
    2076:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2078:	1f 86       	std	Y+15, r1	; 0x0f
    207a:	18 8a       	std	Y+16, r1	; 0x10
    207c:	19 8a       	std	Y+17, r1	; 0x11
    207e:	1a 8a       	std	Y+18, r1	; 0x12
    2080:	8d c0       	rjmp	.+282    	; 0x219c <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    2082:	8f 85       	ldd	r24, Y+15	; 0x0f
    2084:	98 89       	ldd	r25, Y+16	; 0x10
    2086:	a9 89       	ldd	r26, Y+17	; 0x11
    2088:	ba 89       	ldd	r27, Y+18	; 0x12
    208a:	9e 01       	movw	r18, r28
    208c:	2d 5e       	subi	r18, 0xED	; 237
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	f9 01       	movw	r30, r18
    2092:	e8 0f       	add	r30, r24
    2094:	f9 1f       	adc	r31, r25
    2096:	80 81       	ld	r24, Z
    2098:	98 2f       	mov	r25, r24
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	69 2f       	mov	r22, r25
    209e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e2       	ldi	r26, 0x20	; 32
    20a8:	b1 e4       	ldi	r27, 0x41	; 65
    20aa:	8b 87       	std	Y+11, r24	; 0x0b
    20ac:	9c 87       	std	Y+12, r25	; 0x0c
    20ae:	ad 87       	std	Y+13, r26	; 0x0d
    20b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a e7       	ldi	r20, 0x7A	; 122
    20c0:	55 e4       	ldi	r21, 0x45	; 69
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8f 83       	std	Y+7, r24	; 0x07
    20cc:	98 87       	std	Y+8, r25	; 0x08
    20ce:	a9 87       	std	Y+9, r26	; 0x09
    20d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <SevSeg_voidSingleAutoCounter+0x138>
    2136:	80 e9       	ldi	r24, 0x90	; 144
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <SevSeg_voidSingleAutoCounter+0x126>
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <SevSeg_voidSingleAutoCounter+0x11a>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <SevSeg_voidSingleAutoCounter+0x162>
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	98 89       	ldd	r25, Y+16	; 0x10
    218a:	a9 89       	ldd	r26, Y+17	; 0x11
    218c:	ba 89       	ldd	r27, Y+18	; 0x12
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	a1 1d       	adc	r26, r1
    2192:	b1 1d       	adc	r27, r1
    2194:	8f 87       	std	Y+15, r24	; 0x0f
    2196:	98 8b       	std	Y+16, r25	; 0x10
    2198:	a9 8b       	std	Y+17, r26	; 0x11
    219a:	ba 8b       	std	Y+18, r27	; 0x12
    219c:	8f 85       	ldd	r24, Y+15	; 0x0f
    219e:	98 89       	ldd	r25, Y+16	; 0x10
    21a0:	a9 89       	ldd	r26, Y+17	; 0x11
    21a2:	ba 89       	ldd	r27, Y+18	; 0x12
    21a4:	8a 30       	cpi	r24, 0x0A	; 10
    21a6:	91 05       	cpc	r25, r1
    21a8:	a1 05       	cpc	r26, r1
    21aa:	b1 05       	cpc	r27, r1
    21ac:	0c f4       	brge	.+2      	; 0x21b0 <SevSeg_voidSingleAutoCounter+0x194>
    21ae:	69 cf       	rjmp	.-302    	; 0x2082 <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    21b0:	a1 96       	adiw	r28, 0x21	; 33
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	a5 97       	sbiw	r28, 0x25	; 37
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    21d6:	ce 01       	movw	r24, r28
    21d8:	47 96       	adiw	r24, 0x17	; 23
    21da:	9a a3       	std	Y+34, r25	; 0x22
    21dc:	89 a3       	std	Y+33, r24	; 0x21
    21de:	eb e9       	ldi	r30, 0x9B	; 155
    21e0:	f1 e0       	ldi	r31, 0x01	; 1
    21e2:	fc a3       	std	Y+36, r31	; 0x24
    21e4:	eb a3       	std	Y+35, r30	; 0x23
    21e6:	fa e0       	ldi	r31, 0x0A	; 10
    21e8:	fd a3       	std	Y+37, r31	; 0x25
    21ea:	eb a1       	ldd	r30, Y+35	; 0x23
    21ec:	fc a1       	ldd	r31, Y+36	; 0x24
    21ee:	00 80       	ld	r0, Z
    21f0:	8b a1       	ldd	r24, Y+35	; 0x23
    21f2:	9c a1       	ldd	r25, Y+36	; 0x24
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	9c a3       	std	Y+36, r25	; 0x24
    21f8:	8b a3       	std	Y+35, r24	; 0x23
    21fa:	e9 a1       	ldd	r30, Y+33	; 0x21
    21fc:	fa a1       	ldd	r31, Y+34	; 0x22
    21fe:	00 82       	st	Z, r0
    2200:	89 a1       	ldd	r24, Y+33	; 0x21
    2202:	9a a1       	ldd	r25, Y+34	; 0x22
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	9a a3       	std	Y+34, r25	; 0x22
    2208:	89 a3       	std	Y+33, r24	; 0x21
    220a:	9d a1       	ldd	r25, Y+37	; 0x25
    220c:	91 50       	subi	r25, 0x01	; 1
    220e:	9d a3       	std	Y+37, r25	; 0x25
    2210:	ed a1       	ldd	r30, Y+37	; 0x25
    2212:	ee 23       	and	r30, r30
    2214:	51 f7       	brne	.-44     	; 0x21ea <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2216:	1b 8a       	std	Y+19, r1	; 0x13
    2218:	1c 8a       	std	Y+20, r1	; 0x14
    221a:	1d 8a       	std	Y+21, r1	; 0x15
    221c:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    221e:	1f 86       	std	Y+15, r1	; 0x0f
    2220:	18 8a       	std	Y+16, r1	; 0x10
    2222:	19 8a       	std	Y+17, r1	; 0x11
    2224:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    2226:	1b 8a       	std	Y+19, r1	; 0x13
    2228:	1c 8a       	std	Y+20, r1	; 0x14
    222a:	1d 8a       	std	Y+21, r1	; 0x15
    222c:	1e 8a       	std	Y+22, r1	; 0x16
    222e:	b7 c0       	rjmp	.+366    	; 0x239e <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    2230:	8b 89       	ldd	r24, Y+19	; 0x13
    2232:	9c 89       	ldd	r25, Y+20	; 0x14
    2234:	ad 89       	ldd	r26, Y+21	; 0x15
    2236:	be 89       	ldd	r27, Y+22	; 0x16
    2238:	9e 01       	movw	r18, r28
    223a:	29 5e       	subi	r18, 0xE9	; 233
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	f9 01       	movw	r30, r18
    2240:	e8 0f       	add	r30, r24
    2242:	f9 1f       	adc	r31, r25
    2244:	80 81       	ld	r24, Z
    2246:	98 2f       	mov	r25, r24
    2248:	84 e0       	ldi	r24, 0x04	; 4
    224a:	69 2f       	mov	r22, r25
    224c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    2250:	1f 86       	std	Y+15, r1	; 0x0f
    2252:	18 8a       	std	Y+16, r1	; 0x10
    2254:	19 8a       	std	Y+17, r1	; 0x11
    2256:	1a 8a       	std	Y+18, r1	; 0x12
    2258:	8d c0       	rjmp	.+282    	; 0x2374 <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	98 89       	ldd	r25, Y+16	; 0x10
    225e:	a9 89       	ldd	r26, Y+17	; 0x11
    2260:	ba 89       	ldd	r27, Y+18	; 0x12
    2262:	9e 01       	movw	r18, r28
    2264:	29 5e       	subi	r18, 0xE9	; 233
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	f9 01       	movw	r30, r18
    226a:	e8 0f       	add	r30, r24
    226c:	f9 1f       	adc	r31, r25
    226e:	80 81       	ld	r24, Z
    2270:	98 2f       	mov	r25, r24
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	69 2f       	mov	r22, r25
    2276:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e2       	ldi	r26, 0x20	; 32
    2280:	b1 e4       	ldi	r27, 0x41	; 65
    2282:	8b 87       	std	Y+11, r24	; 0x0b
    2284:	9c 87       	std	Y+12, r25	; 0x0c
    2286:	ad 87       	std	Y+13, r26	; 0x0d
    2288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a e7       	ldi	r20, 0x7A	; 122
    2298:	55 e4       	ldi	r21, 0x45	; 69
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8f 83       	std	Y+7, r24	; 0x07
    22a4:	98 87       	std	Y+8, r25	; 0x08
    22a6:	a9 87       	std	Y+9, r26	; 0x09
    22a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	0f c0       	rjmp	.+30     	; 0x232c <SevSeg_voidDoubleAutoCounter+0x16a>
    230e:	80 e9       	ldi	r24, 0x90	; 144
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <SevSeg_voidDoubleAutoCounter+0x158>
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <SevSeg_voidDoubleAutoCounter+0x14c>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <SevSeg_voidDoubleAutoCounter+0x194>
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    235e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2360:	98 89       	ldd	r25, Y+16	; 0x10
    2362:	a9 89       	ldd	r26, Y+17	; 0x11
    2364:	ba 89       	ldd	r27, Y+18	; 0x12
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	a1 1d       	adc	r26, r1
    236a:	b1 1d       	adc	r27, r1
    236c:	8f 87       	std	Y+15, r24	; 0x0f
    236e:	98 8b       	std	Y+16, r25	; 0x10
    2370:	a9 8b       	std	Y+17, r26	; 0x11
    2372:	ba 8b       	std	Y+18, r27	; 0x12
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	98 89       	ldd	r25, Y+16	; 0x10
    2378:	a9 89       	ldd	r26, Y+17	; 0x11
    237a:	ba 89       	ldd	r27, Y+18	; 0x12
    237c:	8a 30       	cpi	r24, 0x0A	; 10
    237e:	91 05       	cpc	r25, r1
    2380:	a1 05       	cpc	r26, r1
    2382:	b1 05       	cpc	r27, r1
    2384:	0c f4       	brge	.+2      	; 0x2388 <SevSeg_voidDoubleAutoCounter+0x1c6>
    2386:	69 cf       	rjmp	.-302    	; 0x225a <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    2388:	8b 89       	ldd	r24, Y+19	; 0x13
    238a:	9c 89       	ldd	r25, Y+20	; 0x14
    238c:	ad 89       	ldd	r26, Y+21	; 0x15
    238e:	be 89       	ldd	r27, Y+22	; 0x16
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	a1 1d       	adc	r26, r1
    2394:	b1 1d       	adc	r27, r1
    2396:	8b 8b       	std	Y+19, r24	; 0x13
    2398:	9c 8b       	std	Y+20, r25	; 0x14
    239a:	ad 8b       	std	Y+21, r26	; 0x15
    239c:	be 8b       	std	Y+22, r27	; 0x16
    239e:	8b 89       	ldd	r24, Y+19	; 0x13
    23a0:	9c 89       	ldd	r25, Y+20	; 0x14
    23a2:	ad 89       	ldd	r26, Y+21	; 0x15
    23a4:	be 89       	ldd	r27, Y+22	; 0x16
    23a6:	8a 30       	cpi	r24, 0x0A	; 10
    23a8:	91 05       	cpc	r25, r1
    23aa:	a1 05       	cpc	r26, r1
    23ac:	b1 05       	cpc	r27, r1
    23ae:	0c f4       	brge	.+2      	; 0x23b2 <SevSeg_voidDoubleAutoCounter+0x1f0>
    23b0:	3f cf       	rjmp	.-386    	; 0x2230 <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    23b2:	a5 96       	adiw	r28, 0x25	; 37
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	e1 97       	sbiw	r28, 0x31	; 49
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	8b a7       	std	Y+43, r24	; 0x2b
    23da:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    23dc:	ce 01       	movw	r24, r28
    23de:	81 96       	adiw	r24, 0x21	; 33
    23e0:	9e a7       	std	Y+46, r25	; 0x2e
    23e2:	8d a7       	std	Y+45, r24	; 0x2d
    23e4:	e5 ea       	ldi	r30, 0xA5	; 165
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	f8 ab       	std	Y+48, r31	; 0x30
    23ea:	ef a7       	std	Y+47, r30	; 0x2f
    23ec:	fa e0       	ldi	r31, 0x0A	; 10
    23ee:	f9 ab       	std	Y+49, r31	; 0x31
    23f0:	ef a5       	ldd	r30, Y+47	; 0x2f
    23f2:	f8 a9       	ldd	r31, Y+48	; 0x30
    23f4:	00 80       	ld	r0, Z
    23f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f8:	98 a9       	ldd	r25, Y+48	; 0x30
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	98 ab       	std	Y+48, r25	; 0x30
    23fe:	8f a7       	std	Y+47, r24	; 0x2f
    2400:	ed a5       	ldd	r30, Y+45	; 0x2d
    2402:	fe a5       	ldd	r31, Y+46	; 0x2e
    2404:	00 82       	st	Z, r0
    2406:	8d a5       	ldd	r24, Y+45	; 0x2d
    2408:	9e a5       	ldd	r25, Y+46	; 0x2e
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	9e a7       	std	Y+46, r25	; 0x2e
    240e:	8d a7       	std	Y+45, r24	; 0x2d
    2410:	99 a9       	ldd	r25, Y+49	; 0x31
    2412:	91 50       	subi	r25, 0x01	; 1
    2414:	99 ab       	std	Y+49, r25	; 0x31
    2416:	e9 a9       	ldd	r30, Y+49	; 0x31
    2418:	ee 23       	and	r30, r30
    241a:	51 f7       	brne	.-44     	; 0x23f0 <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    241c:	1d 8e       	std	Y+29, r1	; 0x1d
    241e:	1e 8e       	std	Y+30, r1	; 0x1e
    2420:	1f 8e       	std	Y+31, r1	; 0x1f
    2422:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    2424:	8b a5       	ldd	r24, Y+43	; 0x2b
    2426:	88 23       	and	r24, r24
    2428:	0c f4       	brge	.+2      	; 0x242c <SevSeg_voidSingleRangeCounter+0x68>
    242a:	64 c1       	rjmp	.+712    	; 0x26f4 <SevSeg_voidSingleRangeCounter+0x330>
    242c:	8b a5       	ldd	r24, Y+43	; 0x2b
    242e:	8a 30       	cpi	r24, 0x0A	; 10
    2430:	0c f0       	brlt	.+2      	; 0x2434 <SevSeg_voidSingleRangeCounter+0x70>
    2432:	60 c1       	rjmp	.+704    	; 0x26f4 <SevSeg_voidSingleRangeCounter+0x330>
    2434:	8c a5       	ldd	r24, Y+44	; 0x2c
    2436:	8a 30       	cpi	r24, 0x0A	; 10
    2438:	0c f0       	brlt	.+2      	; 0x243c <SevSeg_voidSingleRangeCounter+0x78>
    243a:	5c c1       	rjmp	.+696    	; 0x26f4 <SevSeg_voidSingleRangeCounter+0x330>
    243c:	8c a5       	ldd	r24, Y+44	; 0x2c
    243e:	88 23       	and	r24, r24
    2440:	0c f4       	brge	.+2      	; 0x2444 <SevSeg_voidSingleRangeCounter+0x80>
    2442:	58 c1       	rjmp	.+688    	; 0x26f4 <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    2444:	9b a5       	ldd	r25, Y+43	; 0x2b
    2446:	8c a5       	ldd	r24, Y+44	; 0x2c
    2448:	98 17       	cp	r25, r24
    244a:	0c f0       	brlt	.+2      	; 0x244e <SevSeg_voidSingleRangeCounter+0x8a>
    244c:	aa c0       	rjmp	.+340    	; 0x25a2 <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    244e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2450:	99 27       	eor	r25, r25
    2452:	87 fd       	sbrc	r24, 7
    2454:	90 95       	com	r25
    2456:	a9 2f       	mov	r26, r25
    2458:	b9 2f       	mov	r27, r25
    245a:	8d 8f       	std	Y+29, r24	; 0x1d
    245c:	9e 8f       	std	Y+30, r25	; 0x1e
    245e:	af 8f       	std	Y+31, r26	; 0x1f
    2460:	b8 a3       	std	Y+32, r27	; 0x20
    2462:	8d c0       	rjmp	.+282    	; 0x257e <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2468:	af 8d       	ldd	r26, Y+31	; 0x1f
    246a:	b8 a1       	ldd	r27, Y+32	; 0x20
    246c:	9e 01       	movw	r18, r28
    246e:	2f 5d       	subi	r18, 0xDF	; 223
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	f9 01       	movw	r30, r18
    2474:	e8 0f       	add	r30, r24
    2476:	f9 1f       	adc	r31, r25
    2478:	80 81       	ld	r24, Z
    247a:	98 2f       	mov	r25, r24
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	69 2f       	mov	r22, r25
    2480:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a0 e2       	ldi	r26, 0x20	; 32
    248a:	b1 e4       	ldi	r27, 0x41	; 65
    248c:	89 8f       	std	Y+25, r24	; 0x19
    248e:	9a 8f       	std	Y+26, r25	; 0x1a
    2490:	ab 8f       	std	Y+27, r26	; 0x1b
    2492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	69 8d       	ldd	r22, Y+25	; 0x19
    2496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a e7       	ldi	r20, 0x7A	; 122
    24a2:	55 e4       	ldi	r21, 0x45	; 69
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8d 8b       	std	Y+21, r24	; 0x15
    24ae:	9e 8b       	std	Y+22, r25	; 0x16
    24b0:	af 8b       	std	Y+23, r26	; 0x17
    24b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <SevSeg_voidSingleRangeCounter+0x172>
    2518:	80 e9       	ldi	r24, 0x90	; 144
    251a:	91 e0       	ldi	r25, 0x01	; 1
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <SevSeg_voidSingleRangeCounter+0x160>
    2528:	9a 8b       	std	Y+18, r25	; 0x12
    252a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <SevSeg_voidSingleRangeCounter+0x154>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6d 89       	ldd	r22, Y+21	; 0x15
    2542:	7e 89       	ldd	r23, Y+22	; 0x16
    2544:	8f 89       	ldd	r24, Y+23	; 0x17
    2546:	98 8d       	ldd	r25, Y+24	; 0x18
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f
    255c:	8f 85       	ldd	r24, Y+15	; 0x0f
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <SevSeg_voidSingleRangeCounter+0x19c>
    2564:	98 8b       	std	Y+16, r25	; 0x10
    2566:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    2568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256c:	af 8d       	ldd	r26, Y+31	; 0x1f
    256e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	a1 1d       	adc	r26, r1
    2574:	b1 1d       	adc	r27, r1
    2576:	8d 8f       	std	Y+29, r24	; 0x1d
    2578:	9e 8f       	std	Y+30, r25	; 0x1e
    257a:	af 8f       	std	Y+31, r26	; 0x1f
    257c:	b8 a3       	std	Y+32, r27	; 0x20
    257e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2580:	28 2f       	mov	r18, r24
    2582:	33 27       	eor	r19, r19
    2584:	27 fd       	sbrc	r18, 7
    2586:	30 95       	com	r19
    2588:	43 2f       	mov	r20, r19
    258a:	53 2f       	mov	r21, r19
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2590:	af 8d       	ldd	r26, Y+31	; 0x1f
    2592:	b8 a1       	ldd	r27, Y+32	; 0x20
    2594:	82 17       	cp	r24, r18
    2596:	93 07       	cpc	r25, r19
    2598:	a4 07       	cpc	r26, r20
    259a:	b5 07       	cpc	r27, r21
    259c:	0c f4       	brge	.+2      	; 0x25a0 <SevSeg_voidSingleRangeCounter+0x1dc>
    259e:	62 cf       	rjmp	.-316    	; 0x2464 <SevSeg_voidSingleRangeCounter+0xa0>
    25a0:	a9 c0       	rjmp	.+338    	; 0x26f4 <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    25a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a4:	99 27       	eor	r25, r25
    25a6:	87 fd       	sbrc	r24, 7
    25a8:	90 95       	com	r25
    25aa:	a9 2f       	mov	r26, r25
    25ac:	b9 2f       	mov	r27, r25
    25ae:	8d 8f       	std	Y+29, r24	; 0x1d
    25b0:	9e 8f       	std	Y+30, r25	; 0x1e
    25b2:	af 8f       	std	Y+31, r26	; 0x1f
    25b4:	b8 a3       	std	Y+32, r27	; 0x20
    25b6:	8d c0       	rjmp	.+282    	; 0x26d2 <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    25b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    25be:	b8 a1       	ldd	r27, Y+32	; 0x20
    25c0:	9e 01       	movw	r18, r28
    25c2:	2f 5d       	subi	r18, 0xDF	; 223
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	f9 01       	movw	r30, r18
    25c8:	e8 0f       	add	r30, r24
    25ca:	f9 1f       	adc	r31, r25
    25cc:	80 81       	ld	r24, Z
    25ce:	98 2f       	mov	r25, r24
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	69 2f       	mov	r22, r25
    25d4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a0 e2       	ldi	r26, 0x20	; 32
    25de:	b1 e4       	ldi	r27, 0x41	; 65
    25e0:	8b 87       	std	Y+11, r24	; 0x0b
    25e2:	9c 87       	std	Y+12, r25	; 0x0c
    25e4:	ad 87       	std	Y+13, r26	; 0x0d
    25e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	55 e4       	ldi	r21, 0x45	; 69
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8f 83       	std	Y+7, r24	; 0x07
    2602:	98 87       	std	Y+8, r25	; 0x08
    2604:	a9 87       	std	Y+9, r26	; 0x09
    2606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6b 85       	ldd	r22, Y+11	; 0x0b
    2644:	7c 85       	ldd	r23, Y+12	; 0x0c
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	0f c0       	rjmp	.+30     	; 0x268a <SevSeg_voidSingleRangeCounter+0x2c6>
    266c:	80 e9       	ldi	r24, 0x90	; 144
    266e:	91 e0       	ldi	r25, 0x01	; 1
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <SevSeg_voidSingleRangeCounter+0x2b4>
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <SevSeg_voidSingleRangeCounter+0x2a8>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <SevSeg_voidSingleRangeCounter+0x2f0>
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    26bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26c0:	af 8d       	ldd	r26, Y+31	; 0x1f
    26c2:	b8 a1       	ldd	r27, Y+32	; 0x20
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	a1 09       	sbc	r26, r1
    26c8:	b1 09       	sbc	r27, r1
    26ca:	8d 8f       	std	Y+29, r24	; 0x1d
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	af 8f       	std	Y+31, r26	; 0x1f
    26d0:	b8 a3       	std	Y+32, r27	; 0x20
    26d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    26d4:	28 2f       	mov	r18, r24
    26d6:	33 27       	eor	r19, r19
    26d8:	27 fd       	sbrc	r18, 7
    26da:	30 95       	com	r19
    26dc:	43 2f       	mov	r20, r19
    26de:	53 2f       	mov	r21, r19
    26e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e4:	af 8d       	ldd	r26, Y+31	; 0x1f
    26e6:	b8 a1       	ldd	r27, Y+32	; 0x20
    26e8:	82 17       	cp	r24, r18
    26ea:	93 07       	cpc	r25, r19
    26ec:	a4 07       	cpc	r26, r20
    26ee:	b5 07       	cpc	r27, r21
    26f0:	0c f0       	brlt	.+2      	; 0x26f4 <SevSeg_voidSingleRangeCounter+0x330>
    26f2:	62 cf       	rjmp	.-316    	; 0x25b8 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    26f4:	e1 96       	adiw	r28, 0x31	; 49
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	e9 97       	sbiw	r28, 0x39	; 57
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	8b ab       	std	Y+51, r24	; 0x33
    271c:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    271e:	ce 01       	movw	r24, r28
    2720:	89 96       	adiw	r24, 0x29	; 41
    2722:	9e ab       	std	Y+54, r25	; 0x36
    2724:	8d ab       	std	Y+53, r24	; 0x35
    2726:	ef ea       	ldi	r30, 0xAF	; 175
    2728:	f1 e0       	ldi	r31, 0x01	; 1
    272a:	f8 af       	std	Y+56, r31	; 0x38
    272c:	ef ab       	std	Y+55, r30	; 0x37
    272e:	fa e0       	ldi	r31, 0x0A	; 10
    2730:	f9 af       	std	Y+57, r31	; 0x39
    2732:	ef a9       	ldd	r30, Y+55	; 0x37
    2734:	f8 ad       	ldd	r31, Y+56	; 0x38
    2736:	00 80       	ld	r0, Z
    2738:	8f a9       	ldd	r24, Y+55	; 0x37
    273a:	98 ad       	ldd	r25, Y+56	; 0x38
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	98 af       	std	Y+56, r25	; 0x38
    2740:	8f ab       	std	Y+55, r24	; 0x37
    2742:	ed a9       	ldd	r30, Y+53	; 0x35
    2744:	fe a9       	ldd	r31, Y+54	; 0x36
    2746:	00 82       	st	Z, r0
    2748:	8d a9       	ldd	r24, Y+53	; 0x35
    274a:	9e a9       	ldd	r25, Y+54	; 0x36
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	9e ab       	std	Y+54, r25	; 0x36
    2750:	8d ab       	std	Y+53, r24	; 0x35
    2752:	99 ad       	ldd	r25, Y+57	; 0x39
    2754:	91 50       	subi	r25, 0x01	; 1
    2756:	99 af       	std	Y+57, r25	; 0x39
    2758:	e9 ad       	ldd	r30, Y+57	; 0x39
    275a:	ee 23       	and	r30, r30
    275c:	51 f7       	brne	.-44     	; 0x2732 <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    275e:	8b a9       	ldd	r24, Y+51	; 0x33
    2760:	9a e0       	ldi	r25, 0x0A	; 10
    2762:	69 2f       	mov	r22, r25
    2764:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2768:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    276a:	8b a9       	ldd	r24, Y+51	; 0x33
    276c:	9a e0       	ldi	r25, 0x0A	; 10
    276e:	69 2f       	mov	r22, r25
    2770:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2774:	89 2f       	mov	r24, r25
    2776:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    2778:	8c a9       	ldd	r24, Y+52	; 0x34
    277a:	9a e0       	ldi	r25, 0x0A	; 10
    277c:	69 2f       	mov	r22, r25
    277e:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2782:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    2784:	8c a9       	ldd	r24, Y+52	; 0x34
    2786:	9a e0       	ldi	r25, 0x0A	; 10
    2788:	69 2f       	mov	r22, r25
    278a:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    278e:	89 2f       	mov	r24, r25
    2790:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    2792:	19 a2       	std	Y+33, r1	; 0x21
    2794:	1a a2       	std	Y+34, r1	; 0x22
    2796:	1b a2       	std	Y+35, r1	; 0x23
    2798:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    279a:	1d 8e       	std	Y+29, r1	; 0x1d
    279c:	1e 8e       	std	Y+30, r1	; 0x1e
    279e:	1f 8e       	std	Y+31, r1	; 0x1f
    27a0:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    27a2:	88 a5       	ldd	r24, Y+40	; 0x28
    27a4:	88 23       	and	r24, r24
    27a6:	0c f4       	brge	.+2      	; 0x27aa <SevSeg_voidDoubleRangeCounter+0xa4>
    27a8:	05 c2       	rjmp	.+1034   	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>
    27aa:	88 a5       	ldd	r24, Y+40	; 0x28
    27ac:	8a 30       	cpi	r24, 0x0A	; 10
    27ae:	0c f0       	brlt	.+2      	; 0x27b2 <SevSeg_voidDoubleRangeCounter+0xac>
    27b0:	01 c2       	rjmp	.+1026   	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>
    27b2:	8e a1       	ldd	r24, Y+38	; 0x26
    27b4:	8a 30       	cpi	r24, 0x0A	; 10
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <SevSeg_voidDoubleRangeCounter+0xb4>
    27b8:	fd c1       	rjmp	.+1018   	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>
    27ba:	8e a1       	ldd	r24, Y+38	; 0x26
    27bc:	88 23       	and	r24, r24
    27be:	0c f4       	brge	.+2      	; 0x27c2 <SevSeg_voidDoubleRangeCounter+0xbc>
    27c0:	f9 c1       	rjmp	.+1010   	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    27c2:	9b a9       	ldd	r25, Y+51	; 0x33
    27c4:	8c a9       	ldd	r24, Y+52	; 0x34
    27c6:	98 17       	cp	r25, r24
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <SevSeg_voidDoubleRangeCounter+0xc6>
    27ca:	fc c0       	rjmp	.+504    	; 0x29c4 <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    27cc:	88 a5       	ldd	r24, Y+40	; 0x28
    27ce:	99 27       	eor	r25, r25
    27d0:	87 fd       	sbrc	r24, 7
    27d2:	90 95       	com	r25
    27d4:	a9 2f       	mov	r26, r25
    27d6:	b9 2f       	mov	r27, r25
    27d8:	89 a3       	std	Y+33, r24	; 0x21
    27da:	9a a3       	std	Y+34, r25	; 0x22
    27dc:	ab a3       	std	Y+35, r26	; 0x23
    27de:	bc a3       	std	Y+36, r27	; 0x24
    27e0:	df c0       	rjmp	.+446    	; 0x29a0 <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    27e2:	89 a1       	ldd	r24, Y+33	; 0x21
    27e4:	9a a1       	ldd	r25, Y+34	; 0x22
    27e6:	ab a1       	ldd	r26, Y+35	; 0x23
    27e8:	bc a1       	ldd	r27, Y+36	; 0x24
    27ea:	9e 01       	movw	r18, r28
    27ec:	27 5d       	subi	r18, 0xD7	; 215
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	f9 01       	movw	r30, r18
    27f2:	e8 0f       	add	r30, r24
    27f4:	f9 1f       	adc	r31, r25
    27f6:	80 81       	ld	r24, Z
    27f8:	98 2f       	mov	r25, r24
    27fa:	84 e0       	ldi	r24, 0x04	; 4
    27fc:	69 2f       	mov	r22, r25
    27fe:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2802:	8f a1       	ldd	r24, Y+39	; 0x27
    2804:	99 27       	eor	r25, r25
    2806:	87 fd       	sbrc	r24, 7
    2808:	90 95       	com	r25
    280a:	a9 2f       	mov	r26, r25
    280c:	b9 2f       	mov	r27, r25
    280e:	8d 8f       	std	Y+29, r24	; 0x1d
    2810:	9e 8f       	std	Y+30, r25	; 0x1e
    2812:	af 8f       	std	Y+31, r26	; 0x1f
    2814:	b8 a3       	std	Y+32, r27	; 0x20
    2816:	ae c0       	rjmp	.+348    	; 0x2974 <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2818:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    281c:	af 8d       	ldd	r26, Y+31	; 0x1f
    281e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2820:	9e 01       	movw	r18, r28
    2822:	27 5d       	subi	r18, 0xD7	; 215
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	f9 01       	movw	r30, r18
    2828:	e8 0f       	add	r30, r24
    282a:	f9 1f       	adc	r31, r25
    282c:	80 81       	ld	r24, Z
    282e:	98 2f       	mov	r25, r24
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	69 2f       	mov	r22, r25
    2834:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e2       	ldi	r26, 0x20	; 32
    283e:	b1 e4       	ldi	r27, 0x41	; 65
    2840:	89 8f       	std	Y+25, r24	; 0x19
    2842:	9a 8f       	std	Y+26, r25	; 0x1a
    2844:	ab 8f       	std	Y+27, r26	; 0x1b
    2846:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	69 8d       	ldd	r22, Y+25	; 0x19
    284a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4a e7       	ldi	r20, 0x7A	; 122
    2856:	55 e4       	ldi	r21, 0x45	; 69
    2858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	8d 8b       	std	Y+21, r24	; 0x15
    2862:	9e 8b       	std	Y+22, r25	; 0x16
    2864:	af 8b       	std	Y+23, r26	; 0x17
    2866:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2868:	6d 89       	ldd	r22, Y+21	; 0x15
    286a:	7e 89       	ldd	r23, Y+22	; 0x16
    286c:	8f 89       	ldd	r24, Y+23	; 0x17
    286e:	98 8d       	ldd	r25, Y+24	; 0x18
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e8       	ldi	r20, 0x80	; 128
    2876:	5f e3       	ldi	r21, 0x3F	; 63
    2878:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    287c:	88 23       	and	r24, r24
    287e:	2c f4       	brge	.+10     	; 0x288a <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9c 8b       	std	Y+20, r25	; 0x14
    2886:	8b 8b       	std	Y+19, r24	; 0x13
    2888:	3f c0       	rjmp	.+126    	; 0x2908 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    288a:	6d 89       	ldd	r22, Y+21	; 0x15
    288c:	7e 89       	ldd	r23, Y+22	; 0x16
    288e:	8f 89       	ldd	r24, Y+23	; 0x17
    2890:	98 8d       	ldd	r25, Y+24	; 0x18
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	3f ef       	ldi	r19, 0xFF	; 255
    2896:	4f e7       	ldi	r20, 0x7F	; 127
    2898:	57 e4       	ldi	r21, 0x47	; 71
    289a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289e:	18 16       	cp	r1, r24
    28a0:	4c f5       	brge	.+82     	; 0x28f4 <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a2:	69 8d       	ldd	r22, Y+25	; 0x19
    28a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e2       	ldi	r20, 0x20	; 32
    28b0:	51 e4       	ldi	r21, 0x41	; 65
    28b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	9c 8b       	std	Y+20, r25	; 0x14
    28c8:	8b 8b       	std	Y+19, r24	; 0x13
    28ca:	0f c0       	rjmp	.+30     	; 0x28ea <SevSeg_voidDoubleRangeCounter+0x1e4>
    28cc:	80 e9       	ldi	r24, 0x90	; 144
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	9a 8b       	std	Y+18, r25	; 0x12
    28d2:	89 8b       	std	Y+17, r24	; 0x11
    28d4:	89 89       	ldd	r24, Y+17	; 0x11
    28d6:	9a 89       	ldd	r25, Y+18	; 0x12
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <SevSeg_voidDoubleRangeCounter+0x1d2>
    28dc:	9a 8b       	std	Y+18, r25	; 0x12
    28de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e0:	8b 89       	ldd	r24, Y+19	; 0x13
    28e2:	9c 89       	ldd	r25, Y+20	; 0x14
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	9c 8b       	std	Y+20, r25	; 0x14
    28e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ea:	8b 89       	ldd	r24, Y+19	; 0x13
    28ec:	9c 89       	ldd	r25, Y+20	; 0x14
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	69 f7       	brne	.-38     	; 0x28cc <SevSeg_voidDoubleRangeCounter+0x1c6>
    28f2:	14 c0       	rjmp	.+40     	; 0x291c <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9c 8b       	std	Y+20, r25	; 0x14
    2906:	8b 8b       	std	Y+19, r24	; 0x13
    2908:	8b 89       	ldd	r24, Y+19	; 0x13
    290a:	9c 89       	ldd	r25, Y+20	; 0x14
    290c:	98 8b       	std	Y+16, r25	; 0x10
    290e:	8f 87       	std	Y+15, r24	; 0x0f
    2910:	8f 85       	ldd	r24, Y+15	; 0x0f
    2912:	98 89       	ldd	r25, Y+16	; 0x10
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <SevSeg_voidDoubleRangeCounter+0x20e>
    2918:	98 8b       	std	Y+16, r25	; 0x10
    291a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    291c:	8d a1       	ldd	r24, Y+37	; 0x25
    291e:	28 2f       	mov	r18, r24
    2920:	33 27       	eor	r19, r19
    2922:	27 fd       	sbrc	r18, 7
    2924:	30 95       	com	r19
    2926:	43 2f       	mov	r20, r19
    2928:	53 2f       	mov	r21, r19
    292a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    292c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    292e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2930:	b8 a1       	ldd	r27, Y+32	; 0x20
    2932:	28 17       	cp	r18, r24
    2934:	39 07       	cpc	r19, r25
    2936:	4a 07       	cpc	r20, r26
    2938:	5b 07       	cpc	r21, r27
    293a:	89 f4       	brne	.+34     	; 0x295e <SevSeg_voidDoubleRangeCounter+0x258>
    293c:	8e a1       	ldd	r24, Y+38	; 0x26
    293e:	28 2f       	mov	r18, r24
    2940:	33 27       	eor	r19, r19
    2942:	27 fd       	sbrc	r18, 7
    2944:	30 95       	com	r19
    2946:	43 2f       	mov	r20, r19
    2948:	53 2f       	mov	r21, r19
    294a:	89 a1       	ldd	r24, Y+33	; 0x21
    294c:	9a a1       	ldd	r25, Y+34	; 0x22
    294e:	ab a1       	ldd	r26, Y+35	; 0x23
    2950:	bc a1       	ldd	r27, Y+36	; 0x24
    2952:	28 17       	cp	r18, r24
    2954:	39 07       	cpc	r19, r25
    2956:	4a 07       	cpc	r20, r26
    2958:	5b 07       	cpc	r21, r27
    295a:	09 f4       	brne	.+2      	; 0x295e <SevSeg_voidDoubleRangeCounter+0x258>
    295c:	2b c1       	rjmp	.+598    	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    295e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2960:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2962:	af 8d       	ldd	r26, Y+31	; 0x1f
    2964:	b8 a1       	ldd	r27, Y+32	; 0x20
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	a1 1d       	adc	r26, r1
    296a:	b1 1d       	adc	r27, r1
    296c:	8d 8f       	std	Y+29, r24	; 0x1d
    296e:	9e 8f       	std	Y+30, r25	; 0x1e
    2970:	af 8f       	std	Y+31, r26	; 0x1f
    2972:	b8 a3       	std	Y+32, r27	; 0x20
    2974:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2976:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2978:	af 8d       	ldd	r26, Y+31	; 0x1f
    297a:	b8 a1       	ldd	r27, Y+32	; 0x20
    297c:	8a 30       	cpi	r24, 0x0A	; 10
    297e:	91 05       	cpc	r25, r1
    2980:	a1 05       	cpc	r26, r1
    2982:	b1 05       	cpc	r27, r1
    2984:	0c f4       	brge	.+2      	; 0x2988 <SevSeg_voidDoubleRangeCounter+0x282>
    2986:	48 cf       	rjmp	.-368    	; 0x2818 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2988:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    298a:	89 a1       	ldd	r24, Y+33	; 0x21
    298c:	9a a1       	ldd	r25, Y+34	; 0x22
    298e:	ab a1       	ldd	r26, Y+35	; 0x23
    2990:	bc a1       	ldd	r27, Y+36	; 0x24
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	a1 1d       	adc	r26, r1
    2996:	b1 1d       	adc	r27, r1
    2998:	89 a3       	std	Y+33, r24	; 0x21
    299a:	9a a3       	std	Y+34, r25	; 0x22
    299c:	ab a3       	std	Y+35, r26	; 0x23
    299e:	bc a3       	std	Y+36, r27	; 0x24
    29a0:	8e a1       	ldd	r24, Y+38	; 0x26
    29a2:	28 2f       	mov	r18, r24
    29a4:	33 27       	eor	r19, r19
    29a6:	27 fd       	sbrc	r18, 7
    29a8:	30 95       	com	r19
    29aa:	43 2f       	mov	r20, r19
    29ac:	53 2f       	mov	r21, r19
    29ae:	89 a1       	ldd	r24, Y+33	; 0x21
    29b0:	9a a1       	ldd	r25, Y+34	; 0x22
    29b2:	ab a1       	ldd	r26, Y+35	; 0x23
    29b4:	bc a1       	ldd	r27, Y+36	; 0x24
    29b6:	28 17       	cp	r18, r24
    29b8:	39 07       	cpc	r19, r25
    29ba:	4a 07       	cpc	r20, r26
    29bc:	5b 07       	cpc	r21, r27
    29be:	0c f0       	brlt	.+2      	; 0x29c2 <SevSeg_voidDoubleRangeCounter+0x2bc>
    29c0:	10 cf       	rjmp	.-480    	; 0x27e2 <SevSeg_voidDoubleRangeCounter+0xdc>
    29c2:	f8 c0       	rjmp	.+496    	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    29c4:	88 a5       	ldd	r24, Y+40	; 0x28
    29c6:	99 27       	eor	r25, r25
    29c8:	87 fd       	sbrc	r24, 7
    29ca:	90 95       	com	r25
    29cc:	a9 2f       	mov	r26, r25
    29ce:	b9 2f       	mov	r27, r25
    29d0:	89 a3       	std	Y+33, r24	; 0x21
    29d2:	9a a3       	std	Y+34, r25	; 0x22
    29d4:	ab a3       	std	Y+35, r26	; 0x23
    29d6:	bc a3       	std	Y+36, r27	; 0x24
    29d8:	dc c0       	rjmp	.+440    	; 0x2b92 <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    29da:	89 a1       	ldd	r24, Y+33	; 0x21
    29dc:	9a a1       	ldd	r25, Y+34	; 0x22
    29de:	ab a1       	ldd	r26, Y+35	; 0x23
    29e0:	bc a1       	ldd	r27, Y+36	; 0x24
    29e2:	9e 01       	movw	r18, r28
    29e4:	27 5d       	subi	r18, 0xD7	; 215
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	f9 01       	movw	r30, r18
    29ea:	e8 0f       	add	r30, r24
    29ec:	f9 1f       	adc	r31, r25
    29ee:	80 81       	ld	r24, Z
    29f0:	98 2f       	mov	r25, r24
    29f2:	84 e0       	ldi	r24, 0x04	; 4
    29f4:	69 2f       	mov	r22, r25
    29f6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    29fa:	8f a1       	ldd	r24, Y+39	; 0x27
    29fc:	99 27       	eor	r25, r25
    29fe:	87 fd       	sbrc	r24, 7
    2a00:	90 95       	com	r25
    2a02:	a9 2f       	mov	r26, r25
    2a04:	b9 2f       	mov	r27, r25
    2a06:	8d 8f       	std	Y+29, r24	; 0x1d
    2a08:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0a:	af 8f       	std	Y+31, r26	; 0x1f
    2a0c:	b8 a3       	std	Y+32, r27	; 0x20
    2a0e:	ad c0       	rjmp	.+346    	; 0x2b6a <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a14:	af 8d       	ldd	r26, Y+31	; 0x1f
    2a16:	b8 a1       	ldd	r27, Y+32	; 0x20
    2a18:	9e 01       	movw	r18, r28
    2a1a:	27 5d       	subi	r18, 0xD7	; 215
    2a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1e:	f9 01       	movw	r30, r18
    2a20:	e8 0f       	add	r30, r24
    2a22:	f9 1f       	adc	r31, r25
    2a24:	80 81       	ld	r24, Z
    2a26:	98 2f       	mov	r25, r24
    2a28:	82 e0       	ldi	r24, 0x02	; 2
    2a2a:	69 2f       	mov	r22, r25
    2a2c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e2       	ldi	r26, 0x20	; 32
    2a36:	b1 e4       	ldi	r27, 0x41	; 65
    2a38:	8b 87       	std	Y+11, r24	; 0x0b
    2a3a:	9c 87       	std	Y+12, r25	; 0x0c
    2a3c:	ad 87       	std	Y+13, r26	; 0x0d
    2a3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a e7       	ldi	r20, 0x7A	; 122
    2a4e:	55 e4       	ldi	r21, 0x45	; 69
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8f 83       	std	Y+7, r24	; 0x07
    2a5a:	98 87       	std	Y+8, r25	; 0x08
    2a5c:	a9 87       	std	Y+9, r26	; 0x09
    2a5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	2c f4       	brge	.+10     	; 0x2a82 <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	4c f5       	brge	.+82     	; 0x2aec <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e2       	ldi	r20, 0x20	; 32
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <SevSeg_voidDoubleRangeCounter+0x3dc>
    2ac4:	80 e9       	ldi	r24, 0x90	; 144
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <SevSeg_voidDoubleRangeCounter+0x3ca>
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	69 f7       	brne	.-38     	; 0x2ac4 <SevSeg_voidDoubleRangeCounter+0x3be>
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <SevSeg_voidDoubleRangeCounter+0x406>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	28 2f       	mov	r18, r24
    2b18:	33 27       	eor	r19, r19
    2b1a:	27 fd       	sbrc	r18, 7
    2b1c:	30 95       	com	r19
    2b1e:	43 2f       	mov	r20, r19
    2b20:	53 2f       	mov	r21, r19
    2b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b26:	af 8d       	ldd	r26, Y+31	; 0x1f
    2b28:	b8 a1       	ldd	r27, Y+32	; 0x20
    2b2a:	28 17       	cp	r18, r24
    2b2c:	39 07       	cpc	r19, r25
    2b2e:	4a 07       	cpc	r20, r26
    2b30:	5b 07       	cpc	r21, r27
    2b32:	81 f4       	brne	.+32     	; 0x2b54 <SevSeg_voidDoubleRangeCounter+0x44e>
    2b34:	8e a1       	ldd	r24, Y+38	; 0x26
    2b36:	28 2f       	mov	r18, r24
    2b38:	33 27       	eor	r19, r19
    2b3a:	27 fd       	sbrc	r18, 7
    2b3c:	30 95       	com	r19
    2b3e:	43 2f       	mov	r20, r19
    2b40:	53 2f       	mov	r21, r19
    2b42:	89 a1       	ldd	r24, Y+33	; 0x21
    2b44:	9a a1       	ldd	r25, Y+34	; 0x22
    2b46:	ab a1       	ldd	r26, Y+35	; 0x23
    2b48:	bc a1       	ldd	r27, Y+36	; 0x24
    2b4a:	28 17       	cp	r18, r24
    2b4c:	39 07       	cpc	r19, r25
    2b4e:	4a 07       	cpc	r20, r26
    2b50:	5b 07       	cpc	r21, r27
    2b52:	81 f1       	breq	.+96     	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2b54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b58:	af 8d       	ldd	r26, Y+31	; 0x1f
    2b5a:	b8 a1       	ldd	r27, Y+32	; 0x20
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	a1 09       	sbc	r26, r1
    2b60:	b1 09       	sbc	r27, r1
    2b62:	8d 8f       	std	Y+29, r24	; 0x1d
    2b64:	9e 8f       	std	Y+30, r25	; 0x1e
    2b66:	af 8f       	std	Y+31, r26	; 0x1f
    2b68:	b8 a3       	std	Y+32, r27	; 0x20
    2b6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b6e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2b70:	b8 a1       	ldd	r27, Y+32	; 0x20
    2b72:	bb 23       	and	r27, r27
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <SevSeg_voidDoubleRangeCounter+0x472>
    2b76:	4c cf       	rjmp	.-360    	; 0x2a10 <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    2b78:	89 e0       	ldi	r24, 0x09	; 9
    2b7a:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	ab a1       	ldd	r26, Y+35	; 0x23
    2b82:	bc a1       	ldd	r27, Y+36	; 0x24
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	a1 09       	sbc	r26, r1
    2b88:	b1 09       	sbc	r27, r1
    2b8a:	89 a3       	std	Y+33, r24	; 0x21
    2b8c:	9a a3       	std	Y+34, r25	; 0x22
    2b8e:	ab a3       	std	Y+35, r26	; 0x23
    2b90:	bc a3       	std	Y+36, r27	; 0x24
    2b92:	8e a1       	ldd	r24, Y+38	; 0x26
    2b94:	28 2f       	mov	r18, r24
    2b96:	33 27       	eor	r19, r19
    2b98:	27 fd       	sbrc	r18, 7
    2b9a:	30 95       	com	r19
    2b9c:	43 2f       	mov	r20, r19
    2b9e:	53 2f       	mov	r21, r19
    2ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba4:	ab a1       	ldd	r26, Y+35	; 0x23
    2ba6:	bc a1       	ldd	r27, Y+36	; 0x24
    2ba8:	82 17       	cp	r24, r18
    2baa:	93 07       	cpc	r25, r19
    2bac:	a4 07       	cpc	r26, r20
    2bae:	b5 07       	cpc	r27, r21
    2bb0:	0c f0       	brlt	.+2      	; 0x2bb4 <SevSeg_voidDoubleRangeCounter+0x4ae>
    2bb2:	13 cf       	rjmp	.-474    	; 0x29da <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2bb4:	e9 96       	adiw	r28, 0x39	; 57
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <SevSeg_voidBCDDisplay+0x6>
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	6a 81       	ldd	r22, Y+2	; 0x02
    2bd8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	ab 97       	sbiw	r28, 0x2b	; 43
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	8a a7       	std	Y+42, r24	; 0x2a
    2bfc:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    2bfe:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c00:	9a e0       	ldi	r25, 0x0A	; 10
    2c02:	69 2f       	mov	r22, r25
    2c04:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2c08:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    2c0a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c0c:	9a e0       	ldi	r25, 0x0A	; 10
    2c0e:	69 2f       	mov	r22, r25
    2c10:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2c14:	89 2f       	mov	r24, r25
    2c16:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    2c18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c1a:	9a e0       	ldi	r25, 0x0A	; 10
    2c1c:	69 2f       	mov	r22, r25
    2c1e:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2c22:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    2c24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c26:	9a e0       	ldi	r25, 0x0A	; 10
    2c28:	69 2f       	mov	r22, r25
    2c2a:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    2c2e:	89 2f       	mov	r24, r25
    2c30:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    2c32:	1a a2       	std	Y+34, r1	; 0x22
    2c34:	1b a2       	std	Y+35, r1	; 0x23
    2c36:	1c a2       	std	Y+36, r1	; 0x24
    2c38:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    2c3a:	1e 8e       	std	Y+30, r1	; 0x1e
    2c3c:	1f 8e       	std	Y+31, r1	; 0x1f
    2c3e:	18 a2       	std	Y+32, r1	; 0x20
    2c40:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    2c42:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    2c44:	89 a5       	ldd	r24, Y+41	; 0x29
    2c46:	88 23       	and	r24, r24
    2c48:	0c f4       	brge	.+2      	; 0x2c4c <SevSeg_voidBCDDoubleDisplay+0x66>
    2c4a:	11 c2       	rjmp	.+1058   	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>
    2c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c4e:	8a 30       	cpi	r24, 0x0A	; 10
    2c50:	0c f0       	brlt	.+2      	; 0x2c54 <SevSeg_voidBCDDoubleDisplay+0x6e>
    2c52:	0d c2       	rjmp	.+1050   	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>
    2c54:	8f a1       	ldd	r24, Y+39	; 0x27
    2c56:	8a 30       	cpi	r24, 0x0A	; 10
    2c58:	0c f0       	brlt	.+2      	; 0x2c5c <SevSeg_voidBCDDoubleDisplay+0x76>
    2c5a:	09 c2       	rjmp	.+1042   	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>
    2c5c:	8f a1       	ldd	r24, Y+39	; 0x27
    2c5e:	88 23       	and	r24, r24
    2c60:	0c f4       	brge	.+2      	; 0x2c64 <SevSeg_voidBCDDoubleDisplay+0x7e>
    2c62:	05 c2       	rjmp	.+1034   	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    2c64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c68:	98 17       	cp	r25, r24
    2c6a:	0c f0       	brlt	.+2      	; 0x2c6e <SevSeg_voidBCDDoubleDisplay+0x88>
    2c6c:	02 c1       	rjmp	.+516    	; 0x2e72 <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2c6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c70:	99 27       	eor	r25, r25
    2c72:	87 fd       	sbrc	r24, 7
    2c74:	90 95       	com	r25
    2c76:	a9 2f       	mov	r26, r25
    2c78:	b9 2f       	mov	r27, r25
    2c7a:	8a a3       	std	Y+34, r24	; 0x22
    2c7c:	9b a3       	std	Y+35, r25	; 0x23
    2c7e:	ac a3       	std	Y+36, r26	; 0x24
    2c80:	bd a3       	std	Y+37, r27	; 0x25
    2c82:	e5 c0       	rjmp	.+458    	; 0x2e4e <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    2c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c86:	8f 70       	andi	r24, 0x0F	; 15
    2c88:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2c8a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c8c:	9b a1       	ldd	r25, Y+35	; 0x23
    2c8e:	ac a1       	ldd	r26, Y+36	; 0x24
    2c90:	bd a1       	ldd	r27, Y+37	; 0x25
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	aa 1f       	adc	r26, r26
    2c98:	bb 1f       	adc	r27, r27
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	aa 1f       	adc	r26, r26
    2ca0:	bb 1f       	adc	r27, r27
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	aa 1f       	adc	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	aa 1f       	adc	r26, r26
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	98 2f       	mov	r25, r24
    2cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb6:	89 2b       	or	r24, r25
    2cb8:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2cba:	88 a5       	ldd	r24, Y+40	; 0x28
    2cbc:	99 27       	eor	r25, r25
    2cbe:	87 fd       	sbrc	r24, 7
    2cc0:	90 95       	com	r25
    2cc2:	a9 2f       	mov	r26, r25
    2cc4:	b9 2f       	mov	r27, r25
    2cc6:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc8:	9f 8f       	std	Y+31, r25	; 0x1f
    2cca:	a8 a3       	std	Y+32, r26	; 0x20
    2ccc:	b9 a3       	std	Y+33, r27	; 0x21
    2cce:	a9 c0       	rjmp	.+338    	; 0x2e22 <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    2cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd2:	80 7f       	andi	r24, 0xF0	; 240
    2cd4:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2cd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cda:	89 2b       	or	r24, r25
    2cdc:	8d 8f       	std	Y+29, r24	; 0x1d
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	a0 e2       	ldi	r26, 0x20	; 32
    2ce4:	b1 e4       	ldi	r27, 0x41	; 65
    2ce6:	89 8f       	std	Y+25, r24	; 0x19
    2ce8:	9a 8f       	std	Y+26, r25	; 0x1a
    2cea:	ab 8f       	std	Y+27, r26	; 0x1b
    2cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a e7       	ldi	r20, 0x7A	; 122
    2cfc:	55 e4       	ldi	r21, 0x45	; 69
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8d 8b       	std	Y+21, r24	; 0x15
    2d08:	9e 8b       	std	Y+22, r25	; 0x16
    2d0a:	af 8b       	std	Y+23, r26	; 0x17
    2d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d10:	7e 89       	ldd	r23, Y+22	; 0x16
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    2d30:	6d 89       	ldd	r22, Y+21	; 0x15
    2d32:	7e 89       	ldd	r23, Y+22	; 0x16
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	69 8d       	ldd	r22, Y+25	; 0x19
    2d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9c 8b       	std	Y+20, r25	; 0x14
    2d6e:	8b 8b       	std	Y+19, r24	; 0x13
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <SevSeg_voidBCDDoubleDisplay+0x1aa>
    2d72:	80 e9       	ldi	r24, 0x90	; 144
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	9a 8b       	std	Y+18, r25	; 0x12
    2d78:	89 8b       	std	Y+17, r24	; 0x11
    2d7a:	89 89       	ldd	r24, Y+17	; 0x11
    2d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <SevSeg_voidBCDDoubleDisplay+0x198>
    2d82:	9a 8b       	std	Y+18, r25	; 0x12
    2d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	8b 89       	ldd	r24, Y+19	; 0x13
    2d88:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9c 8b       	std	Y+20, r25	; 0x14
    2d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	8b 89       	ldd	r24, Y+19	; 0x13
    2d92:	9c 89       	ldd	r25, Y+20	; 0x14
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <SevSeg_voidBCDDoubleDisplay+0x18c>
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2da0:	98 8d       	ldd	r25, Y+24	; 0x18
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9c 8b       	std	Y+20, r25	; 0x14
    2dac:	8b 8b       	std	Y+19, r24	; 0x13
    2dae:	8b 89       	ldd	r24, Y+19	; 0x13
    2db0:	9c 89       	ldd	r25, Y+20	; 0x14
    2db2:	98 8b       	std	Y+16, r25	; 0x10
    2db4:	8f 87       	std	Y+15, r24	; 0x0f
    2db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db8:	98 89       	ldd	r25, Y+16	; 0x10
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <SevSeg_voidBCDDoubleDisplay+0x1d4>
    2dbe:	98 8b       	std	Y+16, r25	; 0x10
    2dc0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2dc6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2dca:	8e a1       	ldd	r24, Y+38	; 0x26
    2dcc:	28 2f       	mov	r18, r24
    2dce:	33 27       	eor	r19, r19
    2dd0:	27 fd       	sbrc	r18, 7
    2dd2:	30 95       	com	r19
    2dd4:	43 2f       	mov	r20, r19
    2dd6:	53 2f       	mov	r21, r19
    2dd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ddc:	a8 a1       	ldd	r26, Y+32	; 0x20
    2dde:	b9 a1       	ldd	r27, Y+33	; 0x21
    2de0:	28 17       	cp	r18, r24
    2de2:	39 07       	cpc	r19, r25
    2de4:	4a 07       	cpc	r20, r26
    2de6:	5b 07       	cpc	r21, r27
    2de8:	89 f4       	brne	.+34     	; 0x2e0c <SevSeg_voidBCDDoubleDisplay+0x226>
    2dea:	8f a1       	ldd	r24, Y+39	; 0x27
    2dec:	28 2f       	mov	r18, r24
    2dee:	33 27       	eor	r19, r19
    2df0:	27 fd       	sbrc	r18, 7
    2df2:	30 95       	com	r19
    2df4:	43 2f       	mov	r20, r19
    2df6:	53 2f       	mov	r21, r19
    2df8:	8a a1       	ldd	r24, Y+34	; 0x22
    2dfa:	9b a1       	ldd	r25, Y+35	; 0x23
    2dfc:	ac a1       	ldd	r26, Y+36	; 0x24
    2dfe:	bd a1       	ldd	r27, Y+37	; 0x25
    2e00:	28 17       	cp	r18, r24
    2e02:	39 07       	cpc	r19, r25
    2e04:	4a 07       	cpc	r20, r26
    2e06:	5b 07       	cpc	r21, r27
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <SevSeg_voidBCDDoubleDisplay+0x226>
    2e0a:	31 c1       	rjmp	.+610    	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2e0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e10:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e12:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e14:	01 96       	adiw	r24, 0x01	; 1
    2e16:	a1 1d       	adc	r26, r1
    2e18:	b1 1d       	adc	r27, r1
    2e1a:	8e 8f       	std	Y+30, r24	; 0x1e
    2e1c:	9f 8f       	std	Y+31, r25	; 0x1f
    2e1e:	a8 a3       	std	Y+32, r26	; 0x20
    2e20:	b9 a3       	std	Y+33, r27	; 0x21
    2e22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e26:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e28:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e2a:	8a 30       	cpi	r24, 0x0A	; 10
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	a1 05       	cpc	r26, r1
    2e30:	b1 05       	cpc	r27, r1
    2e32:	0c f4       	brge	.+2      	; 0x2e36 <SevSeg_voidBCDDoubleDisplay+0x250>
    2e34:	4d cf       	rjmp	.-358    	; 0x2cd0 <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2e36:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2e38:	8a a1       	ldd	r24, Y+34	; 0x22
    2e3a:	9b a1       	ldd	r25, Y+35	; 0x23
    2e3c:	ac a1       	ldd	r26, Y+36	; 0x24
    2e3e:	bd a1       	ldd	r27, Y+37	; 0x25
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	a1 1d       	adc	r26, r1
    2e44:	b1 1d       	adc	r27, r1
    2e46:	8a a3       	std	Y+34, r24	; 0x22
    2e48:	9b a3       	std	Y+35, r25	; 0x23
    2e4a:	ac a3       	std	Y+36, r26	; 0x24
    2e4c:	bd a3       	std	Y+37, r27	; 0x25
    2e4e:	8f a1       	ldd	r24, Y+39	; 0x27
    2e50:	28 2f       	mov	r18, r24
    2e52:	33 27       	eor	r19, r19
    2e54:	27 fd       	sbrc	r18, 7
    2e56:	30 95       	com	r19
    2e58:	43 2f       	mov	r20, r19
    2e5a:	53 2f       	mov	r21, r19
    2e5c:	8a a1       	ldd	r24, Y+34	; 0x22
    2e5e:	9b a1       	ldd	r25, Y+35	; 0x23
    2e60:	ac a1       	ldd	r26, Y+36	; 0x24
    2e62:	bd a1       	ldd	r27, Y+37	; 0x25
    2e64:	28 17       	cp	r18, r24
    2e66:	39 07       	cpc	r19, r25
    2e68:	4a 07       	cpc	r20, r26
    2e6a:	5b 07       	cpc	r21, r27
    2e6c:	0c f0       	brlt	.+2      	; 0x2e70 <SevSeg_voidBCDDoubleDisplay+0x28a>
    2e6e:	0a cf       	rjmp	.-492    	; 0x2c84 <SevSeg_voidBCDDoubleDisplay+0x9e>
    2e70:	fe c0       	rjmp	.+508    	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2e72:	89 a5       	ldd	r24, Y+41	; 0x29
    2e74:	99 27       	eor	r25, r25
    2e76:	87 fd       	sbrc	r24, 7
    2e78:	90 95       	com	r25
    2e7a:	a9 2f       	mov	r26, r25
    2e7c:	b9 2f       	mov	r27, r25
    2e7e:	8a a3       	std	Y+34, r24	; 0x22
    2e80:	9b a3       	std	Y+35, r25	; 0x23
    2e82:	ac a3       	std	Y+36, r26	; 0x24
    2e84:	bd a3       	std	Y+37, r27	; 0x25
    2e86:	e2 c0       	rjmp	.+452    	; 0x304c <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e8a:	8f 70       	andi	r24, 0x0F	; 15
    2e8c:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2e8e:	8a a1       	ldd	r24, Y+34	; 0x22
    2e90:	9b a1       	ldd	r25, Y+35	; 0x23
    2e92:	ac a1       	ldd	r26, Y+36	; 0x24
    2e94:	bd a1       	ldd	r27, Y+37	; 0x25
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	aa 1f       	adc	r26, r26
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	88 0f       	add	r24, r24
    2ea0:	99 1f       	adc	r25, r25
    2ea2:	aa 1f       	adc	r26, r26
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	aa 1f       	adc	r26, r26
    2eac:	bb 1f       	adc	r27, r27
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	aa 1f       	adc	r26, r26
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	98 2f       	mov	r25, r24
    2eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eba:	89 2b       	or	r24, r25
    2ebc:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2ebe:	88 a5       	ldd	r24, Y+40	; 0x28
    2ec0:	99 27       	eor	r25, r25
    2ec2:	87 fd       	sbrc	r24, 7
    2ec4:	90 95       	com	r25
    2ec6:	a9 2f       	mov	r26, r25
    2ec8:	b9 2f       	mov	r27, r25
    2eca:	8e 8f       	std	Y+30, r24	; 0x1e
    2ecc:	9f 8f       	std	Y+31, r25	; 0x1f
    2ece:	a8 a3       	std	Y+32, r26	; 0x20
    2ed0:	b9 a3       	std	Y+33, r27	; 0x21
    2ed2:	a8 c0       	rjmp	.+336    	; 0x3024 <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    2ed4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed6:	80 7f       	andi	r24, 0xF0	; 240
    2ed8:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2eda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2edc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ede:	89 2b       	or	r24, r25
    2ee0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a0 e2       	ldi	r26, 0x20	; 32
    2ee8:	b1 e4       	ldi	r27, 0x41	; 65
    2eea:	8b 87       	std	Y+11, r24	; 0x0b
    2eec:	9c 87       	std	Y+12, r25	; 0x0c
    2eee:	ad 87       	std	Y+13, r26	; 0x0d
    2ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a e7       	ldi	r20, 0x7A	; 122
    2f00:	55 e4       	ldi	r21, 0x45	; 69
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8f 83       	std	Y+7, r24	; 0x07
    2f0c:	98 87       	std	Y+8, r25	; 0x08
    2f0e:	a9 87       	std	Y+9, r26	; 0x09
    2f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f12:	6f 81       	ldd	r22, Y+7	; 0x07
    2f14:	78 85       	ldd	r23, Y+8	; 0x08
    2f16:	89 85       	ldd	r24, Y+9	; 0x09
    2f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <SevSeg_voidBCDDoubleDisplay+0x3ae>
    2f76:	80 e9       	ldi	r24, 0x90	; 144
    2f78:	91 e0       	ldi	r25, 0x01	; 1
    2f7a:	9c 83       	std	Y+4, r25	; 0x04
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <SevSeg_voidBCDDoubleDisplay+0x39c>
    2f86:	9c 83       	std	Y+4, r25	; 0x04
    2f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <SevSeg_voidBCDDoubleDisplay+0x390>
    2f9c:	14 c0       	rjmp	.+40     	; 0x2fc6 <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <SevSeg_voidBCDDoubleDisplay+0x3d8>
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2fca:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2fce:	8e a1       	ldd	r24, Y+38	; 0x26
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	33 27       	eor	r19, r19
    2fd4:	27 fd       	sbrc	r18, 7
    2fd6:	30 95       	com	r19
    2fd8:	43 2f       	mov	r20, r19
    2fda:	53 2f       	mov	r21, r19
    2fdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fde:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fe0:	a8 a1       	ldd	r26, Y+32	; 0x20
    2fe2:	b9 a1       	ldd	r27, Y+33	; 0x21
    2fe4:	28 17       	cp	r18, r24
    2fe6:	39 07       	cpc	r19, r25
    2fe8:	4a 07       	cpc	r20, r26
    2fea:	5b 07       	cpc	r21, r27
    2fec:	81 f4       	brne	.+32     	; 0x300e <SevSeg_voidBCDDoubleDisplay+0x428>
    2fee:	8f a1       	ldd	r24, Y+39	; 0x27
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	33 27       	eor	r19, r19
    2ff4:	27 fd       	sbrc	r18, 7
    2ff6:	30 95       	com	r19
    2ff8:	43 2f       	mov	r20, r19
    2ffa:	53 2f       	mov	r21, r19
    2ffc:	8a a1       	ldd	r24, Y+34	; 0x22
    2ffe:	9b a1       	ldd	r25, Y+35	; 0x23
    3000:	ac a1       	ldd	r26, Y+36	; 0x24
    3002:	bd a1       	ldd	r27, Y+37	; 0x25
    3004:	28 17       	cp	r18, r24
    3006:	39 07       	cpc	r19, r25
    3008:	4a 07       	cpc	r20, r26
    300a:	5b 07       	cpc	r21, r27
    300c:	81 f1       	breq	.+96     	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    300e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3010:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3012:	a8 a1       	ldd	r26, Y+32	; 0x20
    3014:	b9 a1       	ldd	r27, Y+33	; 0x21
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	a1 09       	sbc	r26, r1
    301a:	b1 09       	sbc	r27, r1
    301c:	8e 8f       	std	Y+30, r24	; 0x1e
    301e:	9f 8f       	std	Y+31, r25	; 0x1f
    3020:	a8 a3       	std	Y+32, r26	; 0x20
    3022:	b9 a3       	std	Y+33, r27	; 0x21
    3024:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3026:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3028:	a8 a1       	ldd	r26, Y+32	; 0x20
    302a:	b9 a1       	ldd	r27, Y+33	; 0x21
    302c:	bb 23       	and	r27, r27
    302e:	0c f0       	brlt	.+2      	; 0x3032 <SevSeg_voidBCDDoubleDisplay+0x44c>
    3030:	51 cf       	rjmp	.-350    	; 0x2ed4 <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3032:	89 e0       	ldi	r24, 0x09	; 9
    3034:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3036:	8a a1       	ldd	r24, Y+34	; 0x22
    3038:	9b a1       	ldd	r25, Y+35	; 0x23
    303a:	ac a1       	ldd	r26, Y+36	; 0x24
    303c:	bd a1       	ldd	r27, Y+37	; 0x25
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	a1 09       	sbc	r26, r1
    3042:	b1 09       	sbc	r27, r1
    3044:	8a a3       	std	Y+34, r24	; 0x22
    3046:	9b a3       	std	Y+35, r25	; 0x23
    3048:	ac a3       	std	Y+36, r26	; 0x24
    304a:	bd a3       	std	Y+37, r27	; 0x25
    304c:	8f a1       	ldd	r24, Y+39	; 0x27
    304e:	28 2f       	mov	r18, r24
    3050:	33 27       	eor	r19, r19
    3052:	27 fd       	sbrc	r18, 7
    3054:	30 95       	com	r19
    3056:	43 2f       	mov	r20, r19
    3058:	53 2f       	mov	r21, r19
    305a:	8a a1       	ldd	r24, Y+34	; 0x22
    305c:	9b a1       	ldd	r25, Y+35	; 0x23
    305e:	ac a1       	ldd	r26, Y+36	; 0x24
    3060:	bd a1       	ldd	r27, Y+37	; 0x25
    3062:	82 17       	cp	r24, r18
    3064:	93 07       	cpc	r25, r19
    3066:	a4 07       	cpc	r26, r20
    3068:	b5 07       	cpc	r27, r21
    306a:	0c f0       	brlt	.+2      	; 0x306e <SevSeg_voidBCDDoubleDisplay+0x488>
    306c:	0d cf       	rjmp	.-486    	; 0x2e88 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    306e:	ab 96       	adiw	r28, 0x2b	; 43
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	c1 54       	subi	r28, 0x41	; 65
    308a:	d0 40       	sbci	r29, 0x00	; 0
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	fe 01       	movw	r30, r28
    3098:	e0 5c       	subi	r30, 0xC0	; 192
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 83       	st	Z, r24
    309e:	fe 01       	movw	r30, r28
    30a0:	ef 5b       	subi	r30, 0xBF	; 191
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    30a6:	fe 01       	movw	r30, r28
    30a8:	e0 5c       	subi	r30, 0xC0	; 192
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	9a e0       	ldi	r25, 0x0A	; 10
    30b0:	69 2f       	mov	r22, r25
    30b2:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    30b6:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    30b8:	fe 01       	movw	r30, r28
    30ba:	e0 5c       	subi	r30, 0xC0	; 192
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	9a e0       	ldi	r25, 0x0A	; 10
    30c2:	69 2f       	mov	r22, r25
    30c4:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    30c8:	89 2f       	mov	r24, r25
    30ca:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    30cc:	fe 01       	movw	r30, r28
    30ce:	ef 5b       	subi	r30, 0xBF	; 191
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	80 81       	ld	r24, Z
    30d4:	9a e0       	ldi	r25, 0x0A	; 10
    30d6:	69 2f       	mov	r22, r25
    30d8:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    30dc:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    30de:	fe 01       	movw	r30, r28
    30e0:	ef 5b       	subi	r30, 0xBF	; 191
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	9a e0       	ldi	r25, 0x0A	; 10
    30e8:	69 2f       	mov	r22, r25
    30ea:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodqi4>
    30ee:	89 2f       	mov	r24, r25
    30f0:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    30f2:	18 ae       	std	Y+56, r1	; 0x38
    30f4:	19 ae       	std	Y+57, r1	; 0x39
    30f6:	1a ae       	std	Y+58, r1	; 0x3a
    30f8:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    30fa:	1c aa       	std	Y+52, r1	; 0x34
    30fc:	1d aa       	std	Y+53, r1	; 0x35
    30fe:	1e aa       	std	Y+54, r1	; 0x36
    3100:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    3102:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    3104:	1f a6       	std	Y+47, r1	; 0x2f
    3106:	18 aa       	std	Y+48, r1	; 0x30
    3108:	19 aa       	std	Y+49, r1	; 0x31
    310a:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    310c:	82 e3       	ldi	r24, 0x32	; 50
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e0       	ldi	r26, 0x00	; 0
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	8b a7       	std	Y+43, r24	; 0x2b
    3116:	9c a7       	std	Y+44, r25	; 0x2c
    3118:	ad a7       	std	Y+45, r26	; 0x2d
    311a:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    311c:	8f ad       	ldd	r24, Y+63	; 0x3f
    311e:	88 23       	and	r24, r24
    3120:	0c f4       	brge	.+2      	; 0x3124 <SevSeg_voidMulBCD+0xa4>
    3122:	ad c2       	rjmp	.+1370   	; 0x367e <SevSeg_voidMulBCD+0x5fe>
    3124:	8f ad       	ldd	r24, Y+63	; 0x3f
    3126:	8a 30       	cpi	r24, 0x0A	; 10
    3128:	0c f0       	brlt	.+2      	; 0x312c <SevSeg_voidMulBCD+0xac>
    312a:	a9 c2       	rjmp	.+1362   	; 0x367e <SevSeg_voidMulBCD+0x5fe>
    312c:	8d ad       	ldd	r24, Y+61	; 0x3d
    312e:	8a 30       	cpi	r24, 0x0A	; 10
    3130:	0c f0       	brlt	.+2      	; 0x3134 <SevSeg_voidMulBCD+0xb4>
    3132:	a5 c2       	rjmp	.+1354   	; 0x367e <SevSeg_voidMulBCD+0x5fe>
    3134:	8d ad       	ldd	r24, Y+61	; 0x3d
    3136:	88 23       	and	r24, r24
    3138:	0c f4       	brge	.+2      	; 0x313c <SevSeg_voidMulBCD+0xbc>
    313a:	a1 c2       	rjmp	.+1346   	; 0x367e <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    313c:	de 01       	movw	r26, r28
    313e:	af 5b       	subi	r26, 0xBF	; 191
    3140:	bf 4f       	sbci	r27, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	e0 5c       	subi	r30, 0xC0	; 192
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	90 81       	ld	r25, Z
    314a:	8c 91       	ld	r24, X
    314c:	98 17       	cp	r25, r24
    314e:	0c f0       	brlt	.+2      	; 0x3152 <SevSeg_voidMulBCD+0xd2>
    3150:	98 c1       	rjmp	.+816    	; 0x3482 <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3152:	8f ad       	ldd	r24, Y+63	; 0x3f
    3154:	99 27       	eor	r25, r25
    3156:	87 fd       	sbrc	r24, 7
    3158:	90 95       	com	r25
    315a:	a9 2f       	mov	r26, r25
    315c:	b9 2f       	mov	r27, r25
    315e:	88 af       	std	Y+56, r24	; 0x38
    3160:	99 af       	std	Y+57, r25	; 0x39
    3162:	aa af       	std	Y+58, r26	; 0x3a
    3164:	bb af       	std	Y+59, r27	; 0x3b
    3166:	7b c1       	rjmp	.+758    	; 0x345e <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3168:	8e ad       	ldd	r24, Y+62	; 0x3e
    316a:	99 27       	eor	r25, r25
    316c:	87 fd       	sbrc	r24, 7
    316e:	90 95       	com	r25
    3170:	a9 2f       	mov	r26, r25
    3172:	b9 2f       	mov	r27, r25
    3174:	8c ab       	std	Y+52, r24	; 0x34
    3176:	9d ab       	std	Y+53, r25	; 0x35
    3178:	ae ab       	std	Y+54, r26	; 0x36
    317a:	bf ab       	std	Y+55, r27	; 0x37
    317c:	5a c1       	rjmp	.+692    	; 0x3432 <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    317e:	1f a6       	std	Y+47, r1	; 0x2f
    3180:	18 aa       	std	Y+48, r1	; 0x30
    3182:	19 aa       	std	Y+49, r1	; 0x31
    3184:	1a aa       	std	Y+50, r1	; 0x32
    3186:	1b c1       	rjmp	.+566    	; 0x33be <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    3188:	88 ad       	ldd	r24, Y+56	; 0x38
    318a:	99 ad       	ldd	r25, Y+57	; 0x39
    318c:	aa ad       	ldd	r26, Y+58	; 0x3a
    318e:	bb ad       	ldd	r27, Y+59	; 0x3b
    3190:	fc 01       	movw	r30, r24
    3192:	e3 58       	subi	r30, 0x83	; 131
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	90 81       	ld	r25, Z
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	69 2f       	mov	r22, r25
    319c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	66 e0       	ldi	r22, 0x06	; 6
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	65 e0       	ldi	r22, 0x05	; 5
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	a0 e2       	ldi	r26, 0x20	; 32
    31ba:	b1 e4       	ldi	r27, 0x41	; 65
    31bc:	8f a3       	std	Y+39, r24	; 0x27
    31be:	98 a7       	std	Y+40, r25	; 0x28
    31c0:	a9 a7       	std	Y+41, r26	; 0x29
    31c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c4:	6f a1       	ldd	r22, Y+39	; 0x27
    31c6:	78 a5       	ldd	r23, Y+40	; 0x28
    31c8:	89 a5       	ldd	r24, Y+41	; 0x29
    31ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	4a e7       	ldi	r20, 0x7A	; 122
    31d2:	55 e4       	ldi	r21, 0x45	; 69
    31d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	8b a3       	std	Y+35, r24	; 0x23
    31de:	9c a3       	std	Y+36, r25	; 0x24
    31e0:	ad a3       	std	Y+37, r26	; 0x25
    31e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31e4:	6b a1       	ldd	r22, Y+35	; 0x23
    31e6:	7c a1       	ldd	r23, Y+36	; 0x24
    31e8:	8d a1       	ldd	r24, Y+37	; 0x25
    31ea:	9e a1       	ldd	r25, Y+38	; 0x26
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e8       	ldi	r20, 0x80	; 128
    31f2:	5f e3       	ldi	r21, 0x3F	; 63
    31f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f8:	88 23       	and	r24, r24
    31fa:	2c f4       	brge	.+10     	; 0x3206 <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9a a3       	std	Y+34, r25	; 0x22
    3202:	89 a3       	std	Y+33, r24	; 0x21
    3204:	3f c0       	rjmp	.+126    	; 0x3284 <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    3206:	6b a1       	ldd	r22, Y+35	; 0x23
    3208:	7c a1       	ldd	r23, Y+36	; 0x24
    320a:	8d a1       	ldd	r24, Y+37	; 0x25
    320c:	9e a1       	ldd	r25, Y+38	; 0x26
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	57 e4       	ldi	r21, 0x47	; 71
    3216:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321a:	18 16       	cp	r1, r24
    321c:	4c f5       	brge	.+82     	; 0x3270 <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321e:	6f a1       	ldd	r22, Y+39	; 0x27
    3220:	78 a5       	ldd	r23, Y+40	; 0x28
    3222:	89 a5       	ldd	r24, Y+41	; 0x29
    3224:	9a a5       	ldd	r25, Y+42	; 0x2a
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e2       	ldi	r20, 0x20	; 32
    322c:	51 e4       	ldi	r21, 0x41	; 65
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9a a3       	std	Y+34, r25	; 0x22
    3244:	89 a3       	std	Y+33, r24	; 0x21
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <SevSeg_voidMulBCD+0x1e6>
    3248:	80 e9       	ldi	r24, 0x90	; 144
    324a:	91 e0       	ldi	r25, 0x01	; 1
    324c:	98 a3       	std	Y+32, r25	; 0x20
    324e:	8f 8f       	std	Y+31, r24	; 0x1f
    3250:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3252:	98 a1       	ldd	r25, Y+32	; 0x20
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <SevSeg_voidMulBCD+0x1d4>
    3258:	98 a3       	std	Y+32, r25	; 0x20
    325a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325c:	89 a1       	ldd	r24, Y+33	; 0x21
    325e:	9a a1       	ldd	r25, Y+34	; 0x22
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	9a a3       	std	Y+34, r25	; 0x22
    3264:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3266:	89 a1       	ldd	r24, Y+33	; 0x21
    3268:	9a a1       	ldd	r25, Y+34	; 0x22
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	69 f7       	brne	.-38     	; 0x3248 <SevSeg_voidMulBCD+0x1c8>
    326e:	14 c0       	rjmp	.+40     	; 0x3298 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3270:	6b a1       	ldd	r22, Y+35	; 0x23
    3272:	7c a1       	ldd	r23, Y+36	; 0x24
    3274:	8d a1       	ldd	r24, Y+37	; 0x25
    3276:	9e a1       	ldd	r25, Y+38	; 0x26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9a a3       	std	Y+34, r25	; 0x22
    3282:	89 a3       	std	Y+33, r24	; 0x21
    3284:	89 a1       	ldd	r24, Y+33	; 0x21
    3286:	9a a1       	ldd	r25, Y+34	; 0x22
    3288:	9e 8f       	std	Y+30, r25	; 0x1e
    328a:	8d 8f       	std	Y+29, r24	; 0x1d
    328c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <SevSeg_voidMulBCD+0x210>
    3294:	9e 8f       	std	Y+30, r25	; 0x1e
    3296:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    3298:	8c a9       	ldd	r24, Y+52	; 0x34
    329a:	9d a9       	ldd	r25, Y+53	; 0x35
    329c:	ae a9       	ldd	r26, Y+54	; 0x36
    329e:	bf a9       	ldd	r27, Y+55	; 0x37
    32a0:	fc 01       	movw	r30, r24
    32a2:	e3 58       	subi	r30, 0x83	; 131
    32a4:	fe 4f       	sbci	r31, 0xFE	; 254
    32a6:	90 81       	ld	r25, Z
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	69 2f       	mov	r22, r25
    32ac:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	66 e0       	ldi	r22, 0x06	; 6
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    32ba:	82 e0       	ldi	r24, 0x02	; 2
    32bc:	65 e0       	ldi	r22, 0x05	; 5
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	a0 e2       	ldi	r26, 0x20	; 32
    32ca:	b1 e4       	ldi	r27, 0x41	; 65
    32cc:	89 8f       	std	Y+25, r24	; 0x19
    32ce:	9a 8f       	std	Y+26, r25	; 0x1a
    32d0:	ab 8f       	std	Y+27, r26	; 0x1b
    32d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d4:	69 8d       	ldd	r22, Y+25	; 0x19
    32d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	4a e7       	ldi	r20, 0x7A	; 122
    32e2:	55 e4       	ldi	r21, 0x45	; 69
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8d 8b       	std	Y+21, r24	; 0x15
    32ee:	9e 8b       	std	Y+22, r25	; 0x16
    32f0:	af 8b       	std	Y+23, r26	; 0x17
    32f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32f4:	6d 89       	ldd	r22, Y+21	; 0x15
    32f6:	7e 89       	ldd	r23, Y+22	; 0x16
    32f8:	8f 89       	ldd	r24, Y+23	; 0x17
    32fa:	98 8d       	ldd	r25, Y+24	; 0x18
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e8       	ldi	r20, 0x80	; 128
    3302:	5f e3       	ldi	r21, 0x3F	; 63
    3304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3308:	88 23       	and	r24, r24
    330a:	2c f4       	brge	.+10     	; 0x3316 <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	9c 8b       	std	Y+20, r25	; 0x14
    3312:	8b 8b       	std	Y+19, r24	; 0x13
    3314:	3f c0       	rjmp	.+126    	; 0x3394 <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    3316:	6d 89       	ldd	r22, Y+21	; 0x15
    3318:	7e 89       	ldd	r23, Y+22	; 0x16
    331a:	8f 89       	ldd	r24, Y+23	; 0x17
    331c:	98 8d       	ldd	r25, Y+24	; 0x18
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	3f ef       	ldi	r19, 0xFF	; 255
    3322:	4f e7       	ldi	r20, 0x7F	; 127
    3324:	57 e4       	ldi	r21, 0x47	; 71
    3326:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    332a:	18 16       	cp	r1, r24
    332c:	4c f5       	brge	.+82     	; 0x3380 <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332e:	69 8d       	ldd	r22, Y+25	; 0x19
    3330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e2       	ldi	r20, 0x20	; 32
    333c:	51 e4       	ldi	r21, 0x41	; 65
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	bc 01       	movw	r22, r24
    3348:	cd 01       	movw	r24, r26
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	9c 8b       	std	Y+20, r25	; 0x14
    3354:	8b 8b       	std	Y+19, r24	; 0x13
    3356:	0f c0       	rjmp	.+30     	; 0x3376 <SevSeg_voidMulBCD+0x2f6>
    3358:	80 e9       	ldi	r24, 0x90	; 144
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	9a 8b       	std	Y+18, r25	; 0x12
    335e:	89 8b       	std	Y+17, r24	; 0x11
    3360:	89 89       	ldd	r24, Y+17	; 0x11
    3362:	9a 89       	ldd	r25, Y+18	; 0x12
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <SevSeg_voidMulBCD+0x2e4>
    3368:	9a 8b       	std	Y+18, r25	; 0x12
    336a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336c:	8b 89       	ldd	r24, Y+19	; 0x13
    336e:	9c 89       	ldd	r25, Y+20	; 0x14
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	9c 8b       	std	Y+20, r25	; 0x14
    3374:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3376:	8b 89       	ldd	r24, Y+19	; 0x13
    3378:	9c 89       	ldd	r25, Y+20	; 0x14
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	69 f7       	brne	.-38     	; 0x3358 <SevSeg_voidMulBCD+0x2d8>
    337e:	14 c0       	rjmp	.+40     	; 0x33a8 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3380:	6d 89       	ldd	r22, Y+21	; 0x15
    3382:	7e 89       	ldd	r23, Y+22	; 0x16
    3384:	8f 89       	ldd	r24, Y+23	; 0x17
    3386:	98 8d       	ldd	r25, Y+24	; 0x18
    3388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	9c 8b       	std	Y+20, r25	; 0x14
    3392:	8b 8b       	std	Y+19, r24	; 0x13
    3394:	8b 89       	ldd	r24, Y+19	; 0x13
    3396:	9c 89       	ldd	r25, Y+20	; 0x14
    3398:	98 8b       	std	Y+16, r25	; 0x10
    339a:	8f 87       	std	Y+15, r24	; 0x0f
    339c:	8f 85       	ldd	r24, Y+15	; 0x0f
    339e:	98 89       	ldd	r25, Y+16	; 0x10
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <SevSeg_voidMulBCD+0x320>
    33a4:	98 8b       	std	Y+16, r25	; 0x10
    33a6:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    33a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33aa:	98 a9       	ldd	r25, Y+48	; 0x30
    33ac:	a9 a9       	ldd	r26, Y+49	; 0x31
    33ae:	ba a9       	ldd	r27, Y+50	; 0x32
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	a1 1d       	adc	r26, r1
    33b4:	b1 1d       	adc	r27, r1
    33b6:	8f a7       	std	Y+47, r24	; 0x2f
    33b8:	98 ab       	std	Y+48, r25	; 0x30
    33ba:	a9 ab       	std	Y+49, r26	; 0x31
    33bc:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    33be:	2f a5       	ldd	r18, Y+47	; 0x2f
    33c0:	38 a9       	ldd	r19, Y+48	; 0x30
    33c2:	49 a9       	ldd	r20, Y+49	; 0x31
    33c4:	5a a9       	ldd	r21, Y+50	; 0x32
    33c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    33ca:	ad a5       	ldd	r26, Y+45	; 0x2d
    33cc:	be a5       	ldd	r27, Y+46	; 0x2e
    33ce:	28 17       	cp	r18, r24
    33d0:	39 07       	cpc	r19, r25
    33d2:	4a 07       	cpc	r20, r26
    33d4:	5b 07       	cpc	r21, r27
    33d6:	08 f4       	brcc	.+2      	; 0x33da <SevSeg_voidMulBCD+0x35a>
    33d8:	d7 ce       	rjmp	.-594    	; 0x3188 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    33da:	8c ad       	ldd	r24, Y+60	; 0x3c
    33dc:	28 2f       	mov	r18, r24
    33de:	33 27       	eor	r19, r19
    33e0:	27 fd       	sbrc	r18, 7
    33e2:	30 95       	com	r19
    33e4:	43 2f       	mov	r20, r19
    33e6:	53 2f       	mov	r21, r19
    33e8:	8c a9       	ldd	r24, Y+52	; 0x34
    33ea:	9d a9       	ldd	r25, Y+53	; 0x35
    33ec:	ae a9       	ldd	r26, Y+54	; 0x36
    33ee:	bf a9       	ldd	r27, Y+55	; 0x37
    33f0:	28 17       	cp	r18, r24
    33f2:	39 07       	cpc	r19, r25
    33f4:	4a 07       	cpc	r20, r26
    33f6:	5b 07       	cpc	r21, r27
    33f8:	89 f4       	brne	.+34     	; 0x341c <SevSeg_voidMulBCD+0x39c>
    33fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    33fc:	28 2f       	mov	r18, r24
    33fe:	33 27       	eor	r19, r19
    3400:	27 fd       	sbrc	r18, 7
    3402:	30 95       	com	r19
    3404:	43 2f       	mov	r20, r19
    3406:	53 2f       	mov	r21, r19
    3408:	88 ad       	ldd	r24, Y+56	; 0x38
    340a:	99 ad       	ldd	r25, Y+57	; 0x39
    340c:	aa ad       	ldd	r26, Y+58	; 0x3a
    340e:	bb ad       	ldd	r27, Y+59	; 0x3b
    3410:	28 17       	cp	r18, r24
    3412:	39 07       	cpc	r19, r25
    3414:	4a 07       	cpc	r20, r26
    3416:	5b 07       	cpc	r21, r27
    3418:	09 f4       	brne	.+2      	; 0x341c <SevSeg_voidMulBCD+0x39c>
    341a:	31 c1       	rjmp	.+610    	; 0x367e <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    341c:	8c a9       	ldd	r24, Y+52	; 0x34
    341e:	9d a9       	ldd	r25, Y+53	; 0x35
    3420:	ae a9       	ldd	r26, Y+54	; 0x36
    3422:	bf a9       	ldd	r27, Y+55	; 0x37
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	a1 1d       	adc	r26, r1
    3428:	b1 1d       	adc	r27, r1
    342a:	8c ab       	std	Y+52, r24	; 0x34
    342c:	9d ab       	std	Y+53, r25	; 0x35
    342e:	ae ab       	std	Y+54, r26	; 0x36
    3430:	bf ab       	std	Y+55, r27	; 0x37
    3432:	8c a9       	ldd	r24, Y+52	; 0x34
    3434:	9d a9       	ldd	r25, Y+53	; 0x35
    3436:	ae a9       	ldd	r26, Y+54	; 0x36
    3438:	bf a9       	ldd	r27, Y+55	; 0x37
    343a:	8a 30       	cpi	r24, 0x0A	; 10
    343c:	91 05       	cpc	r25, r1
    343e:	a1 05       	cpc	r26, r1
    3440:	b1 05       	cpc	r27, r1
    3442:	0c f4       	brge	.+2      	; 0x3446 <SevSeg_voidMulBCD+0x3c6>
    3444:	9c ce       	rjmp	.-712    	; 0x317e <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    3446:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3448:	88 ad       	ldd	r24, Y+56	; 0x38
    344a:	99 ad       	ldd	r25, Y+57	; 0x39
    344c:	aa ad       	ldd	r26, Y+58	; 0x3a
    344e:	bb ad       	ldd	r27, Y+59	; 0x3b
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	a1 1d       	adc	r26, r1
    3454:	b1 1d       	adc	r27, r1
    3456:	88 af       	std	Y+56, r24	; 0x38
    3458:	99 af       	std	Y+57, r25	; 0x39
    345a:	aa af       	std	Y+58, r26	; 0x3a
    345c:	bb af       	std	Y+59, r27	; 0x3b
    345e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3460:	28 2f       	mov	r18, r24
    3462:	33 27       	eor	r19, r19
    3464:	27 fd       	sbrc	r18, 7
    3466:	30 95       	com	r19
    3468:	43 2f       	mov	r20, r19
    346a:	53 2f       	mov	r21, r19
    346c:	88 ad       	ldd	r24, Y+56	; 0x38
    346e:	99 ad       	ldd	r25, Y+57	; 0x39
    3470:	aa ad       	ldd	r26, Y+58	; 0x3a
    3472:	bb ad       	ldd	r27, Y+59	; 0x3b
    3474:	28 17       	cp	r18, r24
    3476:	39 07       	cpc	r19, r25
    3478:	4a 07       	cpc	r20, r26
    347a:	5b 07       	cpc	r21, r27
    347c:	0c f0       	brlt	.+2      	; 0x3480 <SevSeg_voidMulBCD+0x400>
    347e:	74 ce       	rjmp	.-792    	; 0x3168 <SevSeg_voidMulBCD+0xe8>
    3480:	fe c0       	rjmp	.+508    	; 0x367e <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3482:	8f ad       	ldd	r24, Y+63	; 0x3f
    3484:	99 27       	eor	r25, r25
    3486:	87 fd       	sbrc	r24, 7
    3488:	90 95       	com	r25
    348a:	a9 2f       	mov	r26, r25
    348c:	b9 2f       	mov	r27, r25
    348e:	88 af       	std	Y+56, r24	; 0x38
    3490:	99 af       	std	Y+57, r25	; 0x39
    3492:	aa af       	std	Y+58, r26	; 0x3a
    3494:	bb af       	std	Y+59, r27	; 0x3b
    3496:	e2 c0       	rjmp	.+452    	; 0x365c <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    3498:	8b a9       	ldd	r24, Y+51	; 0x33
    349a:	8f 70       	andi	r24, 0x0F	; 15
    349c:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    349e:	88 ad       	ldd	r24, Y+56	; 0x38
    34a0:	99 ad       	ldd	r25, Y+57	; 0x39
    34a2:	aa ad       	ldd	r26, Y+58	; 0x3a
    34a4:	bb ad       	ldd	r27, Y+59	; 0x3b
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	aa 1f       	adc	r26, r26
    34ac:	bb 1f       	adc	r27, r27
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	aa 1f       	adc	r26, r26
    34b4:	bb 1f       	adc	r27, r27
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	aa 1f       	adc	r26, r26
    34bc:	bb 1f       	adc	r27, r27
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	aa 1f       	adc	r26, r26
    34c4:	bb 1f       	adc	r27, r27
    34c6:	98 2f       	mov	r25, r24
    34c8:	8b a9       	ldd	r24, Y+51	; 0x33
    34ca:	89 2b       	or	r24, r25
    34cc:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    34ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    34d0:	99 27       	eor	r25, r25
    34d2:	87 fd       	sbrc	r24, 7
    34d4:	90 95       	com	r25
    34d6:	a9 2f       	mov	r26, r25
    34d8:	b9 2f       	mov	r27, r25
    34da:	8c ab       	std	Y+52, r24	; 0x34
    34dc:	9d ab       	std	Y+53, r25	; 0x35
    34de:	ae ab       	std	Y+54, r26	; 0x36
    34e0:	bf ab       	std	Y+55, r27	; 0x37
    34e2:	a8 c0       	rjmp	.+336    	; 0x3634 <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    34e4:	8b a9       	ldd	r24, Y+51	; 0x33
    34e6:	80 7f       	andi	r24, 0xF0	; 240
    34e8:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    34ea:	9c a9       	ldd	r25, Y+52	; 0x34
    34ec:	8b a9       	ldd	r24, Y+51	; 0x33
    34ee:	89 2b       	or	r24, r25
    34f0:	8b ab       	std	Y+51, r24	; 0x33
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	a0 e2       	ldi	r26, 0x20	; 32
    34f8:	b1 e4       	ldi	r27, 0x41	; 65
    34fa:	8b 87       	std	Y+11, r24	; 0x0b
    34fc:	9c 87       	std	Y+12, r25	; 0x0c
    34fe:	ad 87       	std	Y+13, r26	; 0x0d
    3500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3502:	6b 85       	ldd	r22, Y+11	; 0x0b
    3504:	7c 85       	ldd	r23, Y+12	; 0x0c
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	4a e7       	ldi	r20, 0x7A	; 122
    3510:	55 e4       	ldi	r21, 0x45	; 69
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	8f 83       	std	Y+7, r24	; 0x07
    351c:	98 87       	std	Y+8, r25	; 0x08
    351e:	a9 87       	std	Y+9, r26	; 0x09
    3520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3522:	6f 81       	ldd	r22, Y+7	; 0x07
    3524:	78 85       	ldd	r23, Y+8	; 0x08
    3526:	89 85       	ldd	r24, Y+9	; 0x09
    3528:	9a 85       	ldd	r25, Y+10	; 0x0a
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	2c f4       	brge	.+10     	; 0x3544 <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
    3542:	3f c0       	rjmp	.+126    	; 0x35c2 <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    3544:	6f 81       	ldd	r22, Y+7	; 0x07
    3546:	78 85       	ldd	r23, Y+8	; 0x08
    3548:	89 85       	ldd	r24, Y+9	; 0x09
    354a:	9a 85       	ldd	r25, Y+10	; 0x0a
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3558:	18 16       	cp	r1, r24
    355a:	4c f5       	brge	.+82     	; 0x35ae <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355c:	6b 85       	ldd	r22, Y+11	; 0x0b
    355e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3560:	8d 85       	ldd	r24, Y+13	; 0x0d
    3562:	9e 85       	ldd	r25, Y+14	; 0x0e
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e2       	ldi	r20, 0x20	; 32
    356a:	51 e4       	ldi	r21, 0x41	; 65
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <SevSeg_voidMulBCD+0x524>
    3586:	80 e9       	ldi	r24, 0x90	; 144
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	9c 83       	std	Y+4, r25	; 0x04
    358c:	8b 83       	std	Y+3, r24	; 0x03
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <SevSeg_voidMulBCD+0x512>
    3596:	9c 83       	std	Y+4, r25	; 0x04
    3598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359a:	8d 81       	ldd	r24, Y+5	; 0x05
    359c:	9e 81       	ldd	r25, Y+6	; 0x06
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	9e 83       	std	Y+6, r25	; 0x06
    35a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a4:	8d 81       	ldd	r24, Y+5	; 0x05
    35a6:	9e 81       	ldd	r25, Y+6	; 0x06
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	69 f7       	brne	.-38     	; 0x3586 <SevSeg_voidMulBCD+0x506>
    35ac:	14 c0       	rjmp	.+40     	; 0x35d6 <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	6f 81       	ldd	r22, Y+7	; 0x07
    35b0:	78 85       	ldd	r23, Y+8	; 0x08
    35b2:	89 85       	ldd	r24, Y+9	; 0x09
    35b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	9a 81       	ldd	r25, Y+2	; 0x02
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <SevSeg_voidMulBCD+0x54e>
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	6b a9       	ldd	r22, Y+51	; 0x33
    35da:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    35de:	8c ad       	ldd	r24, Y+60	; 0x3c
    35e0:	28 2f       	mov	r18, r24
    35e2:	33 27       	eor	r19, r19
    35e4:	27 fd       	sbrc	r18, 7
    35e6:	30 95       	com	r19
    35e8:	43 2f       	mov	r20, r19
    35ea:	53 2f       	mov	r21, r19
    35ec:	8c a9       	ldd	r24, Y+52	; 0x34
    35ee:	9d a9       	ldd	r25, Y+53	; 0x35
    35f0:	ae a9       	ldd	r26, Y+54	; 0x36
    35f2:	bf a9       	ldd	r27, Y+55	; 0x37
    35f4:	28 17       	cp	r18, r24
    35f6:	39 07       	cpc	r19, r25
    35f8:	4a 07       	cpc	r20, r26
    35fa:	5b 07       	cpc	r21, r27
    35fc:	81 f4       	brne	.+32     	; 0x361e <SevSeg_voidMulBCD+0x59e>
    35fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3600:	28 2f       	mov	r18, r24
    3602:	33 27       	eor	r19, r19
    3604:	27 fd       	sbrc	r18, 7
    3606:	30 95       	com	r19
    3608:	43 2f       	mov	r20, r19
    360a:	53 2f       	mov	r21, r19
    360c:	88 ad       	ldd	r24, Y+56	; 0x38
    360e:	99 ad       	ldd	r25, Y+57	; 0x39
    3610:	aa ad       	ldd	r26, Y+58	; 0x3a
    3612:	bb ad       	ldd	r27, Y+59	; 0x3b
    3614:	28 17       	cp	r18, r24
    3616:	39 07       	cpc	r19, r25
    3618:	4a 07       	cpc	r20, r26
    361a:	5b 07       	cpc	r21, r27
    361c:	81 f1       	breq	.+96     	; 0x367e <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    361e:	8c a9       	ldd	r24, Y+52	; 0x34
    3620:	9d a9       	ldd	r25, Y+53	; 0x35
    3622:	ae a9       	ldd	r26, Y+54	; 0x36
    3624:	bf a9       	ldd	r27, Y+55	; 0x37
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	a1 09       	sbc	r26, r1
    362a:	b1 09       	sbc	r27, r1
    362c:	8c ab       	std	Y+52, r24	; 0x34
    362e:	9d ab       	std	Y+53, r25	; 0x35
    3630:	ae ab       	std	Y+54, r26	; 0x36
    3632:	bf ab       	std	Y+55, r27	; 0x37
    3634:	8c a9       	ldd	r24, Y+52	; 0x34
    3636:	9d a9       	ldd	r25, Y+53	; 0x35
    3638:	ae a9       	ldd	r26, Y+54	; 0x36
    363a:	bf a9       	ldd	r27, Y+55	; 0x37
    363c:	bb 23       	and	r27, r27
    363e:	0c f0       	brlt	.+2      	; 0x3642 <SevSeg_voidMulBCD+0x5c2>
    3640:	51 cf       	rjmp	.-350    	; 0x34e4 <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3642:	89 e0       	ldi	r24, 0x09	; 9
    3644:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3646:	88 ad       	ldd	r24, Y+56	; 0x38
    3648:	99 ad       	ldd	r25, Y+57	; 0x39
    364a:	aa ad       	ldd	r26, Y+58	; 0x3a
    364c:	bb ad       	ldd	r27, Y+59	; 0x3b
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	a1 09       	sbc	r26, r1
    3652:	b1 09       	sbc	r27, r1
    3654:	88 af       	std	Y+56, r24	; 0x38
    3656:	99 af       	std	Y+57, r25	; 0x39
    3658:	aa af       	std	Y+58, r26	; 0x3a
    365a:	bb af       	std	Y+59, r27	; 0x3b
    365c:	8d ad       	ldd	r24, Y+61	; 0x3d
    365e:	28 2f       	mov	r18, r24
    3660:	33 27       	eor	r19, r19
    3662:	27 fd       	sbrc	r18, 7
    3664:	30 95       	com	r19
    3666:	43 2f       	mov	r20, r19
    3668:	53 2f       	mov	r21, r19
    366a:	88 ad       	ldd	r24, Y+56	; 0x38
    366c:	99 ad       	ldd	r25, Y+57	; 0x39
    366e:	aa ad       	ldd	r26, Y+58	; 0x3a
    3670:	bb ad       	ldd	r27, Y+59	; 0x3b
    3672:	82 17       	cp	r24, r18
    3674:	93 07       	cpc	r25, r19
    3676:	a4 07       	cpc	r26, r20
    3678:	b5 07       	cpc	r27, r21
    367a:	0c f0       	brlt	.+2      	; 0x367e <SevSeg_voidMulBCD+0x5fe>
    367c:	0d cf       	rjmp	.-486    	; 0x3498 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    367e:	cf 5b       	subi	r28, 0xBF	; 191
    3680:	df 4f       	sbci	r29, 0xFF	; 255
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	cc 58       	subi	r28, 0x8C	; 140
    36a0:	d0 40       	sbci	r29, 0x00	; 0
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	fe 01       	movw	r30, r28
    36ae:	e7 57       	subi	r30, 0x77	; 119
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	ac e0       	ldi	r26, 0x0C	; 12
    36b8:	b2 e4       	ldi	r27, 0x42	; 66
    36ba:	80 83       	st	Z, r24
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	a2 83       	std	Z+2, r26	; 0x02
    36c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c2:	8e 01       	movw	r16, r28
    36c4:	0b 57       	subi	r16, 0x7B	; 123
    36c6:	1f 4f       	sbci	r17, 0xFF	; 255
    36c8:	fe 01       	movw	r30, r28
    36ca:	e7 57       	subi	r30, 0x77	; 119
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	60 81       	ld	r22, Z
    36d0:	71 81       	ldd	r23, Z+1	; 0x01
    36d2:	82 81       	ldd	r24, Z+2	; 0x02
    36d4:	93 81       	ldd	r25, Z+3	; 0x03
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	4a e7       	ldi	r20, 0x7A	; 122
    36dc:	55 e4       	ldi	r21, 0x45	; 69
    36de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	f8 01       	movw	r30, r16
    36e8:	80 83       	st	Z, r24
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	a2 83       	std	Z+2, r26	; 0x02
    36ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36f0:	fe 01       	movw	r30, r28
    36f2:	eb 57       	subi	r30, 0x7B	; 123
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	60 81       	ld	r22, Z
    36f8:	71 81       	ldd	r23, Z+1	; 0x01
    36fa:	82 81       	ldd	r24, Z+2	; 0x02
    36fc:	93 81       	ldd	r25, Z+3	; 0x03
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	5f e3       	ldi	r21, 0x3F	; 63
    3706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370a:	88 23       	and	r24, r24
    370c:	44 f4       	brge	.+16     	; 0x371e <LCD_voidInit+0x8c>
		__ticks = 1;
    370e:	fe 01       	movw	r30, r28
    3710:	ed 57       	subi	r30, 0x7D	; 125
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	91 83       	std	Z+1, r25	; 0x01
    371a:	80 83       	st	Z, r24
    371c:	64 c0       	rjmp	.+200    	; 0x37e6 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    371e:	fe 01       	movw	r30, r28
    3720:	eb 57       	subi	r30, 0x7B	; 123
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	60 81       	ld	r22, Z
    3726:	71 81       	ldd	r23, Z+1	; 0x01
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	3f ef       	ldi	r19, 0xFF	; 255
    3730:	4f e7       	ldi	r20, 0x7F	; 127
    3732:	57 e4       	ldi	r21, 0x47	; 71
    3734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3738:	18 16       	cp	r1, r24
    373a:	0c f0       	brlt	.+2      	; 0x373e <LCD_voidInit+0xac>
    373c:	43 c0       	rjmp	.+134    	; 0x37c4 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373e:	fe 01       	movw	r30, r28
    3740:	e7 57       	subi	r30, 0x77	; 119
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e2       	ldi	r20, 0x20	; 32
    3752:	51 e4       	ldi	r21, 0x41	; 65
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8e 01       	movw	r16, r28
    375e:	0d 57       	subi	r16, 0x7D	; 125
    3760:	1f 4f       	sbci	r17, 0xFF	; 255
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	f8 01       	movw	r30, r16
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	80 83       	st	Z, r24
    3774:	1f c0       	rjmp	.+62     	; 0x37b4 <LCD_voidInit+0x122>
    3776:	fe 01       	movw	r30, r28
    3778:	ef 57       	subi	r30, 0x7F	; 127
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 e9       	ldi	r24, 0x90	; 144
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	91 83       	std	Z+1, r25	; 0x01
    3782:	80 83       	st	Z, r24
    3784:	fe 01       	movw	r30, r28
    3786:	ef 57       	subi	r30, 0x7F	; 127
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 81       	ld	r24, Z
    378c:	91 81       	ldd	r25, Z+1	; 0x01
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <LCD_voidInit+0xfc>
    3792:	fe 01       	movw	r30, r28
    3794:	ef 57       	subi	r30, 0x7F	; 127
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	91 83       	std	Z+1, r25	; 0x01
    379a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379c:	de 01       	movw	r26, r28
    379e:	ad 57       	subi	r26, 0x7D	; 125
    37a0:	bf 4f       	sbci	r27, 0xFF	; 255
    37a2:	fe 01       	movw	r30, r28
    37a4:	ed 57       	subi	r30, 0x7D	; 125
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	11 96       	adiw	r26, 0x01	; 1
    37b0:	9c 93       	st	X, r25
    37b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b4:	fe 01       	movw	r30, r28
    37b6:	ed 57       	subi	r30, 0x7D	; 125
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	d1 f6       	brne	.-76     	; 0x3776 <LCD_voidInit+0xe4>
    37c2:	27 c0       	rjmp	.+78     	; 0x3812 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c4:	8e 01       	movw	r16, r28
    37c6:	0d 57       	subi	r16, 0x7D	; 125
    37c8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ca:	fe 01       	movw	r30, r28
    37cc:	eb 57       	subi	r30, 0x7B	; 123
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	60 81       	ld	r22, Z
    37d2:	71 81       	ldd	r23, Z+1	; 0x01
    37d4:	82 81       	ldd	r24, Z+2	; 0x02
    37d6:	93 81       	ldd	r25, Z+3	; 0x03
    37d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	f8 01       	movw	r30, r16
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
    37e6:	de 01       	movw	r26, r28
    37e8:	a1 58       	subi	r26, 0x81	; 129
    37ea:	bf 4f       	sbci	r27, 0xFF	; 255
    37ec:	fe 01       	movw	r30, r28
    37ee:	ed 57       	subi	r30, 0x7D	; 125
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	80 81       	ld	r24, Z
    37f4:	91 81       	ldd	r25, Z+1	; 0x01
    37f6:	8d 93       	st	X+, r24
    37f8:	9c 93       	st	X, r25
    37fa:	fe 01       	movw	r30, r28
    37fc:	e1 58       	subi	r30, 0x81	; 129
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <LCD_voidInit+0x172>
    3808:	fe 01       	movw	r30, r28
    380a:	e1 58       	subi	r30, 0x81	; 129
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3812:	80 e3       	ldi	r24, 0x30	; 48
    3814:	0e 94 39 22 	call	0x4472	; 0x4472 <LCD_voidSendInitCommand>
    3818:	fe 01       	movw	r30, r28
    381a:	e5 58       	subi	r30, 0x85	; 133
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	a0 ea       	ldi	r26, 0xA0	; 160
    3824:	b0 e4       	ldi	r27, 0x40	; 64
    3826:	80 83       	st	Z, r24
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	a2 83       	std	Z+2, r26	; 0x02
    382c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382e:	8e 01       	movw	r16, r28
    3830:	09 58       	subi	r16, 0x89	; 137
    3832:	1f 4f       	sbci	r17, 0xFF	; 255
    3834:	fe 01       	movw	r30, r28
    3836:	e5 58       	subi	r30, 0x85	; 133
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	60 81       	ld	r22, Z
    383c:	71 81       	ldd	r23, Z+1	; 0x01
    383e:	82 81       	ldd	r24, Z+2	; 0x02
    3840:	93 81       	ldd	r25, Z+3	; 0x03
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4a e7       	ldi	r20, 0x7A	; 122
    3848:	55 e4       	ldi	r21, 0x45	; 69
    384a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	f8 01       	movw	r30, r16
    3854:	80 83       	st	Z, r24
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	a2 83       	std	Z+2, r26	; 0x02
    385a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    385c:	fe 01       	movw	r30, r28
    385e:	e9 58       	subi	r30, 0x89	; 137
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	60 81       	ld	r22, Z
    3864:	71 81       	ldd	r23, Z+1	; 0x01
    3866:	82 81       	ldd	r24, Z+2	; 0x02
    3868:	93 81       	ldd	r25, Z+3	; 0x03
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e8       	ldi	r20, 0x80	; 128
    3870:	5f e3       	ldi	r21, 0x3F	; 63
    3872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3876:	88 23       	and	r24, r24
    3878:	44 f4       	brge	.+16     	; 0x388a <LCD_voidInit+0x1f8>
		__ticks = 1;
    387a:	fe 01       	movw	r30, r28
    387c:	eb 58       	subi	r30, 0x8B	; 139
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
    3888:	64 c0       	rjmp	.+200    	; 0x3952 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    388a:	fe 01       	movw	r30, r28
    388c:	e9 58       	subi	r30, 0x89	; 137
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	60 81       	ld	r22, Z
    3892:	71 81       	ldd	r23, Z+1	; 0x01
    3894:	82 81       	ldd	r24, Z+2	; 0x02
    3896:	93 81       	ldd	r25, Z+3	; 0x03
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	3f ef       	ldi	r19, 0xFF	; 255
    389c:	4f e7       	ldi	r20, 0x7F	; 127
    389e:	57 e4       	ldi	r21, 0x47	; 71
    38a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a4:	18 16       	cp	r1, r24
    38a6:	0c f0       	brlt	.+2      	; 0x38aa <LCD_voidInit+0x218>
    38a8:	43 c0       	rjmp	.+134    	; 0x3930 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38aa:	fe 01       	movw	r30, r28
    38ac:	e5 58       	subi	r30, 0x85	; 133
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	60 81       	ld	r22, Z
    38b2:	71 81       	ldd	r23, Z+1	; 0x01
    38b4:	82 81       	ldd	r24, Z+2	; 0x02
    38b6:	93 81       	ldd	r25, Z+3	; 0x03
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e2       	ldi	r20, 0x20	; 32
    38be:	51 e4       	ldi	r21, 0x41	; 65
    38c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	8e 01       	movw	r16, r28
    38ca:	0b 58       	subi	r16, 0x8B	; 139
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	bc 01       	movw	r22, r24
    38d0:	cd 01       	movw	r24, r26
    38d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	f8 01       	movw	r30, r16
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
    38e0:	1f c0       	rjmp	.+62     	; 0x3920 <LCD_voidInit+0x28e>
    38e2:	fe 01       	movw	r30, r28
    38e4:	ed 58       	subi	r30, 0x8D	; 141
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 e9       	ldi	r24, 0x90	; 144
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	91 83       	std	Z+1, r25	; 0x01
    38ee:	80 83       	st	Z, r24
    38f0:	fe 01       	movw	r30, r28
    38f2:	ed 58       	subi	r30, 0x8D	; 141
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	80 81       	ld	r24, Z
    38f8:	91 81       	ldd	r25, Z+1	; 0x01
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <LCD_voidInit+0x268>
    38fe:	fe 01       	movw	r30, r28
    3900:	ed 58       	subi	r30, 0x8D	; 141
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	91 83       	std	Z+1, r25	; 0x01
    3906:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3908:	de 01       	movw	r26, r28
    390a:	ab 58       	subi	r26, 0x8B	; 139
    390c:	bf 4f       	sbci	r27, 0xFF	; 255
    390e:	fe 01       	movw	r30, r28
    3910:	eb 58       	subi	r30, 0x8B	; 139
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	91 81       	ldd	r25, Z+1	; 0x01
    3918:	01 97       	sbiw	r24, 0x01	; 1
    391a:	11 96       	adiw	r26, 0x01	; 1
    391c:	9c 93       	st	X, r25
    391e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3920:	fe 01       	movw	r30, r28
    3922:	eb 58       	subi	r30, 0x8B	; 139
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 81       	ld	r24, Z
    3928:	91 81       	ldd	r25, Z+1	; 0x01
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	d1 f6       	brne	.-76     	; 0x38e2 <LCD_voidInit+0x250>
    392e:	27 c0       	rjmp	.+78     	; 0x397e <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3930:	8e 01       	movw	r16, r28
    3932:	0b 58       	subi	r16, 0x8B	; 139
    3934:	1f 4f       	sbci	r17, 0xFF	; 255
    3936:	fe 01       	movw	r30, r28
    3938:	e9 58       	subi	r30, 0x89	; 137
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	60 81       	ld	r22, Z
    393e:	71 81       	ldd	r23, Z+1	; 0x01
    3940:	82 81       	ldd	r24, Z+2	; 0x02
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	f8 01       	movw	r30, r16
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	de 01       	movw	r26, r28
    3954:	af 58       	subi	r26, 0x8F	; 143
    3956:	bf 4f       	sbci	r27, 0xFF	; 255
    3958:	fe 01       	movw	r30, r28
    395a:	eb 58       	subi	r30, 0x8B	; 139
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	80 81       	ld	r24, Z
    3960:	91 81       	ldd	r25, Z+1	; 0x01
    3962:	8d 93       	st	X+, r24
    3964:	9c 93       	st	X, r25
    3966:	fe 01       	movw	r30, r28
    3968:	ef 58       	subi	r30, 0x8F	; 143
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_voidInit+0x2de>
    3974:	fe 01       	movw	r30, r28
    3976:	ef 58       	subi	r30, 0x8F	; 143
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    397e:	80 e3       	ldi	r24, 0x30	; 48
    3980:	0e 94 39 22 	call	0x4472	; 0x4472 <LCD_voidSendInitCommand>
    3984:	fe 01       	movw	r30, r28
    3986:	e3 59       	subi	r30, 0x93	; 147
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e8       	ldi	r26, 0x80	; 128
    3990:	bf e3       	ldi	r27, 0x3F	; 63
    3992:	80 83       	st	Z, r24
    3994:	91 83       	std	Z+1, r25	; 0x01
    3996:	a2 83       	std	Z+2, r26	; 0x02
    3998:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	8e 01       	movw	r16, r28
    399c:	07 59       	subi	r16, 0x97	; 151
    399e:	1f 4f       	sbci	r17, 0xFF	; 255
    39a0:	fe 01       	movw	r30, r28
    39a2:	e3 59       	subi	r30, 0x93	; 147
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a e7       	ldi	r20, 0x7A	; 122
    39b4:	55 e4       	ldi	r21, 0x45	; 69
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	f8 01       	movw	r30, r16
    39c0:	80 83       	st	Z, r24
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	a2 83       	std	Z+2, r26	; 0x02
    39c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39c8:	fe 01       	movw	r30, r28
    39ca:	e7 59       	subi	r30, 0x97	; 151
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	60 81       	ld	r22, Z
    39d0:	71 81       	ldd	r23, Z+1	; 0x01
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	44 f4       	brge	.+16     	; 0x39f6 <LCD_voidInit+0x364>
		__ticks = 1;
    39e6:	fe 01       	movw	r30, r28
    39e8:	e9 59       	subi	r30, 0x99	; 153
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
    39f4:	64 c0       	rjmp	.+200    	; 0x3abe <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    39f6:	fe 01       	movw	r30, r28
    39f8:	e7 59       	subi	r30, 0x97	; 151
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	60 81       	ld	r22, Z
    39fe:	71 81       	ldd	r23, Z+1	; 0x01
    3a00:	82 81       	ldd	r24, Z+2	; 0x02
    3a02:	93 81       	ldd	r25, Z+3	; 0x03
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	3f ef       	ldi	r19, 0xFF	; 255
    3a08:	4f e7       	ldi	r20, 0x7F	; 127
    3a0a:	57 e4       	ldi	r21, 0x47	; 71
    3a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a10:	18 16       	cp	r1, r24
    3a12:	0c f0       	brlt	.+2      	; 0x3a16 <LCD_voidInit+0x384>
    3a14:	43 c0       	rjmp	.+134    	; 0x3a9c <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a16:	fe 01       	movw	r30, r28
    3a18:	e3 59       	subi	r30, 0x93	; 147
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e2       	ldi	r20, 0x20	; 32
    3a2a:	51 e4       	ldi	r21, 0x41	; 65
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	8e 01       	movw	r16, r28
    3a36:	09 59       	subi	r16, 0x99	; 153
    3a38:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3a:	bc 01       	movw	r22, r24
    3a3c:	cd 01       	movw	r24, r26
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	f8 01       	movw	r30, r16
    3a48:	91 83       	std	Z+1, r25	; 0x01
    3a4a:	80 83       	st	Z, r24
    3a4c:	1f c0       	rjmp	.+62     	; 0x3a8c <LCD_voidInit+0x3fa>
    3a4e:	fe 01       	movw	r30, r28
    3a50:	eb 59       	subi	r30, 0x9B	; 155
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 e9       	ldi	r24, 0x90	; 144
    3a56:	91 e0       	ldi	r25, 0x01	; 1
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	80 83       	st	Z, r24
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	eb 59       	subi	r30, 0x9B	; 155
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 81       	ld	r24, Z
    3a64:	91 81       	ldd	r25, Z+1	; 0x01
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <LCD_voidInit+0x3d4>
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	eb 59       	subi	r30, 0x9B	; 155
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a74:	de 01       	movw	r26, r28
    3a76:	a9 59       	subi	r26, 0x99	; 153
    3a78:	bf 4f       	sbci	r27, 0xFF	; 255
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e9 59       	subi	r30, 0x99	; 153
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 81       	ld	r24, Z
    3a82:	91 81       	ldd	r25, Z+1	; 0x01
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	11 96       	adiw	r26, 0x01	; 1
    3a88:	9c 93       	st	X, r25
    3a8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e9 59       	subi	r30, 0x99	; 153
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	d1 f6       	brne	.-76     	; 0x3a4e <LCD_voidInit+0x3bc>
    3a9a:	27 c0       	rjmp	.+78     	; 0x3aea <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9c:	8e 01       	movw	r16, r28
    3a9e:	09 59       	subi	r16, 0x99	; 153
    3aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e7 59       	subi	r30, 0x97	; 151
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	60 81       	ld	r22, Z
    3aaa:	71 81       	ldd	r23, Z+1	; 0x01
    3aac:	82 81       	ldd	r24, Z+2	; 0x02
    3aae:	93 81       	ldd	r25, Z+3	; 0x03
    3ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	f8 01       	movw	r30, r16
    3aba:	91 83       	std	Z+1, r25	; 0x01
    3abc:	80 83       	st	Z, r24
    3abe:	de 01       	movw	r26, r28
    3ac0:	ad 59       	subi	r26, 0x9D	; 157
    3ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e9 59       	subi	r30, 0x99	; 153
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	80 81       	ld	r24, Z
    3acc:	91 81       	ldd	r25, Z+1	; 0x01
    3ace:	8d 93       	st	X+, r24
    3ad0:	9c 93       	st	X, r25
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ed 59       	subi	r30, 0x9D	; 157
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	80 81       	ld	r24, Z
    3ada:	91 81       	ldd	r25, Z+1	; 0x01
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <LCD_voidInit+0x44a>
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	ed 59       	subi	r30, 0x9D	; 157
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3aea:	80 e3       	ldi	r24, 0x30	; 48
    3aec:	0e 94 39 22 	call	0x4472	; 0x4472 <LCD_voidSendInitCommand>
    3af0:	fe 01       	movw	r30, r28
    3af2:	e1 5a       	subi	r30, 0xA1	; 161
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	a0 e8       	ldi	r26, 0x80	; 128
    3afc:	bf e3       	ldi	r27, 0x3F	; 63
    3afe:	80 83       	st	Z, r24
    3b00:	91 83       	std	Z+1, r25	; 0x01
    3b02:	a2 83       	std	Z+2, r26	; 0x02
    3b04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b06:	8e 01       	movw	r16, r28
    3b08:	05 5a       	subi	r16, 0xA5	; 165
    3b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e1 5a       	subi	r30, 0xA1	; 161
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	93 81       	ldd	r25, Z+3	; 0x03
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	4a e7       	ldi	r20, 0x7A	; 122
    3b20:	55 e4       	ldi	r21, 0x45	; 69
    3b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	80 83       	st	Z, r24
    3b2e:	91 83       	std	Z+1, r25	; 0x01
    3b30:	a2 83       	std	Z+2, r26	; 0x02
    3b32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b34:	fe 01       	movw	r30, r28
    3b36:	e5 5a       	subi	r30, 0xA5	; 165
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	60 81       	ld	r22, Z
    3b3c:	71 81       	ldd	r23, Z+1	; 0x01
    3b3e:	82 81       	ldd	r24, Z+2	; 0x02
    3b40:	93 81       	ldd	r25, Z+3	; 0x03
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e8       	ldi	r20, 0x80	; 128
    3b48:	5f e3       	ldi	r21, 0x3F	; 63
    3b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b4e:	88 23       	and	r24, r24
    3b50:	44 f4       	brge	.+16     	; 0x3b62 <LCD_voidInit+0x4d0>
		__ticks = 1;
    3b52:	fe 01       	movw	r30, r28
    3b54:	e7 5a       	subi	r30, 0xA7	; 167
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	80 83       	st	Z, r24
    3b60:	64 c0       	rjmp	.+200    	; 0x3c2a <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    3b62:	fe 01       	movw	r30, r28
    3b64:	e5 5a       	subi	r30, 0xA5	; 165
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	93 81       	ldd	r25, Z+3	; 0x03
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	0c f0       	brlt	.+2      	; 0x3b82 <LCD_voidInit+0x4f0>
    3b80:	43 c0       	rjmp	.+134    	; 0x3c08 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b82:	fe 01       	movw	r30, r28
    3b84:	e1 5a       	subi	r30, 0xA1	; 161
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	60 81       	ld	r22, Z
    3b8a:	71 81       	ldd	r23, Z+1	; 0x01
    3b8c:	82 81       	ldd	r24, Z+2	; 0x02
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e2       	ldi	r20, 0x20	; 32
    3b96:	51 e4       	ldi	r21, 0x41	; 65
    3b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	8e 01       	movw	r16, r28
    3ba2:	07 5a       	subi	r16, 0xA7	; 167
    3ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	91 83       	std	Z+1, r25	; 0x01
    3bb6:	80 83       	st	Z, r24
    3bb8:	1f c0       	rjmp	.+62     	; 0x3bf8 <LCD_voidInit+0x566>
    3bba:	fe 01       	movw	r30, r28
    3bbc:	e9 5a       	subi	r30, 0xA9	; 169
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 e9       	ldi	r24, 0x90	; 144
    3bc2:	91 e0       	ldi	r25, 0x01	; 1
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	80 83       	st	Z, r24
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e9 5a       	subi	r30, 0xA9	; 169
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	80 81       	ld	r24, Z
    3bd0:	91 81       	ldd	r25, Z+1	; 0x01
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	f1 f7       	brne	.-4      	; 0x3bd2 <LCD_voidInit+0x540>
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e9 5a       	subi	r30, 0xA9	; 169
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be0:	de 01       	movw	r26, r28
    3be2:	a7 5a       	subi	r26, 0xA7	; 167
    3be4:	bf 4f       	sbci	r27, 0xFF	; 255
    3be6:	fe 01       	movw	r30, r28
    3be8:	e7 5a       	subi	r30, 0xA7	; 167
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 81       	ld	r24, Z
    3bee:	91 81       	ldd	r25, Z+1	; 0x01
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	11 96       	adiw	r26, 0x01	; 1
    3bf4:	9c 93       	st	X, r25
    3bf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e7 5a       	subi	r30, 0xA7	; 167
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	d1 f6       	brne	.-76     	; 0x3bba <LCD_voidInit+0x528>
    3c06:	27 c0       	rjmp	.+78     	; 0x3c56 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c08:	8e 01       	movw	r16, r28
    3c0a:	07 5a       	subi	r16, 0xA7	; 167
    3c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e5 5a       	subi	r30, 0xA5	; 165
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	60 81       	ld	r22, Z
    3c16:	71 81       	ldd	r23, Z+1	; 0x01
    3c18:	82 81       	ldd	r24, Z+2	; 0x02
    3c1a:	93 81       	ldd	r25, Z+3	; 0x03
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	f8 01       	movw	r30, r16
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
    3c2a:	de 01       	movw	r26, r28
    3c2c:	ab 5a       	subi	r26, 0xAB	; 171
    3c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	e7 5a       	subi	r30, 0xA7	; 167
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	8d 93       	st	X+, r24
    3c3c:	9c 93       	st	X, r25
    3c3e:	fe 01       	movw	r30, r28
    3c40:	eb 5a       	subi	r30, 0xAB	; 171
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <LCD_voidInit+0x5b6>
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	eb 5a       	subi	r30, 0xAB	; 171
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    3c56:	80 e2       	ldi	r24, 0x20	; 32
    3c58:	0e 94 39 22 	call	0x4472	; 0x4472 <LCD_voidSendInitCommand>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	ef 5a       	subi	r30, 0xAF	; 175
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	a0 e8       	ldi	r26, 0x80	; 128
    3c68:	bf e3       	ldi	r27, 0x3F	; 63
    3c6a:	80 83       	st	Z, r24
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	a2 83       	std	Z+2, r26	; 0x02
    3c70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c72:	8e 01       	movw	r16, r28
    3c74:	03 5b       	subi	r16, 0xB3	; 179
    3c76:	1f 4f       	sbci	r17, 0xFF	; 255
    3c78:	fe 01       	movw	r30, r28
    3c7a:	ef 5a       	subi	r30, 0xAF	; 175
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	60 81       	ld	r22, Z
    3c80:	71 81       	ldd	r23, Z+1	; 0x01
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	4a e7       	ldi	r20, 0x7A	; 122
    3c8c:	55 e4       	ldi	r21, 0x45	; 69
    3c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	f8 01       	movw	r30, r16
    3c98:	80 83       	st	Z, r24
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	a2 83       	std	Z+2, r26	; 0x02
    3c9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e3 5b       	subi	r30, 0xB3	; 179
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e8       	ldi	r20, 0x80	; 128
    3cb4:	5f e3       	ldi	r21, 0x3F	; 63
    3cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cba:	88 23       	and	r24, r24
    3cbc:	44 f4       	brge	.+16     	; 0x3cce <LCD_voidInit+0x63c>
		__ticks = 1;
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e5 5b       	subi	r30, 0xB5	; 181
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
    3ccc:	64 c0       	rjmp	.+200    	; 0x3d96 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    3cce:	fe 01       	movw	r30, r28
    3cd0:	e3 5b       	subi	r30, 0xB3	; 179
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	60 81       	ld	r22, Z
    3cd6:	71 81       	ldd	r23, Z+1	; 0x01
    3cd8:	82 81       	ldd	r24, Z+2	; 0x02
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	3f ef       	ldi	r19, 0xFF	; 255
    3ce0:	4f e7       	ldi	r20, 0x7F	; 127
    3ce2:	57 e4       	ldi	r21, 0x47	; 71
    3ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ce8:	18 16       	cp	r1, r24
    3cea:	0c f0       	brlt	.+2      	; 0x3cee <LCD_voidInit+0x65c>
    3cec:	43 c0       	rjmp	.+134    	; 0x3d74 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cee:	fe 01       	movw	r30, r28
    3cf0:	ef 5a       	subi	r30, 0xAF	; 175
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	60 81       	ld	r22, Z
    3cf6:	71 81       	ldd	r23, Z+1	; 0x01
    3cf8:	82 81       	ldd	r24, Z+2	; 0x02
    3cfa:	93 81       	ldd	r25, Z+3	; 0x03
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	40 e2       	ldi	r20, 0x20	; 32
    3d02:	51 e4       	ldi	r21, 0x41	; 65
    3d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	8e 01       	movw	r16, r28
    3d0e:	05 5b       	subi	r16, 0xB5	; 181
    3d10:	1f 4f       	sbci	r17, 0xFF	; 255
    3d12:	bc 01       	movw	r22, r24
    3d14:	cd 01       	movw	r24, r26
    3d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	f8 01       	movw	r30, r16
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	80 83       	st	Z, r24
    3d24:	1f c0       	rjmp	.+62     	; 0x3d64 <LCD_voidInit+0x6d2>
    3d26:	fe 01       	movw	r30, r28
    3d28:	e7 5b       	subi	r30, 0xB7	; 183
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	80 e9       	ldi	r24, 0x90	; 144
    3d2e:	91 e0       	ldi	r25, 0x01	; 1
    3d30:	91 83       	std	Z+1, r25	; 0x01
    3d32:	80 83       	st	Z, r24
    3d34:	fe 01       	movw	r30, r28
    3d36:	e7 5b       	subi	r30, 0xB7	; 183
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <LCD_voidInit+0x6ac>
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 5b       	subi	r30, 0xB7	; 183
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	91 83       	std	Z+1, r25	; 0x01
    3d4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d4c:	de 01       	movw	r26, r28
    3d4e:	a5 5b       	subi	r26, 0xB5	; 181
    3d50:	bf 4f       	sbci	r27, 0xFF	; 255
    3d52:	fe 01       	movw	r30, r28
    3d54:	e5 5b       	subi	r30, 0xB5	; 181
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	80 81       	ld	r24, Z
    3d5a:	91 81       	ldd	r25, Z+1	; 0x01
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	11 96       	adiw	r26, 0x01	; 1
    3d60:	9c 93       	st	X, r25
    3d62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d64:	fe 01       	movw	r30, r28
    3d66:	e5 5b       	subi	r30, 0xB5	; 181
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	00 97       	sbiw	r24, 0x00	; 0
    3d70:	d1 f6       	brne	.-76     	; 0x3d26 <LCD_voidInit+0x694>
    3d72:	27 c0       	rjmp	.+78     	; 0x3dc2 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d74:	8e 01       	movw	r16, r28
    3d76:	05 5b       	subi	r16, 0xB5	; 181
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e3 5b       	subi	r30, 0xB3	; 179
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	60 81       	ld	r22, Z
    3d82:	71 81       	ldd	r23, Z+1	; 0x01
    3d84:	82 81       	ldd	r24, Z+2	; 0x02
    3d86:	93 81       	ldd	r25, Z+3	; 0x03
    3d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	f8 01       	movw	r30, r16
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
    3d96:	de 01       	movw	r26, r28
    3d98:	a9 5b       	subi	r26, 0xB9	; 185
    3d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e5 5b       	subi	r30, 0xB5	; 181
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	80 81       	ld	r24, Z
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	8d 93       	st	X+, r24
    3da8:	9c 93       	st	X, r25
    3daa:	fe 01       	movw	r30, r28
    3dac:	e9 5b       	subi	r30, 0xB9	; 185
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	f1 f7       	brne	.-4      	; 0x3db4 <LCD_voidInit+0x722>
    3db8:	fe 01       	movw	r30, r28
    3dba:	e9 5b       	subi	r30, 0xB9	; 185
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    3dc2:	8c e2       	ldi	r24, 0x2C	; 44
    3dc4:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
    3dc8:	fe 01       	movw	r30, r28
    3dca:	ed 5b       	subi	r30, 0xBD	; 189
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	a0 e8       	ldi	r26, 0x80	; 128
    3dd4:	bf e3       	ldi	r27, 0x3F	; 63
    3dd6:	80 83       	st	Z, r24
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	a2 83       	std	Z+2, r26	; 0x02
    3ddc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dde:	8e 01       	movw	r16, r28
    3de0:	01 5c       	subi	r16, 0xC1	; 193
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    3de4:	fe 01       	movw	r30, r28
    3de6:	ed 5b       	subi	r30, 0xBD	; 189
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	4a e7       	ldi	r20, 0x7A	; 122
    3df8:	55 e4       	ldi	r21, 0x45	; 69
    3dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	f8 01       	movw	r30, r16
    3e04:	80 83       	st	Z, r24
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	a2 83       	std	Z+2, r26	; 0x02
    3e0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ff 96       	adiw	r30, 0x3f	; 63
    3e10:	60 81       	ld	r22, Z
    3e12:	71 81       	ldd	r23, Z+1	; 0x01
    3e14:	82 81       	ldd	r24, Z+2	; 0x02
    3e16:	93 81       	ldd	r25, Z+3	; 0x03
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e8       	ldi	r20, 0x80	; 128
    3e1e:	5f e3       	ldi	r21, 0x3F	; 63
    3e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e24:	88 23       	and	r24, r24
    3e26:	2c f4       	brge	.+10     	; 0x3e32 <LCD_voidInit+0x7a0>
		__ticks = 1;
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	9e af       	std	Y+62, r25	; 0x3e
    3e2e:	8d af       	std	Y+61, r24	; 0x3d
    3e30:	46 c0       	rjmp	.+140    	; 0x3ebe <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    3e32:	fe 01       	movw	r30, r28
    3e34:	ff 96       	adiw	r30, 0x3f	; 63
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	93 81       	ldd	r25, Z+3	; 0x03
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	3f ef       	ldi	r19, 0xFF	; 255
    3e42:	4f e7       	ldi	r20, 0x7F	; 127
    3e44:	57 e4       	ldi	r21, 0x47	; 71
    3e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e4a:	18 16       	cp	r1, r24
    3e4c:	64 f5       	brge	.+88     	; 0x3ea6 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e4e:	fe 01       	movw	r30, r28
    3e50:	ed 5b       	subi	r30, 0xBD	; 189
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	60 81       	ld	r22, Z
    3e56:	71 81       	ldd	r23, Z+1	; 0x01
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e2       	ldi	r20, 0x20	; 32
    3e62:	51 e4       	ldi	r21, 0x41	; 65
    3e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	9e af       	std	Y+62, r25	; 0x3e
    3e7a:	8d af       	std	Y+61, r24	; 0x3d
    3e7c:	0f c0       	rjmp	.+30     	; 0x3e9c <LCD_voidInit+0x80a>
    3e7e:	80 e9       	ldi	r24, 0x90	; 144
    3e80:	91 e0       	ldi	r25, 0x01	; 1
    3e82:	9c af       	std	Y+60, r25	; 0x3c
    3e84:	8b af       	std	Y+59, r24	; 0x3b
    3e86:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e88:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <LCD_voidInit+0x7f8>
    3e8e:	9c af       	std	Y+60, r25	; 0x3c
    3e90:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	9e af       	std	Y+62, r25	; 0x3e
    3e9a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	69 f7       	brne	.-38     	; 0x3e7e <LCD_voidInit+0x7ec>
    3ea4:	16 c0       	rjmp	.+44     	; 0x3ed2 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	ff 96       	adiw	r30, 0x3f	; 63
    3eaa:	60 81       	ld	r22, Z
    3eac:	71 81       	ldd	r23, Z+1	; 0x01
    3eae:	82 81       	ldd	r24, Z+2	; 0x02
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	9e af       	std	Y+62, r25	; 0x3e
    3ebc:	8d af       	std	Y+61, r24	; 0x3d
    3ebe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ec0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ec2:	9a af       	std	Y+58, r25	; 0x3a
    3ec4:	89 af       	std	Y+57, r24	; 0x39
    3ec6:	89 ad       	ldd	r24, Y+57	; 0x39
    3ec8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <LCD_voidInit+0x838>
    3ece:	9a af       	std	Y+58, r25	; 0x3a
    3ed0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    3ed2:	88 e0       	ldi	r24, 0x08	; 8
    3ed4:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	a0 e8       	ldi	r26, 0x80	; 128
    3ede:	bf e3       	ldi	r27, 0x3F	; 63
    3ee0:	8d ab       	std	Y+53, r24	; 0x35
    3ee2:	9e ab       	std	Y+54, r25	; 0x36
    3ee4:	af ab       	std	Y+55, r26	; 0x37
    3ee6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee8:	6d a9       	ldd	r22, Y+53	; 0x35
    3eea:	7e a9       	ldd	r23, Y+54	; 0x36
    3eec:	8f a9       	ldd	r24, Y+55	; 0x37
    3eee:	98 ad       	ldd	r25, Y+56	; 0x38
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	4a e7       	ldi	r20, 0x7A	; 122
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	89 ab       	std	Y+49, r24	; 0x31
    3f02:	9a ab       	std	Y+50, r25	; 0x32
    3f04:	ab ab       	std	Y+51, r26	; 0x33
    3f06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f08:	69 a9       	ldd	r22, Y+49	; 0x31
    3f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e8       	ldi	r20, 0x80	; 128
    3f16:	5f e3       	ldi	r21, 0x3F	; 63
    3f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f1c:	88 23       	and	r24, r24
    3f1e:	2c f4       	brge	.+10     	; 0x3f2a <LCD_voidInit+0x898>
		__ticks = 1;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	98 ab       	std	Y+48, r25	; 0x30
    3f26:	8f a7       	std	Y+47, r24	; 0x2f
    3f28:	3f c0       	rjmp	.+126    	; 0x3fa8 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    3f2a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f2c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f2e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f30:	9c a9       	ldd	r25, Y+52	; 0x34
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	3f ef       	ldi	r19, 0xFF	; 255
    3f36:	4f e7       	ldi	r20, 0x7F	; 127
    3f38:	57 e4       	ldi	r21, 0x47	; 71
    3f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f3e:	18 16       	cp	r1, r24
    3f40:	4c f5       	brge	.+82     	; 0x3f94 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f42:	6d a9       	ldd	r22, Y+53	; 0x35
    3f44:	7e a9       	ldd	r23, Y+54	; 0x36
    3f46:	8f a9       	ldd	r24, Y+55	; 0x37
    3f48:	98 ad       	ldd	r25, Y+56	; 0x38
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e2       	ldi	r20, 0x20	; 32
    3f50:	51 e4       	ldi	r21, 0x41	; 65
    3f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	98 ab       	std	Y+48, r25	; 0x30
    3f68:	8f a7       	std	Y+47, r24	; 0x2f
    3f6a:	0f c0       	rjmp	.+30     	; 0x3f8a <LCD_voidInit+0x8f8>
    3f6c:	80 e9       	ldi	r24, 0x90	; 144
    3f6e:	91 e0       	ldi	r25, 0x01	; 1
    3f70:	9e a7       	std	Y+46, r25	; 0x2e
    3f72:	8d a7       	std	Y+45, r24	; 0x2d
    3f74:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f76:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	f1 f7       	brne	.-4      	; 0x3f78 <LCD_voidInit+0x8e6>
    3f7c:	9e a7       	std	Y+46, r25	; 0x2e
    3f7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f82:	98 a9       	ldd	r25, Y+48	; 0x30
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	98 ab       	std	Y+48, r25	; 0x30
    3f88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	69 f7       	brne	.-38     	; 0x3f6c <LCD_voidInit+0x8da>
    3f92:	14 c0       	rjmp	.+40     	; 0x3fbc <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f94:	69 a9       	ldd	r22, Y+49	; 0x31
    3f96:	7a a9       	ldd	r23, Y+50	; 0x32
    3f98:	8b a9       	ldd	r24, Y+51	; 0x33
    3f9a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	98 ab       	std	Y+48, r25	; 0x30
    3fa6:	8f a7       	std	Y+47, r24	; 0x2f
    3fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3faa:	98 a9       	ldd	r25, Y+48	; 0x30
    3fac:	9c a7       	std	Y+44, r25	; 0x2c
    3fae:	8b a7       	std	Y+43, r24	; 0x2b
    3fb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <LCD_voidInit+0x922>
    3fb8:	9c a7       	std	Y+44, r25	; 0x2c
    3fba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	a0 ea       	ldi	r26, 0xA0	; 160
    3fc8:	b0 e4       	ldi	r27, 0x40	; 64
    3fca:	8f a3       	std	Y+39, r24	; 0x27
    3fcc:	98 a7       	std	Y+40, r25	; 0x28
    3fce:	a9 a7       	std	Y+41, r26	; 0x29
    3fd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    3fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    3fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    3fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	4a e7       	ldi	r20, 0x7A	; 122
    3fe0:	55 e4       	ldi	r21, 0x45	; 69
    3fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	8b a3       	std	Y+35, r24	; 0x23
    3fec:	9c a3       	std	Y+36, r25	; 0x24
    3fee:	ad a3       	std	Y+37, r26	; 0x25
    3ff0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	40 e8       	ldi	r20, 0x80	; 128
    4000:	5f e3       	ldi	r21, 0x3F	; 63
    4002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4006:	88 23       	and	r24, r24
    4008:	2c f4       	brge	.+10     	; 0x4014 <LCD_voidInit+0x982>
		__ticks = 1;
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	9a a3       	std	Y+34, r25	; 0x22
    4010:	89 a3       	std	Y+33, r24	; 0x21
    4012:	3f c0       	rjmp	.+126    	; 0x4092 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    4014:	6b a1       	ldd	r22, Y+35	; 0x23
    4016:	7c a1       	ldd	r23, Y+36	; 0x24
    4018:	8d a1       	ldd	r24, Y+37	; 0x25
    401a:	9e a1       	ldd	r25, Y+38	; 0x26
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	3f ef       	ldi	r19, 0xFF	; 255
    4020:	4f e7       	ldi	r20, 0x7F	; 127
    4022:	57 e4       	ldi	r21, 0x47	; 71
    4024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4028:	18 16       	cp	r1, r24
    402a:	4c f5       	brge	.+82     	; 0x407e <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402c:	6f a1       	ldd	r22, Y+39	; 0x27
    402e:	78 a5       	ldd	r23, Y+40	; 0x28
    4030:	89 a5       	ldd	r24, Y+41	; 0x29
    4032:	9a a5       	ldd	r25, Y+42	; 0x2a
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	40 e2       	ldi	r20, 0x20	; 32
    403a:	51 e4       	ldi	r21, 0x41	; 65
    403c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	bc 01       	movw	r22, r24
    4046:	cd 01       	movw	r24, r26
    4048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	9a a3       	std	Y+34, r25	; 0x22
    4052:	89 a3       	std	Y+33, r24	; 0x21
    4054:	0f c0       	rjmp	.+30     	; 0x4074 <LCD_voidInit+0x9e2>
    4056:	80 e9       	ldi	r24, 0x90	; 144
    4058:	91 e0       	ldi	r25, 0x01	; 1
    405a:	98 a3       	std	Y+32, r25	; 0x20
    405c:	8f 8f       	std	Y+31, r24	; 0x1f
    405e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4060:	98 a1       	ldd	r25, Y+32	; 0x20
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	f1 f7       	brne	.-4      	; 0x4062 <LCD_voidInit+0x9d0>
    4066:	98 a3       	std	Y+32, r25	; 0x20
    4068:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    406a:	89 a1       	ldd	r24, Y+33	; 0x21
    406c:	9a a1       	ldd	r25, Y+34	; 0x22
    406e:	01 97       	sbiw	r24, 0x01	; 1
    4070:	9a a3       	std	Y+34, r25	; 0x22
    4072:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4074:	89 a1       	ldd	r24, Y+33	; 0x21
    4076:	9a a1       	ldd	r25, Y+34	; 0x22
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	69 f7       	brne	.-38     	; 0x4056 <LCD_voidInit+0x9c4>
    407c:	14 c0       	rjmp	.+40     	; 0x40a6 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407e:	6b a1       	ldd	r22, Y+35	; 0x23
    4080:	7c a1       	ldd	r23, Y+36	; 0x24
    4082:	8d a1       	ldd	r24, Y+37	; 0x25
    4084:	9e a1       	ldd	r25, Y+38	; 0x26
    4086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408a:	dc 01       	movw	r26, r24
    408c:	cb 01       	movw	r24, r22
    408e:	9a a3       	std	Y+34, r25	; 0x22
    4090:	89 a3       	std	Y+33, r24	; 0x21
    4092:	89 a1       	ldd	r24, Y+33	; 0x21
    4094:	9a a1       	ldd	r25, Y+34	; 0x22
    4096:	9e 8f       	std	Y+30, r25	; 0x1e
    4098:	8d 8f       	std	Y+29, r24	; 0x1d
    409a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    409c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	f1 f7       	brne	.-4      	; 0x409e <LCD_voidInit+0xa0c>
    40a2:	9e 8f       	std	Y+30, r25	; 0x1e
    40a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    40a6:	8c e0       	ldi	r24, 0x0C	; 12
    40a8:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	a0 e8       	ldi	r26, 0x80	; 128
    40b2:	bf e3       	ldi	r27, 0x3F	; 63
    40b4:	89 8f       	std	Y+25, r24	; 0x19
    40b6:	9a 8f       	std	Y+26, r25	; 0x1a
    40b8:	ab 8f       	std	Y+27, r26	; 0x1b
    40ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40bc:	69 8d       	ldd	r22, Y+25	; 0x19
    40be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	4a e7       	ldi	r20, 0x7A	; 122
    40ca:	55 e4       	ldi	r21, 0x45	; 69
    40cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	8d 8b       	std	Y+21, r24	; 0x15
    40d6:	9e 8b       	std	Y+22, r25	; 0x16
    40d8:	af 8b       	std	Y+23, r26	; 0x17
    40da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40dc:	6d 89       	ldd	r22, Y+21	; 0x15
    40de:	7e 89       	ldd	r23, Y+22	; 0x16
    40e0:	8f 89       	ldd	r24, Y+23	; 0x17
    40e2:	98 8d       	ldd	r25, Y+24	; 0x18
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e8       	ldi	r20, 0x80	; 128
    40ea:	5f e3       	ldi	r21, 0x3F	; 63
    40ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40f0:	88 23       	and	r24, r24
    40f2:	2c f4       	brge	.+10     	; 0x40fe <LCD_voidInit+0xa6c>
		__ticks = 1;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	9c 8b       	std	Y+20, r25	; 0x14
    40fa:	8b 8b       	std	Y+19, r24	; 0x13
    40fc:	3f c0       	rjmp	.+126    	; 0x417c <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    40fe:	6d 89       	ldd	r22, Y+21	; 0x15
    4100:	7e 89       	ldd	r23, Y+22	; 0x16
    4102:	8f 89       	ldd	r24, Y+23	; 0x17
    4104:	98 8d       	ldd	r25, Y+24	; 0x18
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	3f ef       	ldi	r19, 0xFF	; 255
    410a:	4f e7       	ldi	r20, 0x7F	; 127
    410c:	57 e4       	ldi	r21, 0x47	; 71
    410e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4112:	18 16       	cp	r1, r24
    4114:	4c f5       	brge	.+82     	; 0x4168 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4116:	69 8d       	ldd	r22, Y+25	; 0x19
    4118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    411a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    411c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e2       	ldi	r20, 0x20	; 32
    4124:	51 e4       	ldi	r21, 0x41	; 65
    4126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	bc 01       	movw	r22, r24
    4130:	cd 01       	movw	r24, r26
    4132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	9c 8b       	std	Y+20, r25	; 0x14
    413c:	8b 8b       	std	Y+19, r24	; 0x13
    413e:	0f c0       	rjmp	.+30     	; 0x415e <LCD_voidInit+0xacc>
    4140:	80 e9       	ldi	r24, 0x90	; 144
    4142:	91 e0       	ldi	r25, 0x01	; 1
    4144:	9a 8b       	std	Y+18, r25	; 0x12
    4146:	89 8b       	std	Y+17, r24	; 0x11
    4148:	89 89       	ldd	r24, Y+17	; 0x11
    414a:	9a 89       	ldd	r25, Y+18	; 0x12
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	f1 f7       	brne	.-4      	; 0x414c <LCD_voidInit+0xaba>
    4150:	9a 8b       	std	Y+18, r25	; 0x12
    4152:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4154:	8b 89       	ldd	r24, Y+19	; 0x13
    4156:	9c 89       	ldd	r25, Y+20	; 0x14
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	9c 8b       	std	Y+20, r25	; 0x14
    415c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415e:	8b 89       	ldd	r24, Y+19	; 0x13
    4160:	9c 89       	ldd	r25, Y+20	; 0x14
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	69 f7       	brne	.-38     	; 0x4140 <LCD_voidInit+0xaae>
    4166:	14 c0       	rjmp	.+40     	; 0x4190 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4168:	6d 89       	ldd	r22, Y+21	; 0x15
    416a:	7e 89       	ldd	r23, Y+22	; 0x16
    416c:	8f 89       	ldd	r24, Y+23	; 0x17
    416e:	98 8d       	ldd	r25, Y+24	; 0x18
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	9c 8b       	std	Y+20, r25	; 0x14
    417a:	8b 8b       	std	Y+19, r24	; 0x13
    417c:	8b 89       	ldd	r24, Y+19	; 0x13
    417e:	9c 89       	ldd	r25, Y+20	; 0x14
    4180:	98 8b       	std	Y+16, r25	; 0x10
    4182:	8f 87       	std	Y+15, r24	; 0x0f
    4184:	8f 85       	ldd	r24, Y+15	; 0x0f
    4186:	98 89       	ldd	r25, Y+16	; 0x10
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	f1 f7       	brne	.-4      	; 0x4188 <LCD_voidInit+0xaf6>
    418c:	98 8b       	std	Y+16, r25	; 0x10
    418e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    4190:	86 e0       	ldi	r24, 0x06	; 6
    4192:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	a0 e8       	ldi	r26, 0x80	; 128
    419c:	bf e3       	ldi	r27, 0x3F	; 63
    419e:	8b 87       	std	Y+11, r24	; 0x0b
    41a0:	9c 87       	std	Y+12, r25	; 0x0c
    41a2:	ad 87       	std	Y+13, r26	; 0x0d
    41a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	4a e7       	ldi	r20, 0x7A	; 122
    41b4:	55 e4       	ldi	r21, 0x45	; 69
    41b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	8f 83       	std	Y+7, r24	; 0x07
    41c0:	98 87       	std	Y+8, r25	; 0x08
    41c2:	a9 87       	std	Y+9, r26	; 0x09
    41c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41c6:	6f 81       	ldd	r22, Y+7	; 0x07
    41c8:	78 85       	ldd	r23, Y+8	; 0x08
    41ca:	89 85       	ldd	r24, Y+9	; 0x09
    41cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	40 e8       	ldi	r20, 0x80	; 128
    41d4:	5f e3       	ldi	r21, 0x3F	; 63
    41d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41da:	88 23       	and	r24, r24
    41dc:	2c f4       	brge	.+10     	; 0x41e8 <LCD_voidInit+0xb56>
		__ticks = 1;
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	9e 83       	std	Y+6, r25	; 0x06
    41e4:	8d 83       	std	Y+5, r24	; 0x05
    41e6:	3f c0       	rjmp	.+126    	; 0x4266 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    41e8:	6f 81       	ldd	r22, Y+7	; 0x07
    41ea:	78 85       	ldd	r23, Y+8	; 0x08
    41ec:	89 85       	ldd	r24, Y+9	; 0x09
    41ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	3f ef       	ldi	r19, 0xFF	; 255
    41f4:	4f e7       	ldi	r20, 0x7F	; 127
    41f6:	57 e4       	ldi	r21, 0x47	; 71
    41f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41fc:	18 16       	cp	r1, r24
    41fe:	4c f5       	brge	.+82     	; 0x4252 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4200:	6b 85       	ldd	r22, Y+11	; 0x0b
    4202:	7c 85       	ldd	r23, Y+12	; 0x0c
    4204:	8d 85       	ldd	r24, Y+13	; 0x0d
    4206:	9e 85       	ldd	r25, Y+14	; 0x0e
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	40 e2       	ldi	r20, 0x20	; 32
    420e:	51 e4       	ldi	r21, 0x41	; 65
    4210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	9e 83       	std	Y+6, r25	; 0x06
    4226:	8d 83       	std	Y+5, r24	; 0x05
    4228:	0f c0       	rjmp	.+30     	; 0x4248 <LCD_voidInit+0xbb6>
    422a:	80 e9       	ldi	r24, 0x90	; 144
    422c:	91 e0       	ldi	r25, 0x01	; 1
    422e:	9c 83       	std	Y+4, r25	; 0x04
    4230:	8b 83       	std	Y+3, r24	; 0x03
    4232:	8b 81       	ldd	r24, Y+3	; 0x03
    4234:	9c 81       	ldd	r25, Y+4	; 0x04
    4236:	01 97       	sbiw	r24, 0x01	; 1
    4238:	f1 f7       	brne	.-4      	; 0x4236 <LCD_voidInit+0xba4>
    423a:	9c 83       	std	Y+4, r25	; 0x04
    423c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423e:	8d 81       	ldd	r24, Y+5	; 0x05
    4240:	9e 81       	ldd	r25, Y+6	; 0x06
    4242:	01 97       	sbiw	r24, 0x01	; 1
    4244:	9e 83       	std	Y+6, r25	; 0x06
    4246:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4248:	8d 81       	ldd	r24, Y+5	; 0x05
    424a:	9e 81       	ldd	r25, Y+6	; 0x06
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	69 f7       	brne	.-38     	; 0x422a <LCD_voidInit+0xb98>
    4250:	14 c0       	rjmp	.+40     	; 0x427a <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4252:	6f 81       	ldd	r22, Y+7	; 0x07
    4254:	78 85       	ldd	r23, Y+8	; 0x08
    4256:	89 85       	ldd	r24, Y+9	; 0x09
    4258:	9a 85       	ldd	r25, Y+10	; 0x0a
    425a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	9e 83       	std	Y+6, r25	; 0x06
    4264:	8d 83       	std	Y+5, r24	; 0x05
    4266:	8d 81       	ldd	r24, Y+5	; 0x05
    4268:	9e 81       	ldd	r25, Y+6	; 0x06
    426a:	9a 83       	std	Y+2, r25	; 0x02
    426c:	89 83       	std	Y+1, r24	; 0x01
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	9a 81       	ldd	r25, Y+2	; 0x02
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <LCD_voidInit+0xbe0>
    4276:	9a 83       	std	Y+2, r25	; 0x02
    4278:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    427a:	c4 57       	subi	r28, 0x74	; 116
    427c:	df 4f       	sbci	r29, 0xFF	; 255
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	cf 91       	pop	r28
    428a:	df 91       	pop	r29
    428c:	1f 91       	pop	r17
    428e:	0f 91       	pop	r16
    4290:	08 95       	ret

00004292 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    4292:	df 93       	push	r29
    4294:	cf 93       	push	r28
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	2f 97       	sbiw	r28, 0x0f	; 15
    429c:	0f b6       	in	r0, 0x3f	; 63
    429e:	f8 94       	cli
    42a0:	de bf       	out	0x3e, r29	; 62
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	cd bf       	out	0x3d, r28	; 61
    42a6:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	63 e0       	ldi	r22, 0x03	; 3
    42ac:	40 e0       	ldi	r20, 0x00	; 0
    42ae:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	64 e0       	ldi	r22, 0x04	; 4
    42b6:	41 e0       	ldi	r20, 0x01	; 1
    42b8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    42bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42be:	82 95       	swap	r24
    42c0:	8f 70       	andi	r24, 0x0F	; 15
    42c2:	98 2f       	mov	r25, r24
    42c4:	91 70       	andi	r25, 0x01	; 1
    42c6:	83 e0       	ldi	r24, 0x03	; 3
    42c8:	60 e0       	ldi	r22, 0x00	; 0
    42ca:	49 2f       	mov	r20, r25
    42cc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    42d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d2:	82 95       	swap	r24
    42d4:	86 95       	lsr	r24
    42d6:	87 70       	andi	r24, 0x07	; 7
    42d8:	98 2f       	mov	r25, r24
    42da:	91 70       	andi	r25, 0x01	; 1
    42dc:	83 e0       	ldi	r24, 0x03	; 3
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	49 2f       	mov	r20, r25
    42e2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    42e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e8:	82 95       	swap	r24
    42ea:	86 95       	lsr	r24
    42ec:	86 95       	lsr	r24
    42ee:	83 70       	andi	r24, 0x03	; 3
    42f0:	98 2f       	mov	r25, r24
    42f2:	91 70       	andi	r25, 0x01	; 1
    42f4:	83 e0       	ldi	r24, 0x03	; 3
    42f6:	62 e0       	ldi	r22, 0x02	; 2
    42f8:	49 2f       	mov	r20, r25
    42fa:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    42fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4300:	98 2f       	mov	r25, r24
    4302:	99 1f       	adc	r25, r25
    4304:	99 27       	eor	r25, r25
    4306:	99 1f       	adc	r25, r25
    4308:	83 e0       	ldi	r24, 0x03	; 3
    430a:	63 e0       	ldi	r22, 0x03	; 3
    430c:	49 2f       	mov	r20, r25
    430e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	64 e0       	ldi	r22, 0x04	; 4
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	64 e0       	ldi	r22, 0x04	; 4
    4320:	41 e0       	ldi	r20, 0x01	; 1
    4322:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    4326:	8f 85       	ldd	r24, Y+15	; 0x0f
    4328:	98 2f       	mov	r25, r24
    432a:	91 70       	andi	r25, 0x01	; 1
    432c:	83 e0       	ldi	r24, 0x03	; 3
    432e:	60 e0       	ldi	r22, 0x00	; 0
    4330:	49 2f       	mov	r20, r25
    4332:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    4336:	8f 85       	ldd	r24, Y+15	; 0x0f
    4338:	86 95       	lsr	r24
    433a:	98 2f       	mov	r25, r24
    433c:	91 70       	andi	r25, 0x01	; 1
    433e:	83 e0       	ldi	r24, 0x03	; 3
    4340:	61 e0       	ldi	r22, 0x01	; 1
    4342:	49 2f       	mov	r20, r25
    4344:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    4348:	8f 85       	ldd	r24, Y+15	; 0x0f
    434a:	86 95       	lsr	r24
    434c:	86 95       	lsr	r24
    434e:	98 2f       	mov	r25, r24
    4350:	91 70       	andi	r25, 0x01	; 1
    4352:	83 e0       	ldi	r24, 0x03	; 3
    4354:	62 e0       	ldi	r22, 0x02	; 2
    4356:	49 2f       	mov	r20, r25
    4358:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    435c:	8f 85       	ldd	r24, Y+15	; 0x0f
    435e:	86 95       	lsr	r24
    4360:	86 95       	lsr	r24
    4362:	86 95       	lsr	r24
    4364:	98 2f       	mov	r25, r24
    4366:	91 70       	andi	r25, 0x01	; 1
    4368:	83 e0       	ldi	r24, 0x03	; 3
    436a:	63 e0       	ldi	r22, 0x03	; 3
    436c:	49 2f       	mov	r20, r25
    436e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	64 e0       	ldi	r22, 0x04	; 4
    4376:	40 e0       	ldi	r20, 0x00	; 0
    4378:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	a0 ea       	ldi	r26, 0xA0	; 160
    4382:	b0 e4       	ldi	r27, 0x40	; 64
    4384:	8b 87       	std	Y+11, r24	; 0x0b
    4386:	9c 87       	std	Y+12, r25	; 0x0c
    4388:	ad 87       	std	Y+13, r26	; 0x0d
    438a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438c:	6b 85       	ldd	r22, Y+11	; 0x0b
    438e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4390:	8d 85       	ldd	r24, Y+13	; 0x0d
    4392:	9e 85       	ldd	r25, Y+14	; 0x0e
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	4a e7       	ldi	r20, 0x7A	; 122
    439a:	55 e4       	ldi	r21, 0x45	; 69
    439c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	8f 83       	std	Y+7, r24	; 0x07
    43a6:	98 87       	std	Y+8, r25	; 0x08
    43a8:	a9 87       	std	Y+9, r26	; 0x09
    43aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43ac:	6f 81       	ldd	r22, Y+7	; 0x07
    43ae:	78 85       	ldd	r23, Y+8	; 0x08
    43b0:	89 85       	ldd	r24, Y+9	; 0x09
    43b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e8       	ldi	r20, 0x80	; 128
    43ba:	5f e3       	ldi	r21, 0x3F	; 63
    43bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43c0:	88 23       	and	r24, r24
    43c2:	2c f4       	brge	.+10     	; 0x43ce <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	9e 83       	std	Y+6, r25	; 0x06
    43ca:	8d 83       	std	Y+5, r24	; 0x05
    43cc:	3f c0       	rjmp	.+126    	; 0x444c <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    43ce:	6f 81       	ldd	r22, Y+7	; 0x07
    43d0:	78 85       	ldd	r23, Y+8	; 0x08
    43d2:	89 85       	ldd	r24, Y+9	; 0x09
    43d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	3f ef       	ldi	r19, 0xFF	; 255
    43da:	4f e7       	ldi	r20, 0x7F	; 127
    43dc:	57 e4       	ldi	r21, 0x47	; 71
    43de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43e2:	18 16       	cp	r1, r24
    43e4:	4c f5       	brge	.+82     	; 0x4438 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	40 e2       	ldi	r20, 0x20	; 32
    43f4:	51 e4       	ldi	r21, 0x41	; 65
    43f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	9e 83       	std	Y+6, r25	; 0x06
    440c:	8d 83       	std	Y+5, r24	; 0x05
    440e:	0f c0       	rjmp	.+30     	; 0x442e <LCD_voidSendCommand+0x19c>
    4410:	80 e9       	ldi	r24, 0x90	; 144
    4412:	91 e0       	ldi	r25, 0x01	; 1
    4414:	9c 83       	std	Y+4, r25	; 0x04
    4416:	8b 83       	std	Y+3, r24	; 0x03
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	9c 81       	ldd	r25, Y+4	; 0x04
    441c:	01 97       	sbiw	r24, 0x01	; 1
    441e:	f1 f7       	brne	.-4      	; 0x441c <LCD_voidSendCommand+0x18a>
    4420:	9c 83       	std	Y+4, r25	; 0x04
    4422:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4424:	8d 81       	ldd	r24, Y+5	; 0x05
    4426:	9e 81       	ldd	r25, Y+6	; 0x06
    4428:	01 97       	sbiw	r24, 0x01	; 1
    442a:	9e 83       	std	Y+6, r25	; 0x06
    442c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    442e:	8d 81       	ldd	r24, Y+5	; 0x05
    4430:	9e 81       	ldd	r25, Y+6	; 0x06
    4432:	00 97       	sbiw	r24, 0x00	; 0
    4434:	69 f7       	brne	.-38     	; 0x4410 <LCD_voidSendCommand+0x17e>
    4436:	14 c0       	rjmp	.+40     	; 0x4460 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4438:	6f 81       	ldd	r22, Y+7	; 0x07
    443a:	78 85       	ldd	r23, Y+8	; 0x08
    443c:	89 85       	ldd	r24, Y+9	; 0x09
    443e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	9e 83       	std	Y+6, r25	; 0x06
    444a:	8d 83       	std	Y+5, r24	; 0x05
    444c:	8d 81       	ldd	r24, Y+5	; 0x05
    444e:	9e 81       	ldd	r25, Y+6	; 0x06
    4450:	9a 83       	std	Y+2, r25	; 0x02
    4452:	89 83       	std	Y+1, r24	; 0x01
    4454:	89 81       	ldd	r24, Y+1	; 0x01
    4456:	9a 81       	ldd	r25, Y+2	; 0x02
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <LCD_voidSendCommand+0x1c6>
    445c:	9a 83       	std	Y+2, r25	; 0x02
    445e:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    4460:	2f 96       	adiw	r28, 0x0f	; 15
    4462:	0f b6       	in	r0, 0x3f	; 63
    4464:	f8 94       	cli
    4466:	de bf       	out	0x3e, r29	; 62
    4468:	0f be       	out	0x3f, r0	; 63
    446a:	cd bf       	out	0x3d, r28	; 61
    446c:	cf 91       	pop	r28
    446e:	df 91       	pop	r29
    4470:	08 95       	ret

00004472 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    4472:	df 93       	push	r29
    4474:	cf 93       	push	r28
    4476:	cd b7       	in	r28, 0x3d	; 61
    4478:	de b7       	in	r29, 0x3e	; 62
    447a:	2f 97       	sbiw	r28, 0x0f	; 15
    447c:	0f b6       	in	r0, 0x3f	; 63
    447e:	f8 94       	cli
    4480:	de bf       	out	0x3e, r29	; 62
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	cd bf       	out	0x3d, r28	; 61
    4486:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	63 e0       	ldi	r22, 0x03	; 3
    448c:	40 e0       	ldi	r20, 0x00	; 0
    448e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	64 e0       	ldi	r22, 0x04	; 4
    4496:	41 e0       	ldi	r20, 0x01	; 1
    4498:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    449c:	8f 85       	ldd	r24, Y+15	; 0x0f
    449e:	82 95       	swap	r24
    44a0:	8f 70       	andi	r24, 0x0F	; 15
    44a2:	98 2f       	mov	r25, r24
    44a4:	91 70       	andi	r25, 0x01	; 1
    44a6:	83 e0       	ldi	r24, 0x03	; 3
    44a8:	60 e0       	ldi	r22, 0x00	; 0
    44aa:	49 2f       	mov	r20, r25
    44ac:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    44b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b2:	82 95       	swap	r24
    44b4:	86 95       	lsr	r24
    44b6:	87 70       	andi	r24, 0x07	; 7
    44b8:	98 2f       	mov	r25, r24
    44ba:	91 70       	andi	r25, 0x01	; 1
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	61 e0       	ldi	r22, 0x01	; 1
    44c0:	49 2f       	mov	r20, r25
    44c2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    44c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    44c8:	82 95       	swap	r24
    44ca:	86 95       	lsr	r24
    44cc:	86 95       	lsr	r24
    44ce:	83 70       	andi	r24, 0x03	; 3
    44d0:	98 2f       	mov	r25, r24
    44d2:	91 70       	andi	r25, 0x01	; 1
    44d4:	83 e0       	ldi	r24, 0x03	; 3
    44d6:	62 e0       	ldi	r22, 0x02	; 2
    44d8:	49 2f       	mov	r20, r25
    44da:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    44de:	8f 85       	ldd	r24, Y+15	; 0x0f
    44e0:	98 2f       	mov	r25, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	99 27       	eor	r25, r25
    44e6:	99 1f       	adc	r25, r25
    44e8:	83 e0       	ldi	r24, 0x03	; 3
    44ea:	63 e0       	ldi	r22, 0x03	; 3
    44ec:	49 2f       	mov	r20, r25
    44ee:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	64 e0       	ldi	r22, 0x04	; 4
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	a0 ea       	ldi	r26, 0xA0	; 160
    4502:	b0 e4       	ldi	r27, 0x40	; 64
    4504:	8b 87       	std	Y+11, r24	; 0x0b
    4506:	9c 87       	std	Y+12, r25	; 0x0c
    4508:	ad 87       	std	Y+13, r26	; 0x0d
    450a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    450c:	6b 85       	ldd	r22, Y+11	; 0x0b
    450e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4510:	8d 85       	ldd	r24, Y+13	; 0x0d
    4512:	9e 85       	ldd	r25, Y+14	; 0x0e
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	4a e7       	ldi	r20, 0x7A	; 122
    451a:	55 e4       	ldi	r21, 0x45	; 69
    451c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	8f 83       	std	Y+7, r24	; 0x07
    4526:	98 87       	std	Y+8, r25	; 0x08
    4528:	a9 87       	std	Y+9, r26	; 0x09
    452a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    452c:	6f 81       	ldd	r22, Y+7	; 0x07
    452e:	78 85       	ldd	r23, Y+8	; 0x08
    4530:	89 85       	ldd	r24, Y+9	; 0x09
    4532:	9a 85       	ldd	r25, Y+10	; 0x0a
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	40 e8       	ldi	r20, 0x80	; 128
    453a:	5f e3       	ldi	r21, 0x3F	; 63
    453c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4540:	88 23       	and	r24, r24
    4542:	2c f4       	brge	.+10     	; 0x454e <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	9e 83       	std	Y+6, r25	; 0x06
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	3f c0       	rjmp	.+126    	; 0x45cc <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    454e:	6f 81       	ldd	r22, Y+7	; 0x07
    4550:	78 85       	ldd	r23, Y+8	; 0x08
    4552:	89 85       	ldd	r24, Y+9	; 0x09
    4554:	9a 85       	ldd	r25, Y+10	; 0x0a
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	3f ef       	ldi	r19, 0xFF	; 255
    455a:	4f e7       	ldi	r20, 0x7F	; 127
    455c:	57 e4       	ldi	r21, 0x47	; 71
    455e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4562:	18 16       	cp	r1, r24
    4564:	4c f5       	brge	.+82     	; 0x45b8 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4566:	6b 85       	ldd	r22, Y+11	; 0x0b
    4568:	7c 85       	ldd	r23, Y+12	; 0x0c
    456a:	8d 85       	ldd	r24, Y+13	; 0x0d
    456c:	9e 85       	ldd	r25, Y+14	; 0x0e
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	40 e2       	ldi	r20, 0x20	; 32
    4574:	51 e4       	ldi	r21, 0x41	; 65
    4576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	bc 01       	movw	r22, r24
    4580:	cd 01       	movw	r24, r26
    4582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	9e 83       	std	Y+6, r25	; 0x06
    458c:	8d 83       	std	Y+5, r24	; 0x05
    458e:	0f c0       	rjmp	.+30     	; 0x45ae <LCD_voidSendInitCommand+0x13c>
    4590:	80 e9       	ldi	r24, 0x90	; 144
    4592:	91 e0       	ldi	r25, 0x01	; 1
    4594:	9c 83       	std	Y+4, r25	; 0x04
    4596:	8b 83       	std	Y+3, r24	; 0x03
    4598:	8b 81       	ldd	r24, Y+3	; 0x03
    459a:	9c 81       	ldd	r25, Y+4	; 0x04
    459c:	01 97       	sbiw	r24, 0x01	; 1
    459e:	f1 f7       	brne	.-4      	; 0x459c <LCD_voidSendInitCommand+0x12a>
    45a0:	9c 83       	std	Y+4, r25	; 0x04
    45a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a4:	8d 81       	ldd	r24, Y+5	; 0x05
    45a6:	9e 81       	ldd	r25, Y+6	; 0x06
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	9e 83       	std	Y+6, r25	; 0x06
    45ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ae:	8d 81       	ldd	r24, Y+5	; 0x05
    45b0:	9e 81       	ldd	r25, Y+6	; 0x06
    45b2:	00 97       	sbiw	r24, 0x00	; 0
    45b4:	69 f7       	brne	.-38     	; 0x4590 <LCD_voidSendInitCommand+0x11e>
    45b6:	14 c0       	rjmp	.+40     	; 0x45e0 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ba:	78 85       	ldd	r23, Y+8	; 0x08
    45bc:	89 85       	ldd	r24, Y+9	; 0x09
    45be:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	9e 83       	std	Y+6, r25	; 0x06
    45ca:	8d 83       	std	Y+5, r24	; 0x05
    45cc:	8d 81       	ldd	r24, Y+5	; 0x05
    45ce:	9e 81       	ldd	r25, Y+6	; 0x06
    45d0:	9a 83       	std	Y+2, r25	; 0x02
    45d2:	89 83       	std	Y+1, r24	; 0x01
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	9a 81       	ldd	r25, Y+2	; 0x02
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <LCD_voidSendInitCommand+0x166>
    45dc:	9a 83       	std	Y+2, r25	; 0x02
    45de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    45e0:	2f 96       	adiw	r28, 0x0f	; 15
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	cf 91       	pop	r28
    45ee:	df 91       	pop	r29
    45f0:	08 95       	ret

000045f2 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    45f2:	df 93       	push	r29
    45f4:	cf 93       	push	r28
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	2f 97       	sbiw	r28, 0x0f	; 15
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	f8 94       	cli
    4600:	de bf       	out	0x3e, r29	; 62
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	63 e0       	ldi	r22, 0x03	; 3
    460c:	41 e0       	ldi	r20, 0x01	; 1
    460e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	64 e0       	ldi	r22, 0x04	; 4
    4616:	41 e0       	ldi	r20, 0x01	; 1
    4618:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    461c:	8f 85       	ldd	r24, Y+15	; 0x0f
    461e:	82 95       	swap	r24
    4620:	8f 70       	andi	r24, 0x0F	; 15
    4622:	98 2f       	mov	r25, r24
    4624:	91 70       	andi	r25, 0x01	; 1
    4626:	83 e0       	ldi	r24, 0x03	; 3
    4628:	60 e0       	ldi	r22, 0x00	; 0
    462a:	49 2f       	mov	r20, r25
    462c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    4630:	8f 85       	ldd	r24, Y+15	; 0x0f
    4632:	82 95       	swap	r24
    4634:	86 95       	lsr	r24
    4636:	87 70       	andi	r24, 0x07	; 7
    4638:	98 2f       	mov	r25, r24
    463a:	91 70       	andi	r25, 0x01	; 1
    463c:	83 e0       	ldi	r24, 0x03	; 3
    463e:	61 e0       	ldi	r22, 0x01	; 1
    4640:	49 2f       	mov	r20, r25
    4642:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    4646:	8f 85       	ldd	r24, Y+15	; 0x0f
    4648:	82 95       	swap	r24
    464a:	86 95       	lsr	r24
    464c:	86 95       	lsr	r24
    464e:	83 70       	andi	r24, 0x03	; 3
    4650:	98 2f       	mov	r25, r24
    4652:	91 70       	andi	r25, 0x01	; 1
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	62 e0       	ldi	r22, 0x02	; 2
    4658:	49 2f       	mov	r20, r25
    465a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    465e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4660:	98 2f       	mov	r25, r24
    4662:	99 1f       	adc	r25, r25
    4664:	99 27       	eor	r25, r25
    4666:	99 1f       	adc	r25, r25
    4668:	83 e0       	ldi	r24, 0x03	; 3
    466a:	63 e0       	ldi	r22, 0x03	; 3
    466c:	49 2f       	mov	r20, r25
    466e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	64 e0       	ldi	r22, 0x04	; 4
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	64 e0       	ldi	r22, 0x04	; 4
    4680:	41 e0       	ldi	r20, 0x01	; 1
    4682:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    4686:	8f 85       	ldd	r24, Y+15	; 0x0f
    4688:	98 2f       	mov	r25, r24
    468a:	91 70       	andi	r25, 0x01	; 1
    468c:	83 e0       	ldi	r24, 0x03	; 3
    468e:	60 e0       	ldi	r22, 0x00	; 0
    4690:	49 2f       	mov	r20, r25
    4692:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    4696:	8f 85       	ldd	r24, Y+15	; 0x0f
    4698:	86 95       	lsr	r24
    469a:	98 2f       	mov	r25, r24
    469c:	91 70       	andi	r25, 0x01	; 1
    469e:	83 e0       	ldi	r24, 0x03	; 3
    46a0:	61 e0       	ldi	r22, 0x01	; 1
    46a2:	49 2f       	mov	r20, r25
    46a4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    46a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    46aa:	86 95       	lsr	r24
    46ac:	86 95       	lsr	r24
    46ae:	98 2f       	mov	r25, r24
    46b0:	91 70       	andi	r25, 0x01	; 1
    46b2:	83 e0       	ldi	r24, 0x03	; 3
    46b4:	62 e0       	ldi	r22, 0x02	; 2
    46b6:	49 2f       	mov	r20, r25
    46b8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    46bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    46be:	86 95       	lsr	r24
    46c0:	86 95       	lsr	r24
    46c2:	86 95       	lsr	r24
    46c4:	98 2f       	mov	r25, r24
    46c6:	91 70       	andi	r25, 0x01	; 1
    46c8:	83 e0       	ldi	r24, 0x03	; 3
    46ca:	63 e0       	ldi	r22, 0x03	; 3
    46cc:	49 2f       	mov	r20, r25
    46ce:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	64 e0       	ldi	r22, 0x04	; 4
    46d6:	40 e0       	ldi	r20, 0x00	; 0
    46d8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	a0 ea       	ldi	r26, 0xA0	; 160
    46e2:	b0 e4       	ldi	r27, 0x40	; 64
    46e4:	8b 87       	std	Y+11, r24	; 0x0b
    46e6:	9c 87       	std	Y+12, r25	; 0x0c
    46e8:	ad 87       	std	Y+13, r26	; 0x0d
    46ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    46ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    46f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	4a e7       	ldi	r20, 0x7A	; 122
    46fa:	55 e4       	ldi	r21, 0x45	; 69
    46fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4700:	dc 01       	movw	r26, r24
    4702:	cb 01       	movw	r24, r22
    4704:	8f 83       	std	Y+7, r24	; 0x07
    4706:	98 87       	std	Y+8, r25	; 0x08
    4708:	a9 87       	std	Y+9, r26	; 0x09
    470a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    470c:	6f 81       	ldd	r22, Y+7	; 0x07
    470e:	78 85       	ldd	r23, Y+8	; 0x08
    4710:	89 85       	ldd	r24, Y+9	; 0x09
    4712:	9a 85       	ldd	r25, Y+10	; 0x0a
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e8       	ldi	r20, 0x80	; 128
    471a:	5f e3       	ldi	r21, 0x3F	; 63
    471c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4720:	88 23       	and	r24, r24
    4722:	2c f4       	brge	.+10     	; 0x472e <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	9e 83       	std	Y+6, r25	; 0x06
    472a:	8d 83       	std	Y+5, r24	; 0x05
    472c:	3f c0       	rjmp	.+126    	; 0x47ac <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    472e:	6f 81       	ldd	r22, Y+7	; 0x07
    4730:	78 85       	ldd	r23, Y+8	; 0x08
    4732:	89 85       	ldd	r24, Y+9	; 0x09
    4734:	9a 85       	ldd	r25, Y+10	; 0x0a
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	3f ef       	ldi	r19, 0xFF	; 255
    473a:	4f e7       	ldi	r20, 0x7F	; 127
    473c:	57 e4       	ldi	r21, 0x47	; 71
    473e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4742:	18 16       	cp	r1, r24
    4744:	4c f5       	brge	.+82     	; 0x4798 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4746:	6b 85       	ldd	r22, Y+11	; 0x0b
    4748:	7c 85       	ldd	r23, Y+12	; 0x0c
    474a:	8d 85       	ldd	r24, Y+13	; 0x0d
    474c:	9e 85       	ldd	r25, Y+14	; 0x0e
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	40 e2       	ldi	r20, 0x20	; 32
    4754:	51 e4       	ldi	r21, 0x41	; 65
    4756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	bc 01       	movw	r22, r24
    4760:	cd 01       	movw	r24, r26
    4762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9e 83       	std	Y+6, r25	; 0x06
    476c:	8d 83       	std	Y+5, r24	; 0x05
    476e:	0f c0       	rjmp	.+30     	; 0x478e <LCD_voidWriteChar+0x19c>
    4770:	80 e9       	ldi	r24, 0x90	; 144
    4772:	91 e0       	ldi	r25, 0x01	; 1
    4774:	9c 83       	std	Y+4, r25	; 0x04
    4776:	8b 83       	std	Y+3, r24	; 0x03
    4778:	8b 81       	ldd	r24, Y+3	; 0x03
    477a:	9c 81       	ldd	r25, Y+4	; 0x04
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	f1 f7       	brne	.-4      	; 0x477c <LCD_voidWriteChar+0x18a>
    4780:	9c 83       	std	Y+4, r25	; 0x04
    4782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4784:	8d 81       	ldd	r24, Y+5	; 0x05
    4786:	9e 81       	ldd	r25, Y+6	; 0x06
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	9e 83       	std	Y+6, r25	; 0x06
    478c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    478e:	8d 81       	ldd	r24, Y+5	; 0x05
    4790:	9e 81       	ldd	r25, Y+6	; 0x06
    4792:	00 97       	sbiw	r24, 0x00	; 0
    4794:	69 f7       	brne	.-38     	; 0x4770 <LCD_voidWriteChar+0x17e>
    4796:	14 c0       	rjmp	.+40     	; 0x47c0 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4798:	6f 81       	ldd	r22, Y+7	; 0x07
    479a:	78 85       	ldd	r23, Y+8	; 0x08
    479c:	89 85       	ldd	r24, Y+9	; 0x09
    479e:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	9e 83       	std	Y+6, r25	; 0x06
    47aa:	8d 83       	std	Y+5, r24	; 0x05
    47ac:	8d 81       	ldd	r24, Y+5	; 0x05
    47ae:	9e 81       	ldd	r25, Y+6	; 0x06
    47b0:	9a 83       	std	Y+2, r25	; 0x02
    47b2:	89 83       	std	Y+1, r24	; 0x01
    47b4:	89 81       	ldd	r24, Y+1	; 0x01
    47b6:	9a 81       	ldd	r25, Y+2	; 0x02
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	f1 f7       	brne	.-4      	; 0x47b8 <LCD_voidWriteChar+0x1c6>
    47bc:	9a 83       	std	Y+2, r25	; 0x02
    47be:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    47c0:	2f 96       	adiw	r28, 0x0f	; 15
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	cf 91       	pop	r28
    47ce:	df 91       	pop	r29
    47d0:	08 95       	ret

000047d2 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    47d2:	df 93       	push	r29
    47d4:	cf 93       	push	r28
    47d6:	00 d0       	rcall	.+0      	; 0x47d8 <LCD_voidWriteString+0x6>
    47d8:	0f 92       	push	r0
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	9b 83       	std	Y+3, r25	; 0x03
    47e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    47e2:	19 82       	std	Y+1, r1	; 0x01
    47e4:	0e c0       	rjmp	.+28     	; 0x4802 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	28 2f       	mov	r18, r24
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	8a 81       	ldd	r24, Y+2	; 0x02
    47ee:	9b 81       	ldd	r25, Y+3	; 0x03
    47f0:	fc 01       	movw	r30, r24
    47f2:	e2 0f       	add	r30, r18
    47f4:	f3 1f       	adc	r31, r19
    47f6:	80 81       	ld	r24, Z
    47f8:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
		index++;
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	8f 5f       	subi	r24, 0xFF	; 255
    4800:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    4802:	89 81       	ldd	r24, Y+1	; 0x01
    4804:	28 2f       	mov	r18, r24
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	8a 81       	ldd	r24, Y+2	; 0x02
    480a:	9b 81       	ldd	r25, Y+3	; 0x03
    480c:	fc 01       	movw	r30, r24
    480e:	e2 0f       	add	r30, r18
    4810:	f3 1f       	adc	r31, r19
    4812:	80 81       	ld	r24, Z
    4814:	88 23       	and	r24, r24
    4816:	39 f7       	brne	.-50     	; 0x47e6 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	cf 91       	pop	r28
    4820:	df 91       	pop	r29
    4822:	08 95       	ret

00004824 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    4824:	0f 93       	push	r16
    4826:	1f 93       	push	r17
    4828:	df 93       	push	r29
    482a:	cf 93       	push	r28
    482c:	cd b7       	in	r28, 0x3d	; 61
    482e:	de b7       	in	r29, 0x3e	; 62
    4830:	2e 97       	sbiw	r28, 0x0e	; 14
    4832:	0f b6       	in	r0, 0x3f	; 63
    4834:	f8 94       	cli
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	cd bf       	out	0x3d, r28	; 61
    483c:	69 87       	std	Y+9, r22	; 0x09
    483e:	7a 87       	std	Y+10, r23	; 0x0a
    4840:	8b 87       	std	Y+11, r24	; 0x0b
    4842:	9c 87       	std	Y+12, r25	; 0x0c
    4844:	5e 87       	std	Y+14, r21	; 0x0e
    4846:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    4848:	1d 82       	std	Y+5, r1	; 0x05
    484a:	1e 82       	std	Y+6, r1	; 0x06
    484c:	1f 82       	std	Y+7, r1	; 0x07
    484e:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    4850:	83 e1       	ldi	r24, 0x13	; 19
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	a0 e0       	ldi	r26, 0x00	; 0
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	89 83       	std	Y+1, r24	; 0x01
    485a:	9a 83       	std	Y+2, r25	; 0x02
    485c:	ab 83       	std	Y+3, r26	; 0x03
    485e:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    4860:	29 81       	ldd	r18, Y+1	; 0x01
    4862:	3a 81       	ldd	r19, Y+2	; 0x02
    4864:	8d 85       	ldd	r24, Y+13	; 0x0d
    4866:	9e 85       	ldd	r25, Y+14	; 0x0e
    4868:	fc 01       	movw	r30, r24
    486a:	e2 0f       	add	r30, r18
    486c:	f3 1f       	adc	r31, r19
    486e:	10 82       	st	Z, r1
    4870:	89 81       	ldd	r24, Y+1	; 0x01
    4872:	9a 81       	ldd	r25, Y+2	; 0x02
    4874:	ab 81       	ldd	r26, Y+3	; 0x03
    4876:	bc 81       	ldd	r27, Y+4	; 0x04
    4878:	01 97       	sbiw	r24, 0x01	; 1
    487a:	a1 09       	sbc	r26, r1
    487c:	b1 09       	sbc	r27, r1
    487e:	89 83       	std	Y+1, r24	; 0x01
    4880:	9a 83       	std	Y+2, r25	; 0x02
    4882:	ab 83       	std	Y+3, r26	; 0x03
    4884:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    4886:	89 85       	ldd	r24, Y+9	; 0x09
    4888:	9a 85       	ldd	r25, Y+10	; 0x0a
    488a:	ab 85       	ldd	r26, Y+11	; 0x0b
    488c:	bc 85       	ldd	r27, Y+12	; 0x0c
    488e:	bb 23       	and	r27, r27
    4890:	0c f0       	brlt	.+2      	; 0x4894 <IntToString+0x70>
    4892:	4d c0       	rjmp	.+154    	; 0x492e <IntToString+0x10a>
		flag = 1;
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	a0 e0       	ldi	r26, 0x00	; 0
    489a:	b0 e0       	ldi	r27, 0x00	; 0
    489c:	8d 83       	std	Y+5, r24	; 0x05
    489e:	9e 83       	std	Y+6, r25	; 0x06
    48a0:	af 83       	std	Y+7, r26	; 0x07
    48a2:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    48a4:	89 85       	ldd	r24, Y+9	; 0x09
    48a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a8:	ab 85       	ldd	r26, Y+11	; 0x0b
    48aa:	bc 85       	ldd	r27, Y+12	; 0x0c
    48ac:	b0 95       	com	r27
    48ae:	a0 95       	com	r26
    48b0:	90 95       	com	r25
    48b2:	81 95       	neg	r24
    48b4:	9f 4f       	sbci	r25, 0xFF	; 255
    48b6:	af 4f       	sbci	r26, 0xFF	; 255
    48b8:	bf 4f       	sbci	r27, 0xFF	; 255
    48ba:	89 87       	std	Y+9, r24	; 0x09
    48bc:	9a 87       	std	Y+10, r25	; 0x0a
    48be:	ab 87       	std	Y+11, r26	; 0x0b
    48c0:	bc 87       	std	Y+12, r27	; 0x0c
    48c2:	35 c0       	rjmp	.+106    	; 0x492e <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    48c4:	29 81       	ldd	r18, Y+1	; 0x01
    48c6:	3a 81       	ldd	r19, Y+2	; 0x02
    48c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    48cc:	8c 01       	movw	r16, r24
    48ce:	02 0f       	add	r16, r18
    48d0:	13 1f       	adc	r17, r19
    48d2:	89 85       	ldd	r24, Y+9	; 0x09
    48d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    48d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    48da:	2a e0       	ldi	r18, 0x0A	; 10
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	40 e0       	ldi	r20, 0x00	; 0
    48e0:	50 e0       	ldi	r21, 0x00	; 0
    48e2:	bc 01       	movw	r22, r24
    48e4:	cd 01       	movw	r24, r26
    48e6:	0e 94 2e 29 	call	0x525c	; 0x525c <__divmodsi4>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	80 5d       	subi	r24, 0xD0	; 208
    48f0:	f8 01       	movw	r30, r16
    48f2:	80 83       	st	Z, r24
    48f4:	89 81       	ldd	r24, Y+1	; 0x01
    48f6:	9a 81       	ldd	r25, Y+2	; 0x02
    48f8:	ab 81       	ldd	r26, Y+3	; 0x03
    48fa:	bc 81       	ldd	r27, Y+4	; 0x04
    48fc:	01 97       	sbiw	r24, 0x01	; 1
    48fe:	a1 09       	sbc	r26, r1
    4900:	b1 09       	sbc	r27, r1
    4902:	89 83       	std	Y+1, r24	; 0x01
    4904:	9a 83       	std	Y+2, r25	; 0x02
    4906:	ab 83       	std	Y+3, r26	; 0x03
    4908:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    490a:	89 85       	ldd	r24, Y+9	; 0x09
    490c:	9a 85       	ldd	r25, Y+10	; 0x0a
    490e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4910:	bc 85       	ldd	r27, Y+12	; 0x0c
    4912:	2a e0       	ldi	r18, 0x0A	; 10
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e0       	ldi	r20, 0x00	; 0
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	bc 01       	movw	r22, r24
    491c:	cd 01       	movw	r24, r26
    491e:	0e 94 2e 29 	call	0x525c	; 0x525c <__divmodsi4>
    4922:	da 01       	movw	r26, r20
    4924:	c9 01       	movw	r24, r18
    4926:	89 87       	std	Y+9, r24	; 0x09
    4928:	9a 87       	std	Y+10, r25	; 0x0a
    492a:	ab 87       	std	Y+11, r26	; 0x0b
    492c:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    492e:	89 85       	ldd	r24, Y+9	; 0x09
    4930:	9a 85       	ldd	r25, Y+10	; 0x0a
    4932:	ab 85       	ldd	r26, Y+11	; 0x0b
    4934:	bc 85       	ldd	r27, Y+12	; 0x0c
    4936:	00 97       	sbiw	r24, 0x00	; 0
    4938:	a1 05       	cpc	r26, r1
    493a:	b1 05       	cpc	r27, r1
    493c:	19 f6       	brne	.-122    	; 0x48c4 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    493e:	8d 81       	ldd	r24, Y+5	; 0x05
    4940:	9e 81       	ldd	r25, Y+6	; 0x06
    4942:	af 81       	ldd	r26, Y+7	; 0x07
    4944:	b8 85       	ldd	r27, Y+8	; 0x08
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	a1 05       	cpc	r26, r1
    494a:	b1 05       	cpc	r27, r1
    494c:	a1 f0       	breq	.+40     	; 0x4976 <IntToString+0x152>
		str[i--] = '-';
    494e:	29 81       	ldd	r18, Y+1	; 0x01
    4950:	3a 81       	ldd	r19, Y+2	; 0x02
    4952:	8d 85       	ldd	r24, Y+13	; 0x0d
    4954:	9e 85       	ldd	r25, Y+14	; 0x0e
    4956:	fc 01       	movw	r30, r24
    4958:	e2 0f       	add	r30, r18
    495a:	f3 1f       	adc	r31, r19
    495c:	8d e2       	ldi	r24, 0x2D	; 45
    495e:	80 83       	st	Z, r24
    4960:	89 81       	ldd	r24, Y+1	; 0x01
    4962:	9a 81       	ldd	r25, Y+2	; 0x02
    4964:	ab 81       	ldd	r26, Y+3	; 0x03
    4966:	bc 81       	ldd	r27, Y+4	; 0x04
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	a1 09       	sbc	r26, r1
    496c:	b1 09       	sbc	r27, r1
    496e:	89 83       	std	Y+1, r24	; 0x01
    4970:	9a 83       	std	Y+2, r25	; 0x02
    4972:	ab 83       	std	Y+3, r26	; 0x03
    4974:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    4976:	89 81       	ldd	r24, Y+1	; 0x01
    4978:	9a 81       	ldd	r25, Y+2	; 0x02
    497a:	ab 81       	ldd	r26, Y+3	; 0x03
    497c:	bc 81       	ldd	r27, Y+4	; 0x04
    497e:	01 96       	adiw	r24, 0x01	; 1
    4980:	a1 1d       	adc	r26, r1
    4982:	b1 1d       	adc	r27, r1
    4984:	89 83       	std	Y+1, r24	; 0x01
    4986:	9a 83       	std	Y+2, r25	; 0x02
    4988:	ab 83       	std	Y+3, r26	; 0x03
    498a:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    498c:	29 81       	ldd	r18, Y+1	; 0x01
    498e:	3a 81       	ldd	r19, Y+2	; 0x02
    4990:	8d 85       	ldd	r24, Y+13	; 0x0d
    4992:	9e 85       	ldd	r25, Y+14	; 0x0e
    4994:	82 0f       	add	r24, r18
    4996:	93 1f       	adc	r25, r19

}
    4998:	2e 96       	adiw	r28, 0x0e	; 14
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	f8 94       	cli
    499e:	de bf       	out	0x3e, r29	; 62
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	cd bf       	out	0x3d, r28	; 61
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	1f 91       	pop	r17
    49aa:	0f 91       	pop	r16
    49ac:	08 95       	ret

000049ae <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    49ae:	df 93       	push	r29
    49b0:	cf 93       	push	r28
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
    49b6:	6a 97       	sbiw	r28, 0x1a	; 26
    49b8:	0f b6       	in	r0, 0x3f	; 63
    49ba:	f8 94       	cli
    49bc:	de bf       	out	0x3e, r29	; 62
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	cd bf       	out	0x3d, r28	; 61
    49c2:	6f 8b       	std	Y+23, r22	; 0x17
    49c4:	78 8f       	std	Y+24, r23	; 0x18
    49c6:	89 8f       	std	Y+25, r24	; 0x19
    49c8:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    49ca:	8f 89       	ldd	r24, Y+23	; 0x17
    49cc:	98 8d       	ldd	r25, Y+24	; 0x18
    49ce:	a9 8d       	ldd	r26, Y+25	; 0x19
    49d0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	a1 05       	cpc	r26, r1
    49d6:	b1 05       	cpc	r27, r1
    49d8:	99 f0       	breq	.+38     	; 0x4a00 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    49da:	8f 89       	ldd	r24, Y+23	; 0x17
    49dc:	98 8d       	ldd	r25, Y+24	; 0x18
    49de:	a9 8d       	ldd	r26, Y+25	; 0x19
    49e0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    49e2:	9e 01       	movw	r18, r28
    49e4:	2d 5f       	subi	r18, 0xFD	; 253
    49e6:	3f 4f       	sbci	r19, 0xFF	; 255
    49e8:	bc 01       	movw	r22, r24
    49ea:	cd 01       	movw	r24, r26
    49ec:	a9 01       	movw	r20, r18
    49ee:	0e 94 12 24 	call	0x4824	; 0x4824 <IntToString>
    49f2:	9a 83       	std	Y+2, r25	; 0x02
    49f4:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
    49f8:	9a 81       	ldd	r25, Y+2	; 0x02
    49fa:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <LCD_voidWriteString>
    49fe:	03 c0       	rjmp	.+6      	; 0x4a06 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    4a00:	80 e3       	ldi	r24, 0x30	; 48
    4a02:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
	}
}
    4a06:	6a 96       	adiw	r28, 0x1a	; 26
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	f8 94       	cli
    4a0c:	de bf       	out	0x3e, r29	; 62
    4a0e:	0f be       	out	0x3f, r0	; 63
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	cf 91       	pop	r28
    4a14:	df 91       	pop	r29
    4a16:	08 95       	ret

00004a18 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    4a18:	df 93       	push	r29
    4a1a:	cf 93       	push	r28
    4a1c:	cd b7       	in	r28, 0x3d	; 61
    4a1e:	de b7       	in	r29, 0x3e	; 62
    4a20:	a6 97       	sbiw	r28, 0x26	; 38
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	f8 94       	cli
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	cd bf       	out	0x3d, r28	; 61
    4a2c:	6b a3       	std	Y+35, r22	; 0x23
    4a2e:	7c a3       	std	Y+36, r23	; 0x24
    4a30:	8d a3       	std	Y+37, r24	; 0x25
    4a32:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    4a34:	6b a1       	ldd	r22, Y+35	; 0x23
    4a36:	7c a1       	ldd	r23, Y+36	; 0x24
    4a38:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	48 ec       	ldi	r20, 0xC8	; 200
    4a42:	52 e4       	ldi	r21, 0x42	; 66
    4a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	bc 01       	movw	r22, r24
    4a4e:	cd 01       	movw	r24, r26
    4a50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	8b 87       	std	Y+11, r24	; 0x0b
    4a5a:	9c 87       	std	Y+12, r25	; 0x0c
    4a5c:	ad 87       	std	Y+13, r26	; 0x0d
    4a5e:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    4a60:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a62:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a64:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a66:	be 85       	ldd	r27, Y+14	; 0x0e
    4a68:	9e 01       	movw	r18, r28
    4a6a:	21 5f       	subi	r18, 0xF1	; 241
    4a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6e:	bc 01       	movw	r22, r24
    4a70:	cd 01       	movw	r24, r26
    4a72:	a9 01       	movw	r20, r18
    4a74:	0e 94 12 24 	call	0x4824	; 0x4824 <IntToString>
    4a78:	9a 87       	std	Y+10, r25	; 0x0a
    4a7a:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    4a7c:	1d 82       	std	Y+5, r1	; 0x05
    4a7e:	1e 82       	std	Y+6, r1	; 0x06
    4a80:	1f 82       	std	Y+7, r1	; 0x07
    4a82:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    4a84:	19 82       	std	Y+1, r1	; 0x01
    4a86:	1a 82       	std	Y+2, r1	; 0x02
    4a88:	1b 82       	std	Y+3, r1	; 0x03
    4a8a:	1c 82       	std	Y+4, r1	; 0x04
    4a8c:	0b c0       	rjmp	.+22     	; 0x4aa4 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    4a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a90:	9e 81       	ldd	r25, Y+6	; 0x06
    4a92:	af 81       	ldd	r26, Y+7	; 0x07
    4a94:	b8 85       	ldd	r27, Y+8	; 0x08
    4a96:	01 96       	adiw	r24, 0x01	; 1
    4a98:	a1 1d       	adc	r26, r1
    4a9a:	b1 1d       	adc	r27, r1
    4a9c:	8d 83       	std	Y+5, r24	; 0x05
    4a9e:	9e 83       	std	Y+6, r25	; 0x06
    4aa0:	af 83       	std	Y+7, r26	; 0x07
    4aa2:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    4aa4:	2d 81       	ldd	r18, Y+5	; 0x05
    4aa6:	3e 81       	ldd	r19, Y+6	; 0x06
    4aa8:	89 85       	ldd	r24, Y+9	; 0x09
    4aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aac:	fc 01       	movw	r30, r24
    4aae:	e2 0f       	add	r30, r18
    4ab0:	f3 1f       	adc	r31, r19
    4ab2:	80 81       	ld	r24, Z
    4ab4:	88 23       	and	r24, r24
    4ab6:	59 f7       	brne	.-42     	; 0x4a8e <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    4ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aba:	9e 81       	ldd	r25, Y+6	; 0x06
    4abc:	af 81       	ldd	r26, Y+7	; 0x07
    4abe:	b8 85       	ldd	r27, Y+8	; 0x08
    4ac0:	02 97       	sbiw	r24, 0x02	; 2
    4ac2:	a1 09       	sbc	r26, r1
    4ac4:	b1 09       	sbc	r27, r1
    4ac6:	8d 83       	std	Y+5, r24	; 0x05
    4ac8:	9e 83       	std	Y+6, r25	; 0x06
    4aca:	af 83       	std	Y+7, r26	; 0x07
    4acc:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    4ace:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad2:	af 81       	ldd	r26, Y+7	; 0x07
    4ad4:	b8 85       	ldd	r27, Y+8	; 0x08
    4ad6:	00 97       	sbiw	r24, 0x00	; 0
    4ad8:	a1 05       	cpc	r26, r1
    4ada:	b1 05       	cpc	r27, r1
    4adc:	49 f5       	brne	.+82     	; 0x4b30 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    4ade:	80 e3       	ldi	r24, 0x30	; 48
    4ae0:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
    4ae4:	25 c0       	rjmp	.+74     	; 0x4b30 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    4ae6:	29 81       	ldd	r18, Y+1	; 0x01
    4ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    4aea:	4b 81       	ldd	r20, Y+3	; 0x03
    4aec:	5c 81       	ldd	r21, Y+4	; 0x04
    4aee:	8d 81       	ldd	r24, Y+5	; 0x05
    4af0:	9e 81       	ldd	r25, Y+6	; 0x06
    4af2:	af 81       	ldd	r26, Y+7	; 0x07
    4af4:	b8 85       	ldd	r27, Y+8	; 0x08
    4af6:	28 17       	cp	r18, r24
    4af8:	39 07       	cpc	r19, r25
    4afa:	4a 07       	cpc	r20, r26
    4afc:	5b 07       	cpc	r21, r27
    4afe:	19 f4       	brne	.+6      	; 0x4b06 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    4b00:	8e e2       	ldi	r24, 0x2E	; 46
    4b02:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    4b06:	29 81       	ldd	r18, Y+1	; 0x01
    4b08:	3a 81       	ldd	r19, Y+2	; 0x02
    4b0a:	89 85       	ldd	r24, Y+9	; 0x09
    4b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b0e:	fc 01       	movw	r30, r24
    4b10:	e2 0f       	add	r30, r18
    4b12:	f3 1f       	adc	r31, r19
    4b14:	80 81       	ld	r24, Z
    4b16:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
		counter2++;
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1e:	ab 81       	ldd	r26, Y+3	; 0x03
    4b20:	bc 81       	ldd	r27, Y+4	; 0x04
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	a1 1d       	adc	r26, r1
    4b26:	b1 1d       	adc	r27, r1
    4b28:	89 83       	std	Y+1, r24	; 0x01
    4b2a:	9a 83       	std	Y+2, r25	; 0x02
    4b2c:	ab 83       	std	Y+3, r26	; 0x03
    4b2e:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    4b30:	29 81       	ldd	r18, Y+1	; 0x01
    4b32:	3a 81       	ldd	r19, Y+2	; 0x02
    4b34:	89 85       	ldd	r24, Y+9	; 0x09
    4b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b38:	fc 01       	movw	r30, r24
    4b3a:	e2 0f       	add	r30, r18
    4b3c:	f3 1f       	adc	r31, r19
    4b3e:	80 81       	ld	r24, Z
    4b40:	88 23       	and	r24, r24
    4b42:	89 f6       	brne	.-94     	; 0x4ae6 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    4b44:	a6 96       	adiw	r28, 0x26	; 38
    4b46:	0f b6       	in	r0, 0x3f	; 63
    4b48:	f8 94       	cli
    4b4a:	de bf       	out	0x3e, r29	; 62
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	cd bf       	out	0x3d, r28	; 61
    4b50:	cf 91       	pop	r28
    4b52:	df 91       	pop	r29
    4b54:	08 95       	ret

00004b56 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    4b56:	df 93       	push	r29
    4b58:	cf 93       	push	r28
    4b5a:	00 d0       	rcall	.+0      	; 0x4b5c <LCD_voidGoToPosition+0x6>
    4b5c:	0f 92       	push	r0
    4b5e:	cd b7       	in	r28, 0x3d	; 61
    4b60:	de b7       	in	r29, 0x3e	; 62
    4b62:	8a 83       	std	Y+2, r24	; 0x02
    4b64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    4b66:	80 e8       	ldi	r24, 0x80	; 128
    4b68:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    4b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6c:	88 23       	and	r24, r24
    4b6e:	21 f4       	brne	.+8      	; 0x4b78 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    4b70:	8b 81       	ldd	r24, Y+3	; 0x03
    4b72:	80 58       	subi	r24, 0x80	; 128
    4b74:	89 83       	std	Y+1, r24	; 0x01
    4b76:	14 c0       	rjmp	.+40     	; 0x4ba0 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    4b78:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7a:	81 30       	cpi	r24, 0x01	; 1
    4b7c:	21 f4       	brne	.+8      	; 0x4b86 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b80:	80 54       	subi	r24, 0x40	; 64
    4b82:	89 83       	std	Y+1, r24	; 0x01
    4b84:	0d c0       	rjmp	.+26     	; 0x4ba0 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    4b86:	8a 81       	ldd	r24, Y+2	; 0x02
    4b88:	82 30       	cpi	r24, 0x02	; 2
    4b8a:	21 f4       	brne	.+8      	; 0x4b94 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    4b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8e:	8c 56       	subi	r24, 0x6C	; 108
    4b90:	89 83       	std	Y+1, r24	; 0x01
    4b92:	06 c0       	rjmp	.+12     	; 0x4ba0 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    4b94:	8a 81       	ldd	r24, Y+2	; 0x02
    4b96:	83 30       	cpi	r24, 0x03	; 3
    4b98:	19 f4       	brne	.+6      	; 0x4ba0 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    4b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9c:	8c 52       	subi	r24, 0x2C	; 44
    4b9e:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	80 68       	ori	r24, 0x80	; 128
    4ba4:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
}
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	0f 90       	pop	r0
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	08 95       	ret

00004bb8 <LCD_voidClearPosition>:

void LCD_voidClearPosition(u8 X_Position, u8 Y_Position){
    4bb8:	df 93       	push	r29
    4bba:	cf 93       	push	r28
    4bbc:	00 d0       	rcall	.+0      	; 0x4bbe <LCD_voidClearPosition+0x6>
    4bbe:	cd b7       	in	r28, 0x3d	; 61
    4bc0:	de b7       	in	r29, 0x3e	; 62
    4bc2:	89 83       	std	Y+1, r24	; 0x01
    4bc4:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position, Y_Position);
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	6a 81       	ldd	r22, Y+2	; 0x02
    4bca:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    4bce:	80 e2       	ldi	r24, 0x20	; 32
    4bd0:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
}
    4bd4:	0f 90       	pop	r0
    4bd6:	0f 90       	pop	r0
    4bd8:	cf 91       	pop	r28
    4bda:	df 91       	pop	r29
    4bdc:	08 95       	ret

00004bde <LCD_voidClearLine>:

void LCD_voidClearLine(u8 X_Position){
    4bde:	df 93       	push	r29
    4be0:	cf 93       	push	r28
    4be2:	00 d0       	rcall	.+0      	; 0x4be4 <LCD_voidClearLine+0x6>
    4be4:	cd b7       	in	r28, 0x3d	; 61
    4be6:	de b7       	in	r29, 0x3e	; 62
    4be8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Y_Position = 0;
    4bea:	19 82       	std	Y+1, r1	; 0x01
    4bec:	07 c0       	rjmp	.+14     	; 0x4bfc <LCD_voidClearLine+0x1e>
	while(Y_Position <20){
		LCD_voidClearPosition(X_Position,Y_Position);
    4bee:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf0:	69 81       	ldd	r22, Y+1	; 0x01
    4bf2:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <LCD_voidClearPosition>
		Y_Position++;
    4bf6:	89 81       	ldd	r24, Y+1	; 0x01
    4bf8:	8f 5f       	subi	r24, 0xFF	; 255
    4bfa:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteChar(' ');
}

void LCD_voidClearLine(u8 X_Position){
	u8 Y_Position = 0;
	while(Y_Position <20){
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	84 31       	cpi	r24, 0x14	; 20
    4c00:	b0 f3       	brcs	.-20     	; 0x4bee <LCD_voidClearLine+0x10>
		LCD_voidClearPosition(X_Position,Y_Position);
		Y_Position++;
	}
}
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	cf 91       	pop	r28
    4c08:	df 91       	pop	r29
    4c0a:	08 95       	ret

00004c0c <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    4c0c:	df 93       	push	r29
    4c0e:	cf 93       	push	r28
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	27 97       	sbiw	r28, 0x07	; 7
    4c16:	0f b6       	in	r0, 0x3f	; 63
    4c18:	f8 94       	cli
    4c1a:	de bf       	out	0x3e, r29	; 62
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	cd bf       	out	0x3d, r28	; 61
    4c20:	9c 83       	std	Y+4, r25	; 0x04
    4c22:	8b 83       	std	Y+3, r24	; 0x03
    4c24:	6d 83       	std	Y+5, r22	; 0x05
    4c26:	4e 83       	std	Y+6, r20	; 0x06
    4c28:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    4c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c2e:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    4c32:	8d 81       	ldd	r24, Y+5	; 0x05
    4c34:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
	u8 address = 0;
    4c38:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    4c3a:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    4c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c3e:	88 30       	cpi	r24, 0x08	; 8
    4c40:	30 f5       	brcc	.+76     	; 0x4c8e <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    4c42:	8d 81       	ldd	r24, Y+5	; 0x05
    4c44:	88 2f       	mov	r24, r24
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	88 0f       	add	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	88 0f       	add	r24, r24
    4c52:	99 1f       	adc	r25, r25
    4c54:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    4c56:	8a 81       	ldd	r24, Y+2	; 0x02
    4c58:	80 64       	ori	r24, 0x40	; 64
    4c5a:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    4c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5e:	8f 77       	andi	r24, 0x7F	; 127
    4c60:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    4c68:	19 82       	std	Y+1, r1	; 0x01
    4c6a:	0e c0       	rjmp	.+28     	; 0x4c88 <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	28 2f       	mov	r18, r24
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	8b 81       	ldd	r24, Y+3	; 0x03
    4c74:	9c 81       	ldd	r25, Y+4	; 0x04
    4c76:	fc 01       	movw	r30, r24
    4c78:	e2 0f       	add	r30, r18
    4c7a:	f3 1f       	adc	r31, r19
    4c7c:	80 81       	ld	r24, Z
    4c7e:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    4c82:	89 81       	ldd	r24, Y+1	; 0x01
    4c84:	8f 5f       	subi	r24, 0xFF	; 255
    4c86:	89 83       	std	Y+1, r24	; 0x01
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	88 30       	cpi	r24, 0x08	; 8
    4c8c:	78 f3       	brcs	.-34     	; 0x4c6c <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    4c8e:	82 e0       	ldi	r24, 0x02	; 2
    4c90:	0e 94 49 21 	call	0x4292	; 0x4292 <LCD_voidSendCommand>
}
    4c94:	27 96       	adiw	r28, 0x07	; 7
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	08 95       	ret

00004ca6 <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62
    4cae:	a1 97       	sbiw	r28, 0x21	; 33
    4cb0:	0f b6       	in	r0, 0x3f	; 63
    4cb2:	f8 94       	cli
    4cb4:	de bf       	out	0x3e, r29	; 62
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    4cba:	8f ef       	ldi	r24, 0xFF	; 255
    4cbc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	04 96       	adiw	r24, 0x04	; 4
    4cc2:	9e 8f       	std	Y+30, r25	; 0x1e
    4cc4:	8d 8f       	std	Y+29, r24	; 0x1d
    4cc6:	e9 eb       	ldi	r30, 0xB9	; 185
    4cc8:	f1 e0       	ldi	r31, 0x01	; 1
    4cca:	f8 a3       	std	Y+32, r31	; 0x20
    4ccc:	ef 8f       	std	Y+31, r30	; 0x1f
    4cce:	f0 e1       	ldi	r31, 0x10	; 16
    4cd0:	f9 a3       	std	Y+33, r31	; 0x21
    4cd2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4cd4:	f8 a1       	ldd	r31, Y+32	; 0x20
    4cd6:	00 80       	ld	r0, Z
    4cd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4cda:	98 a1       	ldd	r25, Y+32	; 0x20
    4cdc:	01 96       	adiw	r24, 0x01	; 1
    4cde:	98 a3       	std	Y+32, r25	; 0x20
    4ce0:	8f 8f       	std	Y+31, r24	; 0x1f
    4ce2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4ce4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4ce6:	00 82       	st	Z, r0
    4ce8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cec:	01 96       	adiw	r24, 0x01	; 1
    4cee:	9e 8f       	std	Y+30, r25	; 0x1e
    4cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    4cf2:	99 a1       	ldd	r25, Y+33	; 0x21
    4cf4:	91 50       	subi	r25, 0x01	; 1
    4cf6:	99 a3       	std	Y+33, r25	; 0x21
    4cf8:	e9 a1       	ldd	r30, Y+33	; 0x21
    4cfa:	ee 23       	and	r30, r30
    4cfc:	51 f7       	brne	.-44     	; 0x4cd2 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    4cfe:	87 e0       	ldi	r24, 0x07	; 7
    4d00:	8c 8b       	std	Y+20, r24	; 0x14
    4d02:	86 e0       	ldi	r24, 0x06	; 6
    4d04:	8d 8b       	std	Y+21, r24	; 0x15
    4d06:	85 e0       	ldi	r24, 0x05	; 5
    4d08:	8e 8b       	std	Y+22, r24	; 0x16
    4d0a:	83 e0       	ldi	r24, 0x03	; 3
    4d0c:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    4d0e:	85 e0       	ldi	r24, 0x05	; 5
    4d10:	88 8f       	std	Y+24, r24	; 0x18
    4d12:	84 e0       	ldi	r24, 0x04	; 4
    4d14:	89 8f       	std	Y+25, r24	; 0x19
    4d16:	83 e0       	ldi	r24, 0x03	; 3
    4d18:	8a 8f       	std	Y+26, r24	; 0x1a
    4d1a:	82 e0       	ldi	r24, 0x02	; 2
    4d1c:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4d1e:	1a 82       	std	Y+2, r1	; 0x02
    4d20:	6b c0       	rjmp	.+214    	; 0x4df8 <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    4d22:	8a 81       	ldd	r24, Y+2	; 0x02
    4d24:	28 2f       	mov	r18, r24
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	ce 01       	movw	r24, r28
    4d2a:	44 96       	adiw	r24, 0x14	; 20
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	e2 0f       	add	r30, r18
    4d30:	f3 1f       	adc	r31, r19
    4d32:	90 81       	ld	r25, Z
    4d34:	84 e0       	ldi	r24, 0x04	; 4
    4d36:	69 2f       	mov	r22, r25
    4d38:	40 e0       	ldi	r20, 0x00	; 0
    4d3a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4d3e:	19 82       	std	Y+1, r1	; 0x01
    4d40:	46 c0       	rjmp	.+140    	; 0x4dce <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4d42:	89 81       	ldd	r24, Y+1	; 0x01
    4d44:	28 2f       	mov	r18, r24
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	ce 01       	movw	r24, r28
    4d4a:	48 96       	adiw	r24, 0x18	; 24
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	e2 0f       	add	r30, r18
    4d50:	f3 1f       	adc	r31, r19
    4d52:	90 81       	ld	r25, Z
    4d54:	83 e0       	ldi	r24, 0x03	; 3
    4d56:	69 2f       	mov	r22, r25
    4d58:	0e 94 bb 0b 	call	0x1776	; 0x1776 <DIO_u8GetPinValue>
    4d5c:	88 23       	and	r24, r24
    4d5e:	a1 f5       	brne	.+104    	; 0x4dc8 <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    4d60:	89 81       	ldd	r24, Y+1	; 0x01
    4d62:	28 2f       	mov	r18, r24
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	8a 81       	ldd	r24, Y+2	; 0x02
    4d68:	48 2f       	mov	r20, r24
    4d6a:	50 e0       	ldi	r21, 0x00	; 0
    4d6c:	22 0f       	add	r18, r18
    4d6e:	33 1f       	adc	r19, r19
    4d70:	22 0f       	add	r18, r18
    4d72:	33 1f       	adc	r19, r19
    4d74:	ce 01       	movw	r24, r28
    4d76:	01 96       	adiw	r24, 0x01	; 1
    4d78:	82 0f       	add	r24, r18
    4d7a:	93 1f       	adc	r25, r19
    4d7c:	84 0f       	add	r24, r20
    4d7e:	95 1f       	adc	r25, r21
    4d80:	fc 01       	movw	r30, r24
    4d82:	33 96       	adiw	r30, 0x03	; 3
    4d84:	80 81       	ld	r24, Z
    4d86:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4d88:	89 81       	ldd	r24, Y+1	; 0x01
    4d8a:	28 2f       	mov	r18, r24
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	ce 01       	movw	r24, r28
    4d90:	48 96       	adiw	r24, 0x18	; 24
    4d92:	fc 01       	movw	r30, r24
    4d94:	e2 0f       	add	r30, r18
    4d96:	f3 1f       	adc	r31, r19
    4d98:	90 81       	ld	r25, Z
    4d9a:	83 e0       	ldi	r24, 0x03	; 3
    4d9c:	69 2f       	mov	r22, r25
    4d9e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <DIO_u8GetPinValue>
    4da2:	88 23       	and	r24, r24
    4da4:	89 f3       	breq	.-30     	; 0x4d88 <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    4da6:	8a 81       	ldd	r24, Y+2	; 0x02
    4da8:	28 2f       	mov	r18, r24
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	ce 01       	movw	r24, r28
    4dae:	44 96       	adiw	r24, 0x14	; 20
    4db0:	fc 01       	movw	r30, r24
    4db2:	e2 0f       	add	r30, r18
    4db4:	f3 1f       	adc	r31, r19
    4db6:	90 81       	ld	r25, Z
    4db8:	84 e0       	ldi	r24, 0x04	; 4
    4dba:	69 2f       	mov	r22, r25
    4dbc:	41 e0       	ldi	r20, 0x01	; 1
    4dbe:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    4dc2:	fb 81       	ldd	r31, Y+3	; 0x03
    4dc4:	fc 8f       	std	Y+28, r31	; 0x1c
    4dc6:	1e c0       	rjmp	.+60     	; 0x4e04 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
    4dca:	8f 5f       	subi	r24, 0xFF	; 255
    4dcc:	89 83       	std	Y+1, r24	; 0x01
    4dce:	89 81       	ldd	r24, Y+1	; 0x01
    4dd0:	84 30       	cpi	r24, 0x04	; 4
    4dd2:	08 f4       	brcc	.+2      	; 0x4dd6 <KPD_u8GetPressedKey+0x130>
    4dd4:	b6 cf       	rjmp	.-148    	; 0x4d42 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    4dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd8:	28 2f       	mov	r18, r24
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	ce 01       	movw	r24, r28
    4dde:	44 96       	adiw	r24, 0x14	; 20
    4de0:	fc 01       	movw	r30, r24
    4de2:	e2 0f       	add	r30, r18
    4de4:	f3 1f       	adc	r31, r19
    4de6:	90 81       	ld	r25, Z
    4de8:	84 e0       	ldi	r24, 0x04	; 4
    4dea:	69 2f       	mov	r22, r25
    4dec:	41 e0       	ldi	r20, 0x01	; 1
    4dee:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4df2:	8a 81       	ldd	r24, Y+2	; 0x02
    4df4:	8f 5f       	subi	r24, 0xFF	; 255
    4df6:	8a 83       	std	Y+2, r24	; 0x02
    4df8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfa:	84 30       	cpi	r24, 0x04	; 4
    4dfc:	08 f4       	brcc	.+2      	; 0x4e00 <KPD_u8GetPressedKey+0x15a>
    4dfe:	91 cf       	rjmp	.-222    	; 0x4d22 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    4e00:	8b 81       	ldd	r24, Y+3	; 0x03
    4e02:	8c 8f       	std	Y+28, r24	; 0x1c
    4e04:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    4e06:	a1 96       	adiw	r28, 0x21	; 33
    4e08:	0f b6       	in	r0, 0x3f	; 63
    4e0a:	f8 94       	cli
    4e0c:	de bf       	out	0x3e, r29	; 62
    4e0e:	0f be       	out	0x3f, r0	; 63
    4e10:	cd bf       	out	0x3d, r28	; 61
    4e12:	cf 91       	pop	r28
    4e14:	df 91       	pop	r29
    4e16:	08 95       	ret

00004e18 <main>:
void LM35_Alarm();
void POT_Alarm();

u8 current_ADC = 0;
f32 readings[3];
int main(){
    4e18:	df 93       	push	r29
    4e1a:	cf 93       	push	r28
    4e1c:	cd b7       	in	r28, 0x3d	; 61
    4e1e:	de b7       	in	r29, 0x3e	; 62
    4e20:	2e 97       	sbiw	r28, 0x0e	; 14
    4e22:	0f b6       	in	r0, 0x3f	; 63
    4e24:	f8 94       	cli
    4e26:	de bf       	out	0x3e, r29	; 62
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    4e2c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_voidInit>
	DIO_voidSetPinValue(DIO_PortD,DIO_PIN2,High);
    4e30:	84 e0       	ldi	r24, 0x04	; 4
    4e32:	62 e0       	ldi	r22, 0x02	; 2
    4e34:	41 e0       	ldi	r20, 0x01	; 1
    4e36:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PortD,DIO_PIN3,High);
    4e3a:	84 e0       	ldi	r24, 0x04	; 4
    4e3c:	63 e0       	ldi	r22, 0x03	; 3
    4e3e:	41 e0       	ldi	r20, 0x01	; 1
    4e40:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PortB,DIO_PIN2,High);
    4e44:	82 e0       	ldi	r24, 0x02	; 2
    4e46:	62 e0       	ldi	r22, 0x02	; 2
    4e48:	41 e0       	ldi	r20, 0x01	; 1
    4e4a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	ADC_voidInit(0);
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	80 e0       	ldi	r24, 0x00	; 0
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <ADC_voidInit>
	ADC_voidEnable();
    4e5a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <ADC_voidEnable>
	ADC_voidInterrputEnable();
    4e5e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ADC_voidInterrputEnable>
	EXTI0_VID_SET_CALL_BACK(LDR_Alarm);
    4e62:	83 e9       	ldi	r24, 0x93	; 147
    4e64:	98 e2       	ldi	r25, 0x28	; 40
    4e66:	0e 94 b9 08 	call	0x1172	; 0x1172 <EXTI0_VID_SET_CALL_BACK>
	EXTI1_VID_SET_CALL_BACK(LM35_Alarm);
    4e6a:	88 eb       	ldi	r24, 0xB8	; 184
    4e6c:	98 e2       	ldi	r25, 0x28	; 40
    4e6e:	0e 94 cb 08 	call	0x1196	; 0x1196 <EXTI1_VID_SET_CALL_BACK>
	EXTI2_VID_SET_CALL_BACK(POT_Alarm);
    4e72:	8d ed       	ldi	r24, 0xDD	; 221
    4e74:	98 e2       	ldi	r25, 0x28	; 40
    4e76:	0e 94 dd 08 	call	0x11ba	; 0x11ba <EXTI2_VID_SET_CALL_BACK>
	EXTI0_voidInit();
    4e7a:	0e 94 33 07 	call	0xe66	; 0xe66 <EXTI0_voidInit>
	EXTI1_voidInit();
    4e7e:	0e 94 48 07 	call	0xe90	; 0xe90 <EXTI1_voidInit>
	EXTI2_voidInit();
    4e82:	0e 94 5d 07 	call	0xeba	; 0xeba <EXTI2_voidInit>
	EXTI0_voidEnable();
    4e86:	0e 94 6b 07 	call	0xed6	; 0xed6 <EXTI0_voidEnable>
	EXTI1_voidEnable();
    4e8a:	0e 94 79 07 	call	0xef2	; 0xef2 <EXTI1_voidEnable>
	EXTI2_voidEnable();
    4e8e:	0e 94 87 07 	call	0xf0e	; 0xf0e <EXTI2_voidEnable>
	LCD_voidInit();
    4e92:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_voidInit>
	GIE_voidEnable();
    4e96:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_voidEnable>
	ADC_voidSetCallback(ADC_Chain);
    4e9a:	80 e6       	ldi	r24, 0x60	; 96
    4e9c:	98 e2       	ldi	r25, 0x28	; 40
    4e9e:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <ADC_voidSetCallback>
	ADC_voidStartInterruptConversion(current_ADC);
    4ea2:	80 91 d2 01 	lds	r24, 0x01D2
    4ea6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <ADC_voidStartInterruptConversion>
	while(1){
		DIO_voidSetPinValue(DIO_PortB,DIO_PIN6,High);
    4eaa:	82 e0       	ldi	r24, 0x02	; 2
    4eac:	66 e0       	ldi	r22, 0x06	; 6
    4eae:	41 e0       	ldi	r20, 0x01	; 1
    4eb0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PortB,DIO_PIN7,High);
    4eb4:	82 e0       	ldi	r24, 0x02	; 2
    4eb6:	67 e0       	ldi	r22, 0x07	; 7
    4eb8:	41 e0       	ldi	r20, 0x01	; 1
    4eba:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PortD,DIO_PIN4,High);
    4ebe:	84 e0       	ldi	r24, 0x04	; 4
    4ec0:	64 e0       	ldi	r22, 0x04	; 4
    4ec2:	41 e0       	ldi	r20, 0x01	; 1
    4ec4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PortC,DIO_PIN5,Low);
    4ec8:	83 e0       	ldi	r24, 0x03	; 3
    4eca:	65 e0       	ldi	r22, 0x05	; 5
    4ecc:	40 e0       	ldi	r20, 0x00	; 0
    4ece:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    4ed2:	80 e0       	ldi	r24, 0x00	; 0
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	a8 ec       	ldi	r26, 0xC8	; 200
    4ed8:	b2 e4       	ldi	r27, 0x42	; 66
    4eda:	8b 87       	std	Y+11, r24	; 0x0b
    4edc:	9c 87       	std	Y+12, r25	; 0x0c
    4ede:	ad 87       	std	Y+13, r26	; 0x0d
    4ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eea:	20 e0       	ldi	r18, 0x00	; 0
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	4a e7       	ldi	r20, 0x7A	; 122
    4ef0:	55 e4       	ldi	r21, 0x45	; 69
    4ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	8f 83       	std	Y+7, r24	; 0x07
    4efc:	98 87       	std	Y+8, r25	; 0x08
    4efe:	a9 87       	std	Y+9, r26	; 0x09
    4f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f02:	6f 81       	ldd	r22, Y+7	; 0x07
    4f04:	78 85       	ldd	r23, Y+8	; 0x08
    4f06:	89 85       	ldd	r24, Y+9	; 0x09
    4f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	40 e8       	ldi	r20, 0x80	; 128
    4f10:	5f e3       	ldi	r21, 0x3F	; 63
    4f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f16:	88 23       	and	r24, r24
    4f18:	2c f4       	brge	.+10     	; 0x4f24 <main+0x10c>
		__ticks = 1;
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	9e 83       	std	Y+6, r25	; 0x06
    4f20:	8d 83       	std	Y+5, r24	; 0x05
    4f22:	3f c0       	rjmp	.+126    	; 0x4fa2 <main+0x18a>
	else if (__tmp > 65535)
    4f24:	6f 81       	ldd	r22, Y+7	; 0x07
    4f26:	78 85       	ldd	r23, Y+8	; 0x08
    4f28:	89 85       	ldd	r24, Y+9	; 0x09
    4f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	3f ef       	ldi	r19, 0xFF	; 255
    4f30:	4f e7       	ldi	r20, 0x7F	; 127
    4f32:	57 e4       	ldi	r21, 0x47	; 71
    4f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f38:	18 16       	cp	r1, r24
    4f3a:	4c f5       	brge	.+82     	; 0x4f8e <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f44:	20 e0       	ldi	r18, 0x00	; 0
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	40 e2       	ldi	r20, 0x20	; 32
    4f4a:	51 e4       	ldi	r21, 0x41	; 65
    4f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f50:	dc 01       	movw	r26, r24
    4f52:	cb 01       	movw	r24, r22
    4f54:	bc 01       	movw	r22, r24
    4f56:	cd 01       	movw	r24, r26
    4f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	cb 01       	movw	r24, r22
    4f60:	9e 83       	std	Y+6, r25	; 0x06
    4f62:	8d 83       	std	Y+5, r24	; 0x05
    4f64:	0f c0       	rjmp	.+30     	; 0x4f84 <main+0x16c>
    4f66:	80 e9       	ldi	r24, 0x90	; 144
    4f68:	91 e0       	ldi	r25, 0x01	; 1
    4f6a:	9c 83       	std	Y+4, r25	; 0x04
    4f6c:	8b 83       	std	Y+3, r24	; 0x03
    4f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f70:	9c 81       	ldd	r25, Y+4	; 0x04
    4f72:	01 97       	sbiw	r24, 0x01	; 1
    4f74:	f1 f7       	brne	.-4      	; 0x4f72 <main+0x15a>
    4f76:	9c 83       	std	Y+4, r25	; 0x04
    4f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f7e:	01 97       	sbiw	r24, 0x01	; 1
    4f80:	9e 83       	std	Y+6, r25	; 0x06
    4f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f84:	8d 81       	ldd	r24, Y+5	; 0x05
    4f86:	9e 81       	ldd	r25, Y+6	; 0x06
    4f88:	00 97       	sbiw	r24, 0x00	; 0
    4f8a:	69 f7       	brne	.-38     	; 0x4f66 <main+0x14e>
    4f8c:	14 c0       	rjmp	.+40     	; 0x4fb6 <main+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f90:	78 85       	ldd	r23, Y+8	; 0x08
    4f92:	89 85       	ldd	r24, Y+9	; 0x09
    4f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f9a:	dc 01       	movw	r26, r24
    4f9c:	cb 01       	movw	r24, r22
    4f9e:	9e 83       	std	Y+6, r25	; 0x06
    4fa0:	8d 83       	std	Y+5, r24	; 0x05
    4fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa6:	9a 83       	std	Y+2, r25	; 0x02
    4fa8:	89 83       	std	Y+1, r24	; 0x01
    4faa:	89 81       	ldd	r24, Y+1	; 0x01
    4fac:	9a 81       	ldd	r25, Y+2	; 0x02
    4fae:	01 97       	sbiw	r24, 0x01	; 1
    4fb0:	f1 f7       	brne	.-4      	; 0x4fae <main+0x196>
    4fb2:	9a 83       	std	Y+2, r25	; 0x02
    4fb4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		if(readings[0]/1000 > LDR_THRESHOLD){
    4fb6:	80 91 d3 01 	lds	r24, 0x01D3
    4fba:	90 91 d4 01 	lds	r25, 0x01D4
    4fbe:	a0 91 d5 01 	lds	r26, 0x01D5
    4fc2:	b0 91 d6 01 	lds	r27, 0x01D6
    4fc6:	bc 01       	movw	r22, r24
    4fc8:	cd 01       	movw	r24, r26
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	4a e7       	ldi	r20, 0x7A	; 122
    4fd0:	54 e4       	ldi	r21, 0x44	; 68
    4fd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	bc 01       	movw	r22, r24
    4fdc:	cd 01       	movw	r24, r26
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	40 e4       	ldi	r20, 0x40	; 64
    4fe4:	50 e4       	ldi	r21, 0x40	; 64
    4fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fea:	18 16       	cp	r1, r24
    4fec:	5c f4       	brge	.+22     	; 0x5004 <main+0x1ec>
			DIO_voidSetPinValue(DIO_PortB,DIO_PIN6,Low);
    4fee:	82 e0       	ldi	r24, 0x02	; 2
    4ff0:	66 e0       	ldi	r22, 0x06	; 6
    4ff2:	40 e0       	ldi	r20, 0x00	; 0
    4ff4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PortC,DIO_PIN5,High);
    4ff8:	83 e0       	ldi	r24, 0x03	; 3
    4ffa:	65 e0       	ldi	r22, 0x05	; 5
    4ffc:	41 e0       	ldi	r20, 0x01	; 1
    4ffe:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    5002:	03 c0       	rjmp	.+6      	; 0x500a <main+0x1f2>
		}
		else{
			LCD_voidClearLine(0);
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	0e 94 ef 25 	call	0x4bde	; 0x4bde <LCD_voidClearLine>
		}
		if(readings[1]/10 > LM35_THRESHOLD){
    500a:	80 91 d7 01 	lds	r24, 0x01D7
    500e:	90 91 d8 01 	lds	r25, 0x01D8
    5012:	a0 91 d9 01 	lds	r26, 0x01D9
    5016:	b0 91 da 01 	lds	r27, 0x01DA
    501a:	bc 01       	movw	r22, r24
    501c:	cd 01       	movw	r24, r26
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e2       	ldi	r20, 0x20	; 32
    5024:	51 e4       	ldi	r21, 0x41	; 65
    5026:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	bc 01       	movw	r22, r24
    5030:	cd 01       	movw	r24, r26
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	40 ee       	ldi	r20, 0xE0	; 224
    5038:	51 e4       	ldi	r21, 0x41	; 65
    503a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    503e:	18 16       	cp	r1, r24
    5040:	5c f4       	brge	.+22     	; 0x5058 <main+0x240>
			DIO_voidSetPinValue(DIO_PortB,DIO_PIN7,Low);
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	67 e0       	ldi	r22, 0x07	; 7
    5046:	40 e0       	ldi	r20, 0x00	; 0
    5048:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PortC,DIO_PIN5,High);
    504c:	83 e0       	ldi	r24, 0x03	; 3
    504e:	65 e0       	ldi	r22, 0x05	; 5
    5050:	41 e0       	ldi	r20, 0x01	; 1
    5052:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    5056:	03 c0       	rjmp	.+6      	; 0x505e <main+0x246>
		}
		else{
			LCD_voidClearLine(1);
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	0e 94 ef 25 	call	0x4bde	; 0x4bde <LCD_voidClearLine>
		}
		if(readings[2]/1000 > POT_THRESHOLD){
    505e:	80 91 db 01 	lds	r24, 0x01DB
    5062:	90 91 dc 01 	lds	r25, 0x01DC
    5066:	a0 91 dd 01 	lds	r26, 0x01DD
    506a:	b0 91 de 01 	lds	r27, 0x01DE
    506e:	bc 01       	movw	r22, r24
    5070:	cd 01       	movw	r24, r26
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	4a e7       	ldi	r20, 0x7A	; 122
    5078:	54 e4       	ldi	r21, 0x44	; 68
    507a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    507e:	dc 01       	movw	r26, r24
    5080:	cb 01       	movw	r24, r22
    5082:	bc 01       	movw	r22, r24
    5084:	cd 01       	movw	r24, r26
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	30 e0       	ldi	r19, 0x00	; 0
    508a:	40 e8       	ldi	r20, 0x80	; 128
    508c:	50 e4       	ldi	r21, 0x40	; 64
    508e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5092:	18 16       	cp	r1, r24
    5094:	5c f4       	brge	.+22     	; 0x50ac <main+0x294>
			DIO_voidSetPinValue(DIO_PortD,DIO_PIN4,Low);
    5096:	84 e0       	ldi	r24, 0x04	; 4
    5098:	64 e0       	ldi	r22, 0x04	; 4
    509a:	40 e0       	ldi	r20, 0x00	; 0
    509c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PortC,DIO_PIN5,High);
    50a0:	83 e0       	ldi	r24, 0x03	; 3
    50a2:	65 e0       	ldi	r22, 0x05	; 5
    50a4:	41 e0       	ldi	r20, 0x01	; 1
    50a6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    50aa:	03 c0       	rjmp	.+6      	; 0x50b2 <main+0x29a>
		}
		else{
			LCD_voidClearLine(2);
    50ac:	82 e0       	ldi	r24, 0x02	; 2
    50ae:	0e 94 ef 25 	call	0x4bde	; 0x4bde <LCD_voidClearLine>
		}

		ADC_voidEnable();
    50b2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <ADC_voidEnable>
		ADC_voidStartInterruptConversion(current_ADC);
    50b6:	80 91 d2 01 	lds	r24, 0x01D2
    50ba:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <ADC_voidStartInterruptConversion>
    50be:	f5 ce       	rjmp	.-534    	; 0x4eaa <main+0x92>

000050c0 <ADC_Chain>:
	}
	return 0;
}

void ADC_Chain(){
    50c0:	0f 93       	push	r16
    50c2:	1f 93       	push	r17
    50c4:	df 93       	push	r29
    50c6:	cf 93       	push	r28
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
	ADC_voidDisable();
    50cc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <ADC_voidDisable>
	readings[current_ADC] = ADC_u16ReadADCInMV();
    50d0:	80 91 d2 01 	lds	r24, 0x01D2
    50d4:	08 2f       	mov	r16, r24
    50d6:	10 e0       	ldi	r17, 0x00	; 0
    50d8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <ADC_u16ReadADCInMV>
    50dc:	cc 01       	movw	r24, r24
    50de:	a0 e0       	ldi	r26, 0x00	; 0
    50e0:	b0 e0       	ldi	r27, 0x00	; 0
    50e2:	bc 01       	movw	r22, r24
    50e4:	cd 01       	movw	r24, r26
    50e6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    50ea:	9b 01       	movw	r18, r22
    50ec:	ac 01       	movw	r20, r24
    50ee:	c8 01       	movw	r24, r16
    50f0:	88 0f       	add	r24, r24
    50f2:	99 1f       	adc	r25, r25
    50f4:	88 0f       	add	r24, r24
    50f6:	99 1f       	adc	r25, r25
    50f8:	fc 01       	movw	r30, r24
    50fa:	ed 52       	subi	r30, 0x2D	; 45
    50fc:	fe 4f       	sbci	r31, 0xFE	; 254
    50fe:	20 83       	st	Z, r18
    5100:	31 83       	std	Z+1, r19	; 0x01
    5102:	42 83       	std	Z+2, r20	; 0x02
    5104:	53 83       	std	Z+3, r21	; 0x03
	current_ADC++;
    5106:	80 91 d2 01 	lds	r24, 0x01D2
    510a:	8f 5f       	subi	r24, 0xFF	; 255
    510c:	80 93 d2 01 	sts	0x01D2, r24
	if(current_ADC > 2){
    5110:	80 91 d2 01 	lds	r24, 0x01D2
    5114:	83 30       	cpi	r24, 0x03	; 3
    5116:	10 f0       	brcs	.+4      	; 0x511c <ADC_Chain+0x5c>
		current_ADC = 0;
    5118:	10 92 d2 01 	sts	0x01D2, r1
	}
}
    511c:	cf 91       	pop	r28
    511e:	df 91       	pop	r29
    5120:	1f 91       	pop	r17
    5122:	0f 91       	pop	r16
    5124:	08 95       	ret

00005126 <LDR_Alarm>:

void LDR_Alarm(){
    5126:	df 93       	push	r29
    5128:	cf 93       	push	r28
    512a:	cd b7       	in	r28, 0x3d	; 61
    512c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoToPosition(0,0);
    512e:	80 e0       	ldi	r24, 0x00	; 0
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "LDR: ");
    5136:	80 e6       	ldi	r24, 0x60	; 96
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <LCD_voidWriteString>
	LCD_voidWriteFloatData(readings[0]/1000);
    513e:	80 91 d3 01 	lds	r24, 0x01D3
    5142:	90 91 d4 01 	lds	r25, 0x01D4
    5146:	a0 91 d5 01 	lds	r26, 0x01D5
    514a:	b0 91 d6 01 	lds	r27, 0x01D6
    514e:	bc 01       	movw	r22, r24
    5150:	cd 01       	movw	r24, r26
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	4a e7       	ldi	r20, 0x7A	; 122
    5158:	54 e4       	ldi	r21, 0x44	; 68
    515a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    515e:	dc 01       	movw	r26, r24
    5160:	cb 01       	movw	r24, r22
    5162:	bc 01       	movw	r22, r24
    5164:	cd 01       	movw	r24, r26
    5166:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <LCD_voidWriteFloatData>
}
    516a:	cf 91       	pop	r28
    516c:	df 91       	pop	r29
    516e:	08 95       	ret

00005170 <LM35_Alarm>:

void LM35_Alarm(){
    5170:	df 93       	push	r29
    5172:	cf 93       	push	r28
    5174:	cd b7       	in	r28, 0x3d	; 61
    5176:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoToPosition(1,0);
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	60 e0       	ldi	r22, 0x00	; 0
    517c:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Temp: ");
    5180:	86 e6       	ldi	r24, 0x66	; 102
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <LCD_voidWriteString>
	LCD_voidWriteFloatData(readings[1]/10);
    5188:	80 91 d7 01 	lds	r24, 0x01D7
    518c:	90 91 d8 01 	lds	r25, 0x01D8
    5190:	a0 91 d9 01 	lds	r26, 0x01D9
    5194:	b0 91 da 01 	lds	r27, 0x01DA
    5198:	bc 01       	movw	r22, r24
    519a:	cd 01       	movw	r24, r26
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	40 e2       	ldi	r20, 0x20	; 32
    51a2:	51 e4       	ldi	r21, 0x41	; 65
    51a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	bc 01       	movw	r22, r24
    51ae:	cd 01       	movw	r24, r26
    51b0:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <LCD_voidWriteFloatData>
}
    51b4:	cf 91       	pop	r28
    51b6:	df 91       	pop	r29
    51b8:	08 95       	ret

000051ba <POT_Alarm>:

void POT_Alarm(){
    51ba:	df 93       	push	r29
    51bc:	cf 93       	push	r28
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoToPosition(2,0);
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	60 e0       	ldi	r22, 0x00	; 0
    51c6:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "R: ");
    51ca:	8d e6       	ldi	r24, 0x6D	; 109
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <LCD_voidWriteString>
	LCD_voidWriteFloatData(readings[2]/1000);
    51d2:	80 91 db 01 	lds	r24, 0x01DB
    51d6:	90 91 dc 01 	lds	r25, 0x01DC
    51da:	a0 91 dd 01 	lds	r26, 0x01DD
    51de:	b0 91 de 01 	lds	r27, 0x01DE
    51e2:	bc 01       	movw	r22, r24
    51e4:	cd 01       	movw	r24, r26
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	4a e7       	ldi	r20, 0x7A	; 122
    51ec:	54 e4       	ldi	r21, 0x44	; 68
    51ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	bc 01       	movw	r22, r24
    51f8:	cd 01       	movw	r24, r26
    51fa:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <LCD_voidWriteFloatData>
}
    51fe:	cf 91       	pop	r28
    5200:	df 91       	pop	r29
    5202:	08 95       	ret

00005204 <__mulsi3>:
    5204:	62 9f       	mul	r22, r18
    5206:	d0 01       	movw	r26, r0
    5208:	73 9f       	mul	r23, r19
    520a:	f0 01       	movw	r30, r0
    520c:	82 9f       	mul	r24, r18
    520e:	e0 0d       	add	r30, r0
    5210:	f1 1d       	adc	r31, r1
    5212:	64 9f       	mul	r22, r20
    5214:	e0 0d       	add	r30, r0
    5216:	f1 1d       	adc	r31, r1
    5218:	92 9f       	mul	r25, r18
    521a:	f0 0d       	add	r31, r0
    521c:	83 9f       	mul	r24, r19
    521e:	f0 0d       	add	r31, r0
    5220:	74 9f       	mul	r23, r20
    5222:	f0 0d       	add	r31, r0
    5224:	65 9f       	mul	r22, r21
    5226:	f0 0d       	add	r31, r0
    5228:	99 27       	eor	r25, r25
    522a:	72 9f       	mul	r23, r18
    522c:	b0 0d       	add	r27, r0
    522e:	e1 1d       	adc	r30, r1
    5230:	f9 1f       	adc	r31, r25
    5232:	63 9f       	mul	r22, r19
    5234:	b0 0d       	add	r27, r0
    5236:	e1 1d       	adc	r30, r1
    5238:	f9 1f       	adc	r31, r25
    523a:	bd 01       	movw	r22, r26
    523c:	cf 01       	movw	r24, r30
    523e:	11 24       	eor	r1, r1
    5240:	08 95       	ret

00005242 <__divmodqi4>:
    5242:	87 fb       	bst	r24, 7
    5244:	08 2e       	mov	r0, r24
    5246:	06 26       	eor	r0, r22
    5248:	87 fd       	sbrc	r24, 7
    524a:	81 95       	neg	r24
    524c:	67 fd       	sbrc	r22, 7
    524e:	61 95       	neg	r22
    5250:	20 d0       	rcall	.+64     	; 0x5292 <__udivmodqi4>
    5252:	0e f4       	brtc	.+2      	; 0x5256 <__divmodqi4_1>
    5254:	91 95       	neg	r25

00005256 <__divmodqi4_1>:
    5256:	07 fc       	sbrc	r0, 7
    5258:	81 95       	neg	r24

0000525a <__divmodqi4_exit>:
    525a:	08 95       	ret

0000525c <__divmodsi4>:
    525c:	97 fb       	bst	r25, 7
    525e:	09 2e       	mov	r0, r25
    5260:	05 26       	eor	r0, r21
    5262:	0e d0       	rcall	.+28     	; 0x5280 <__divmodsi4_neg1>
    5264:	57 fd       	sbrc	r21, 7
    5266:	04 d0       	rcall	.+8      	; 0x5270 <__divmodsi4_neg2>
    5268:	20 d0       	rcall	.+64     	; 0x52aa <__udivmodsi4>
    526a:	0a d0       	rcall	.+20     	; 0x5280 <__divmodsi4_neg1>
    526c:	00 1c       	adc	r0, r0
    526e:	38 f4       	brcc	.+14     	; 0x527e <__divmodsi4_exit>

00005270 <__divmodsi4_neg2>:
    5270:	50 95       	com	r21
    5272:	40 95       	com	r20
    5274:	30 95       	com	r19
    5276:	21 95       	neg	r18
    5278:	3f 4f       	sbci	r19, 0xFF	; 255
    527a:	4f 4f       	sbci	r20, 0xFF	; 255
    527c:	5f 4f       	sbci	r21, 0xFF	; 255

0000527e <__divmodsi4_exit>:
    527e:	08 95       	ret

00005280 <__divmodsi4_neg1>:
    5280:	f6 f7       	brtc	.-4      	; 0x527e <__divmodsi4_exit>
    5282:	90 95       	com	r25
    5284:	80 95       	com	r24
    5286:	70 95       	com	r23
    5288:	61 95       	neg	r22
    528a:	7f 4f       	sbci	r23, 0xFF	; 255
    528c:	8f 4f       	sbci	r24, 0xFF	; 255
    528e:	9f 4f       	sbci	r25, 0xFF	; 255
    5290:	08 95       	ret

00005292 <__udivmodqi4>:
    5292:	99 1b       	sub	r25, r25
    5294:	79 e0       	ldi	r23, 0x09	; 9
    5296:	04 c0       	rjmp	.+8      	; 0x52a0 <__udivmodqi4_ep>

00005298 <__udivmodqi4_loop>:
    5298:	99 1f       	adc	r25, r25
    529a:	96 17       	cp	r25, r22
    529c:	08 f0       	brcs	.+2      	; 0x52a0 <__udivmodqi4_ep>
    529e:	96 1b       	sub	r25, r22

000052a0 <__udivmodqi4_ep>:
    52a0:	88 1f       	adc	r24, r24
    52a2:	7a 95       	dec	r23
    52a4:	c9 f7       	brne	.-14     	; 0x5298 <__udivmodqi4_loop>
    52a6:	80 95       	com	r24
    52a8:	08 95       	ret

000052aa <__udivmodsi4>:
    52aa:	a1 e2       	ldi	r26, 0x21	; 33
    52ac:	1a 2e       	mov	r1, r26
    52ae:	aa 1b       	sub	r26, r26
    52b0:	bb 1b       	sub	r27, r27
    52b2:	fd 01       	movw	r30, r26
    52b4:	0d c0       	rjmp	.+26     	; 0x52d0 <__udivmodsi4_ep>

000052b6 <__udivmodsi4_loop>:
    52b6:	aa 1f       	adc	r26, r26
    52b8:	bb 1f       	adc	r27, r27
    52ba:	ee 1f       	adc	r30, r30
    52bc:	ff 1f       	adc	r31, r31
    52be:	a2 17       	cp	r26, r18
    52c0:	b3 07       	cpc	r27, r19
    52c2:	e4 07       	cpc	r30, r20
    52c4:	f5 07       	cpc	r31, r21
    52c6:	20 f0       	brcs	.+8      	; 0x52d0 <__udivmodsi4_ep>
    52c8:	a2 1b       	sub	r26, r18
    52ca:	b3 0b       	sbc	r27, r19
    52cc:	e4 0b       	sbc	r30, r20
    52ce:	f5 0b       	sbc	r31, r21

000052d0 <__udivmodsi4_ep>:
    52d0:	66 1f       	adc	r22, r22
    52d2:	77 1f       	adc	r23, r23
    52d4:	88 1f       	adc	r24, r24
    52d6:	99 1f       	adc	r25, r25
    52d8:	1a 94       	dec	r1
    52da:	69 f7       	brne	.-38     	; 0x52b6 <__udivmodsi4_loop>
    52dc:	60 95       	com	r22
    52de:	70 95       	com	r23
    52e0:	80 95       	com	r24
    52e2:	90 95       	com	r25
    52e4:	9b 01       	movw	r18, r22
    52e6:	ac 01       	movw	r20, r24
    52e8:	bd 01       	movw	r22, r26
    52ea:	cf 01       	movw	r24, r30
    52ec:	08 95       	ret

000052ee <__prologue_saves__>:
    52ee:	2f 92       	push	r2
    52f0:	3f 92       	push	r3
    52f2:	4f 92       	push	r4
    52f4:	5f 92       	push	r5
    52f6:	6f 92       	push	r6
    52f8:	7f 92       	push	r7
    52fa:	8f 92       	push	r8
    52fc:	9f 92       	push	r9
    52fe:	af 92       	push	r10
    5300:	bf 92       	push	r11
    5302:	cf 92       	push	r12
    5304:	df 92       	push	r13
    5306:	ef 92       	push	r14
    5308:	ff 92       	push	r15
    530a:	0f 93       	push	r16
    530c:	1f 93       	push	r17
    530e:	cf 93       	push	r28
    5310:	df 93       	push	r29
    5312:	cd b7       	in	r28, 0x3d	; 61
    5314:	de b7       	in	r29, 0x3e	; 62
    5316:	ca 1b       	sub	r28, r26
    5318:	db 0b       	sbc	r29, r27
    531a:	0f b6       	in	r0, 0x3f	; 63
    531c:	f8 94       	cli
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	0f be       	out	0x3f, r0	; 63
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	09 94       	ijmp

00005326 <__epilogue_restores__>:
    5326:	2a 88       	ldd	r2, Y+18	; 0x12
    5328:	39 88       	ldd	r3, Y+17	; 0x11
    532a:	48 88       	ldd	r4, Y+16	; 0x10
    532c:	5f 84       	ldd	r5, Y+15	; 0x0f
    532e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5330:	7d 84       	ldd	r7, Y+13	; 0x0d
    5332:	8c 84       	ldd	r8, Y+12	; 0x0c
    5334:	9b 84       	ldd	r9, Y+11	; 0x0b
    5336:	aa 84       	ldd	r10, Y+10	; 0x0a
    5338:	b9 84       	ldd	r11, Y+9	; 0x09
    533a:	c8 84       	ldd	r12, Y+8	; 0x08
    533c:	df 80       	ldd	r13, Y+7	; 0x07
    533e:	ee 80       	ldd	r14, Y+6	; 0x06
    5340:	fd 80       	ldd	r15, Y+5	; 0x05
    5342:	0c 81       	ldd	r16, Y+4	; 0x04
    5344:	1b 81       	ldd	r17, Y+3	; 0x03
    5346:	aa 81       	ldd	r26, Y+2	; 0x02
    5348:	b9 81       	ldd	r27, Y+1	; 0x01
    534a:	ce 0f       	add	r28, r30
    534c:	d1 1d       	adc	r29, r1
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	f8 94       	cli
    5352:	de bf       	out	0x3e, r29	; 62
    5354:	0f be       	out	0x3f, r0	; 63
    5356:	cd bf       	out	0x3d, r28	; 61
    5358:	ed 01       	movw	r28, r26
    535a:	08 95       	ret

0000535c <_exit>:
    535c:	f8 94       	cli

0000535e <__stop_program>:
    535e:	ff cf       	rjmp	.-2      	; 0x535e <__stop_program>
